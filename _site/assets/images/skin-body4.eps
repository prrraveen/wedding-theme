%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Eastern European
%%Title: heart2.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Tomi
%%CreationDate: 10/3/2014
%%BoundingBox: 0 0 777 773
%%HiResBoundingBox: 0 0 776.9609 772.7745
%%CropBox: 0 0 776.9609 772.7745
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2014-10-03T13:11:05+02:00</xmp:CreateDate>
         <xmp:MetadataDate>2014-10-03T13:11:05+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-10-03T13:11:05+02:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9A3ErIoC7E98pkXaQjah&#xA;9ZlpSv098jxFs8MKttOzsyNvQAg5KJa8kQEfHEhSp6nvk3HlI22IF40O58cUGZQbSERF+4/XWmRJ&#xA;bwLKGFzKD1r88hxFuOMLoriT1FVjUMaYQWMoCkwhRWqTvTtk3GmaXiBASTuOw8MLHjKg9FlZB2of&#xA;vwNkTYQTXMvIkGg7CmQ4i5IgKaa6lqWrQdadseIr4YR0IDla9CK5NxpGlcwJyB6DuMLXxlSnVUZa&#xA;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&#xA;3//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>775.071280</stDim:w>
            <stDim:h>772.774380</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Red</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Yellow</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Green</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Cyan</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Blue</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Magenta</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=193 G=39 B=45</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>193</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>45</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=28 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>28</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 G=90 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>90</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=147 B=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>247</xmpG:red>
                           <xmpG:green>147</xmpG:green>
                           <xmpG:blue>30</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=176 B=59</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>176</xmpG:green>
                           <xmpG:blue>59</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=238 B=33</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>238</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=217 G=224 B=33</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>217</xmpG:red>
                           <xmpG:green>224</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=140 G=198 B=63</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>140</xmpG:red>
                           <xmpG:green>198</xmpG:green>
                           <xmpG:blue>63</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=57 G=181 B=74</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>57</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>74</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=146 B=69</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>146</xmpG:green>
                           <xmpG:blue>69</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=104 B=55</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>104</xmpG:green>
                           <xmpG:blue>55</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=34 G=181 B=115</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>34</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>115</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=169 B=157</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>157</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=41 G=171 B=226</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>41</xmpG:red>
                           <xmpG:green>171</xmpG:green>
                           <xmpG:blue>226</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=113 B=188</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>113</xmpG:green>
                           <xmpG:blue>188</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=46 G=49 B=146</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>46</xmpG:red>
                           <xmpG:green>49</xmpG:green>
                           <xmpG:blue>146</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=27 G=20 B=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>27</xmpG:red>
                           <xmpG:green>20</xmpG:green>
                           <xmpG:blue>100</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 G=45 B=145</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>45</xmpG:green>
                           <xmpG:blue>145</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=147 G=39 B=143</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>143</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=158 G=0 B=93</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>158</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>93</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=212 G=20 B=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>212</xmpG:red>
                           <xmpG:green>20</xmpG:green>
                           <xmpG:blue>90</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=30 B=121</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>30</xmpG:green>
                           <xmpG:blue>121</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=199 G=178 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>199</xmpG:red>
                           <xmpG:green>178</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=134 B=117</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>134</xmpG:green>
                           <xmpG:blue>117</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=115 G=99 B=87</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>115</xmpG:red>
                           <xmpG:green>99</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=83 G=71 B=65</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>83</xmpG:red>
                           <xmpG:green>71</xmpG:green>
                           <xmpG:blue>65</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=198 G=156 B=109</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>198</xmpG:red>
                           <xmpG:green>156</xmpG:green>
                           <xmpG:blue>109</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=166 G=124 B=82</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>166</xmpG:red>
                           <xmpG:green>124</xmpG:green>
                           <xmpG:blue>82</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=140 G=98 B=57</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>140</xmpG:red>
                           <xmpG:green>98</xmpG:green>
                           <xmpG:blue>57</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=117 G=76 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>117</xmpG:red>
                           <xmpG:green>76</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=96 G=56 B=19</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>96</xmpG:red>
                           <xmpG:green>56</xmpG:green>
                           <xmpG:blue>19</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=66 G=33 B=11</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>66</xmpG:red>
                           <xmpG:green>33</xmpG:green>
                           <xmpG:blue>11</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=26 G=26 B=26</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>26</xmpG:red>
                           <xmpG:green>26</xmpG:green>
                           <xmpG:blue>26</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=51 G=51 B=51</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>51</xmpG:red>
                           <xmpG:green>51</xmpG:green>
                           <xmpG:blue>51</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=77 G=77 B=77</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>77</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>77</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 G=102 B=102</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>102</xmpG:green>
                           <xmpG:blue>102</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=128 G=128 B=128</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>128</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=153 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>153</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=179 G=179 B=179</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>179</xmpG:red>
                           <xmpG:green>179</xmpG:green>
                           <xmpG:blue>179</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=204 B=204</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=230 G=230 B=230</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>230</xmpG:green>
                           <xmpG:blue>230</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=242 B=242</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=63 G=169 B=245</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>63</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>245</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=122 G=201 B=67</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>122</xmpG:red>
                           <xmpG:green>201</xmpG:green>
                           <xmpG:blue>67</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=147 B=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>147</xmpG:green>
                           <xmpG:blue>30</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=29 B=37</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>37</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=123 B=172</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>123</xmpG:green>
                           <xmpG:blue>172</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=189 G=204 B=212</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>189</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>212</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Tomi</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-repair">heart2.eps</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:description>
            <rdf:Alt/>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>saint</rdf:li>
               <rdf:li>st</rdf:li>
               <rdf:li>february</rdf:li>
               <rdf:li>14</rdf:li>
               <rdf:li>14th</rdf:li>
               <rdf:li>heart</rdf:li>
               <rdf:li>love</rdf:li>
               <rdf:li>symbol</rdf:li>
               <rdf:li>shape</rdf:li>
               <rdf:li>valentine</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>isolated</rdf:li>
               <rdf:li>background</rdf:li>
               <rdf:li>romance</rdf:li>
               <rdf:li>decoration</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>day</rdf:li>
               <rdf:li>gift</rdf:li>
               <rdf:li>pink</rdf:li>
               <rdf:li>wedding</rdf:li>
               <rdf:li>romantic</rdf:li>
               <rdf:li>ornament</rdf:li>
               <rdf:li>marriage</rdf:li>
               <rdf:li>healthy</rdf:li>
               <rdf:li>happy</rdf:li>
               <rdf:li>passion</rdf:li>
               <rdf:li>support</rdf:li>
               <rdf:li>relationship</rdf:li>
               <rdf:li>lovely</rdf:li>
               <rdf:li>sweet</rdf:li>
               <rdf:li>affection</rdf:li>
               <rdf:li>medical</rdf:li>
               <rdf:li>care</rdf:li>
               <rdf:li>emblem</rdf:li>
               <rdf:li>emotion</rdf:li>
               <rdf:li>graphics</rdf:li>
               <rdf:li>marry</rdf:li>
               <rdf:li>pair</rdf:li>
               <rdf:li>creative</rdf:li>
               <rdf:li>chain</rdf:li>
               <rdf:li>link</rdf:li>
               <rdf:li>chainlink</rdf:li>
               <rdf:li>circle</rdf:li>
               <rdf:li>cute</rdf:li>
               <rdf:li>adorable</rdf:li>
               <rdf:li>girlish</rdf:li>
               <rdf:li>girly</rdf:li>
               <rdf:li>patern</rdf:li>
               <rdf:li>back ground</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmpMM:InstanceID>xmp.iid:d91f5ea5-a13a-fa43-bfe3-580d29b7a256</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:d91f5ea5-a13a-fa43-bfe3-580d29b7a256</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>xmp.did:6d1607b9-3d99-254f-98c4-b7863b2eb51a</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6d1607b9-3d99-254f-98c4-b7863b2eb51a</stEvt:instanceID>
                  <stEvt:when>2014-09-22T21:15:19+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4148275d-960f-3a45-b41a-5c888e9fbd8e</stEvt:instanceID>
                  <stEvt:when>2014-09-22T21:23:04+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d91f5ea5-a13a-fa43-bfe3-580d29b7a256</stEvt:instanceID>
                  <stEvt:when>2014-10-03T13:11:05+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:4148275d-960f-3a45-b41a-5c888e9fbd8e</stRef:instanceID>
            <stRef:documentID>xmp.did:6d1607b9-3d99-254f-98c4-b7863b2eb51a</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:6d1607b9-3d99-254f-98c4-b7863b2eb51a</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -772.774 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 772.774 li
776.961 772.774 li
776.961 0 li
cp
clp
776.961 772.774 mo
0 772.774 li
0 0 li
776.961 0 li
776.961 772.774 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.00805676 .154726 .053315 0 cmyk
f
gsave
776.961 772.774 mo
0 772.774 li
0 0 li
776.961 0 li
776.961 772.774 li
cp
clp
38.0161 18.5425 mo
38.0161 24.9536 38.0161 46.77 38.0161 46.77 cv
38.0161 46.77 14.7983 38.2163 14.7983 18.5425 cv
14.7983 12.1309 19.9961 6.93359 26.4072 6.93359 cv
32.8184 6.93359 38.0161 12.1309 38.0161 18.5425 cv
cp
.0822156 .413947 .201938 0 cmyk
f
38.0161 18.5425 mo
38.0161 24.9536 38.0161 46.77 38.0161 46.77 cv
38.0161 46.77 61.2339 38.2163 61.2339 18.5425 cv
61.2339 12.1309 56.0361 6.93359 49.625 6.93359 cv
43.2139 6.93359 38.0161 12.1309 38.0161 18.5425 cv
cp
f
101.786 18.5425 mo
101.786 24.9536 101.786 46.77 101.786 46.77 cv
101.786 46.77 78.5684 38.2163 78.5684 18.5425 cv
78.5684 12.1309 83.7661 6.93359 90.1772 6.93359 cv
96.5884 6.93359 101.786 12.1309 101.786 18.5425 cv
cp
f
101.786 18.5425 mo
101.786 24.9536 101.786 46.77 101.786 46.77 cv
101.786 46.77 125.004 38.2163 125.004 18.5425 cv
125.004 12.1309 119.806 6.93359 113.395 6.93359 cv
106.984 6.93359 101.786 12.1309 101.786 18.5425 cv
cp
f
165.556 18.5425 mo
165.556 24.9536 165.556 46.77 165.556 46.77 cv
165.556 46.77 142.338 38.2163 142.338 18.5425 cv
142.338 12.1309 147.536 6.93359 153.947 6.93359 cv
160.358 6.93359 165.556 12.1309 165.556 18.5425 cv
cp
f
165.556 18.5425 mo
165.556 24.9536 165.556 46.77 165.556 46.77 cv
165.556 46.77 188.773 38.2163 188.773 18.5425 cv
188.773 12.1309 183.576 6.93359 177.165 6.93359 cv
170.753 6.93359 165.556 12.1309 165.556 18.5425 cv
cp
f
229.326 18.5425 mo
229.326 24.9536 229.326 46.77 229.326 46.77 cv
229.326 46.77 206.108 38.2163 206.108 18.5425 cv
206.108 12.1309 211.306 6.93359 217.717 6.93359 cv
224.128 6.93359 229.326 12.1309 229.326 18.5425 cv
cp
f
229.326 18.5425 mo
229.326 24.9536 229.326 46.77 229.326 46.77 cv
229.326 46.77 252.543 38.2163 252.543 18.5425 cv
252.543 12.1309 247.346 6.93359 240.935 6.93359 cv
234.523 6.93359 229.326 12.1309 229.326 18.5425 cv
cp
f
293.095 18.5425 mo
293.095 24.9536 293.095 46.77 293.095 46.77 cv
293.095 46.77 269.877 38.2163 269.877 18.5425 cv
269.877 12.1309 275.076 6.93359 281.487 6.93359 cv
287.898 6.93359 293.095 12.1309 293.095 18.5425 cv
cp
f
293.095 18.5425 mo
293.095 24.9536 293.095 46.77 293.095 46.77 cv
293.095 46.77 316.313 38.2163 316.313 18.5425 cv
316.313 12.1309 311.116 6.93359 304.705 6.93359 cv
298.293 6.93359 293.095 12.1309 293.095 18.5425 cv
cp
f
356.865 18.5425 mo
356.865 24.9536 356.865 46.77 356.865 46.77 cv
356.865 46.77 333.647 38.2163 333.647 18.5425 cv
333.647 12.1309 338.845 6.93359 345.256 6.93359 cv
351.667 6.93359 356.865 12.1309 356.865 18.5425 cv
cp
f
356.865 18.5425 mo
356.865 24.9536 356.865 46.77 356.865 46.77 cv
356.865 46.77 380.083 38.2163 380.083 18.5425 cv
380.083 12.1309 374.885 6.93359 368.474 6.93359 cv
362.063 6.93359 356.865 12.1309 356.865 18.5425 cv
cp
f
420.634 18.5425 mo
420.634 24.9536 420.634 46.77 420.634 46.77 cv
420.634 46.77 397.417 38.2163 397.417 18.5425 cv
397.417 12.1309 402.614 6.93359 409.026 6.93359 cv
415.436 6.93359 420.634 12.1309 420.634 18.5425 cv
cp
f
420.634 18.5425 mo
420.634 24.9536 420.634 46.77 420.634 46.77 cv
420.634 46.77 443.852 38.2163 443.852 18.5425 cv
443.852 12.1309 438.655 6.93359 432.243 6.93359 cv
425.833 6.93359 420.634 12.1309 420.634 18.5425 cv
cp
f
484.405 18.5425 mo
484.405 24.9536 484.405 46.77 484.405 46.77 cv
484.405 46.77 461.188 38.2163 461.188 18.5425 cv
461.188 12.1309 466.386 6.93359 472.796 6.93359 cv
479.208 6.93359 484.405 12.1309 484.405 18.5425 cv
cp
f
484.405 18.5425 mo
484.405 24.9536 484.405 46.77 484.405 46.77 cv
484.405 46.77 507.624 38.2163 507.624 18.5425 cv
507.624 12.1309 502.425 6.93359 496.015 6.93359 cv
489.602 6.93359 484.405 12.1309 484.405 18.5425 cv
cp
f
548.175 18.5425 mo
548.175 24.9536 548.175 46.77 548.175 46.77 cv
548.175 46.77 524.958 38.2163 524.958 18.5425 cv
524.958 12.1309 530.155 6.93359 536.565 6.93359 cv
542.977 6.93359 548.175 12.1309 548.175 18.5425 cv
cp
f
548.175 18.5425 mo
548.175 24.9536 548.175 46.77 548.175 46.77 cv
548.175 46.77 571.394 38.2163 571.394 18.5425 cv
571.394 12.1309 566.194 6.93359 559.784 6.93359 cv
553.372 6.93359 548.175 12.1309 548.175 18.5425 cv
cp
f
611.944 18.5425 mo
611.944 24.9536 611.944 46.77 611.944 46.77 cv
611.944 46.77 588.727 38.2163 588.727 18.5425 cv
588.727 12.1309 593.925 6.93359 600.335 6.93359 cv
606.747 6.93359 611.944 12.1309 611.944 18.5425 cv
cp
f
611.944 18.5425 mo
611.944 24.9536 611.944 46.77 611.944 46.77 cv
611.944 46.77 635.163 38.2163 635.163 18.5425 cv
635.163 12.1309 629.964 6.93359 623.554 6.93359 cv
617.142 6.93359 611.944 12.1309 611.944 18.5425 cv
cp
f
675.716 18.5425 mo
675.716 24.9536 675.716 46.77 675.716 46.77 cv
675.716 46.77 652.499 38.2163 652.499 18.5425 cv
652.499 12.1309 657.696 6.93359 664.106 6.93359 cv
670.519 6.93359 675.716 12.1309 675.716 18.5425 cv
cp
f
675.716 18.5425 mo
675.716 24.9536 675.716 46.77 675.716 46.77 cv
675.716 46.77 698.935 38.2163 698.935 18.5425 cv
698.935 12.1309 693.735 6.93359 687.325 6.93359 cv
680.913 6.93359 675.716 12.1309 675.716 18.5425 cv
cp
f
739.485 18.5425 mo
739.485 24.9536 739.485 46.77 739.485 46.77 cv
739.485 46.77 716.269 38.2163 716.269 18.5425 cv
716.269 12.1309 721.466 6.93359 727.876 6.93359 cv
734.288 6.93359 739.485 12.1309 739.485 18.5425 cv
cp
f
739.485 18.5425 mo
739.485 24.9536 739.485 46.77 739.485 46.77 cv
739.485 46.77 762.704 38.2163 762.704 18.5425 cv
762.704 12.1309 757.505 6.93359 751.095 6.93359 cv
744.683 6.93359 739.485 12.1309 739.485 18.5425 cv
cp
f
3.75732 65.9795 mo
3.75732 72.3906 3.75732 94.207 3.75732 94.207 cv
3.75732 94.207 -19.4604 85.6533 -19.4604 65.9795 cv
-19.4604 59.5679 -14.2627 54.3706 -7.85156 54.3706 cv
-1.44043 54.3706 3.75732 59.5679 3.75732 65.9795 cv
cp
f
3.75732 65.9795 mo
3.75732 72.3906 3.75732 94.207 3.75732 94.207 cv
3.75732 94.207 26.9751 85.6533 26.9751 65.9795 cv
26.9751 59.5679 21.7773 54.3706 15.3662 54.3706 cv
8.95508 54.3706 3.75732 59.5679 3.75732 65.9795 cv
cp
f
67.5273 65.9795 mo
67.5273 72.3906 67.5273 94.207 67.5273 94.207 cv
67.5273 94.207 44.3096 85.6533 44.3096 65.9795 cv
44.3096 59.5679 49.5073 54.3706 55.9185 54.3706 cv
62.3296 54.3706 67.5273 59.5679 67.5273 65.9795 cv
cp
f
67.5273 65.9795 mo
67.5273 72.3906 67.5273 94.207 67.5273 94.207 cv
67.5273 94.207 90.7451 85.6533 90.7451 65.9795 cv
90.7451 59.5679 85.5474 54.3706 79.1362 54.3706 cv
72.7251 54.3706 67.5273 59.5679 67.5273 65.9795 cv
cp
f
131.297 65.9795 mo
131.297 72.3906 131.297 94.207 131.297 94.207 cv
131.297 94.207 108.079 85.6533 108.079 65.9795 cv
108.079 59.5679 113.277 54.3706 119.688 54.3706 cv
126.099 54.3706 131.297 59.5679 131.297 65.9795 cv
cp
f
131.297 65.9795 mo
131.297 72.3906 131.297 94.207 131.297 94.207 cv
131.297 94.207 154.515 85.6533 154.515 65.9795 cv
154.515 59.5679 149.317 54.3706 142.906 54.3706 cv
136.495 54.3706 131.297 59.5679 131.297 65.9795 cv
cp
f
195.067 65.9795 mo
195.067 72.3906 195.067 94.207 195.067 94.207 cv
195.067 94.207 171.849 85.6533 171.849 65.9795 cv
171.849 59.5679 177.047 54.3706 183.458 54.3706 cv
189.869 54.3706 195.067 59.5679 195.067 65.9795 cv
cp
f
195.067 65.9795 mo
195.067 72.3906 195.067 94.207 195.067 94.207 cv
195.067 94.207 218.285 85.6533 218.285 65.9795 cv
218.285 59.5679 213.087 54.3706 206.676 54.3706 cv
200.265 54.3706 195.067 59.5679 195.067 65.9795 cv
cp
f
258.836 65.9795 mo
258.836 72.3906 258.836 94.207 258.836 94.207 cv
258.836 94.207 235.619 85.6533 235.619 65.9795 cv
235.619 59.5679 240.817 54.3706 247.228 54.3706 cv
253.639 54.3706 258.836 59.5679 258.836 65.9795 cv
cp
f
258.836 65.9795 mo
258.836 72.3906 258.836 94.207 258.836 94.207 cv
258.836 94.207 282.054 85.6533 282.054 65.9795 cv
282.054 59.5679 276.857 54.3706 270.446 54.3706 cv
264.035 54.3706 258.836 59.5679 258.836 65.9795 cv
cp
f
322.606 65.9795 mo
322.606 72.3906 322.606 94.207 322.606 94.207 cv
322.606 94.207 299.389 85.6533 299.389 65.9795 cv
299.389 59.5679 304.586 54.3706 310.998 54.3706 cv
317.409 54.3706 322.606 59.5679 322.606 65.9795 cv
cp
f
322.606 65.9795 mo
322.606 72.3906 322.606 94.207 322.606 94.207 cv
322.606 94.207 345.824 85.6533 345.824 65.9795 cv
345.824 59.5679 340.626 54.3706 334.215 54.3706 cv
327.804 54.3706 322.606 59.5679 322.606 65.9795 cv
cp
f
386.375 65.9795 mo
386.375 72.3906 386.375 94.207 386.375 94.207 cv
386.375 94.207 363.159 85.6533 363.159 65.9795 cv
363.159 59.5679 368.356 54.3706 374.767 54.3706 cv
381.178 54.3706 386.375 59.5679 386.375 65.9795 cv
cp
f
386.375 65.9795 mo
386.375 72.3906 386.375 94.207 386.375 94.207 cv
386.375 94.207 409.595 85.6533 409.595 65.9795 cv
409.595 59.5679 404.395 54.3706 397.985 54.3706 cv
391.574 54.3706 386.375 59.5679 386.375 65.9795 cv
cp
f
450.145 65.9795 mo
450.145 72.3906 450.145 94.207 450.145 94.207 cv
450.145 94.207 426.929 85.6533 426.929 65.9795 cv
426.929 59.5679 432.126 54.3706 438.538 54.3706 cv
444.948 54.3706 450.145 59.5679 450.145 65.9795 cv
cp
f
450.145 65.9795 mo
450.145 72.3906 450.145 94.207 450.145 94.207 cv
450.145 94.207 473.364 85.6533 473.364 65.9795 cv
473.364 59.5679 468.167 54.3706 461.755 54.3706 cv
455.345 54.3706 450.145 59.5679 450.145 65.9795 cv
cp
f
513.915 65.9795 mo
513.915 72.3906 513.915 94.207 513.915 94.207 cv
513.915 94.207 490.698 85.6533 490.698 65.9795 cv
490.698 59.5679 495.895 54.3706 502.306 54.3706 cv
508.718 54.3706 513.915 59.5679 513.915 65.9795 cv
cp
f
513.915 65.9795 mo
513.915 72.3906 513.915 94.207 513.915 94.207 cv
513.915 94.207 537.134 85.6533 537.134 65.9795 cv
537.134 59.5679 531.935 54.3706 525.524 54.3706 cv
519.112 54.3706 513.915 59.5679 513.915 65.9795 cv
cp
f
577.686 65.9795 mo
577.686 72.3906 577.686 94.207 577.686 94.207 cv
577.686 94.207 554.47 85.6533 554.47 65.9795 cv
554.47 59.5679 559.667 54.3706 566.077 54.3706 cv
572.489 54.3706 577.686 59.5679 577.686 65.9795 cv
cp
f
577.686 65.9795 mo
577.686 72.3906 577.686 94.207 577.686 94.207 cv
577.686 94.207 600.905 85.6533 600.905 65.9795 cv
600.905 59.5679 595.706 54.3706 589.296 54.3706 cv
582.884 54.3706 577.686 59.5679 577.686 65.9795 cv
cp
f
641.456 65.9795 mo
641.456 72.3906 641.456 94.207 641.456 94.207 cv
641.456 94.207 618.239 85.6533 618.239 65.9795 cv
618.239 59.5679 623.436 54.3706 629.847 54.3706 cv
636.259 54.3706 641.456 59.5679 641.456 65.9795 cv
cp
f
641.456 65.9795 mo
641.456 72.3906 641.456 94.207 641.456 94.207 cv
641.456 94.207 664.675 85.6533 664.675 65.9795 cv
664.675 59.5679 659.476 54.3706 653.065 54.3706 cv
646.653 54.3706 641.456 59.5679 641.456 65.9795 cv
cp
f
705.226 65.9795 mo
705.226 72.3906 705.226 94.207 705.226 94.207 cv
705.226 94.207 682.009 85.6533 682.009 65.9795 cv
682.009 59.5679 687.206 54.3706 693.616 54.3706 cv
700.028 54.3706 705.226 59.5679 705.226 65.9795 cv
cp
f
705.226 65.9795 mo
705.226 72.3906 705.226 94.207 705.226 94.207 cv
705.226 94.207 728.444 85.6533 728.444 65.9795 cv
728.444 59.5679 723.245 54.3706 716.835 54.3706 cv
710.423 54.3706 705.226 59.5679 705.226 65.9795 cv
cp
f
38.0161 108.538 mo
38.0161 114.949 38.0161 136.766 38.0161 136.766 cv
38.0161 136.766 14.7983 128.212 14.7983 108.538 cv
14.7983 102.127 19.9961 96.9292 26.4072 96.9292 cv
32.8184 96.9292 38.0161 102.127 38.0161 108.538 cv
cp
f
38.0161 108.538 mo
38.0161 114.949 38.0161 136.766 38.0161 136.766 cv
38.0161 136.766 61.2339 128.212 61.2339 108.538 cv
61.2339 102.127 56.0361 96.9292 49.625 96.9292 cv
43.2139 96.9292 38.0161 102.127 38.0161 108.538 cv
cp
f
101.786 108.538 mo
101.786 114.949 101.786 136.766 101.786 136.766 cv
101.786 136.766 78.5684 128.212 78.5684 108.538 cv
78.5684 102.127 83.7661 96.9292 90.1772 96.9292 cv
96.5884 96.9292 101.786 102.127 101.786 108.538 cv
cp
f
101.786 108.538 mo
101.786 114.949 101.786 136.766 101.786 136.766 cv
101.786 136.766 125.004 128.212 125.004 108.538 cv
125.004 102.127 119.806 96.9292 113.395 96.9292 cv
106.984 96.9292 101.786 102.127 101.786 108.538 cv
cp
f
165.556 108.538 mo
165.556 114.949 165.556 136.766 165.556 136.766 cv
165.556 136.766 142.338 128.212 142.338 108.538 cv
142.338 102.127 147.536 96.9292 153.947 96.9292 cv
160.358 96.9292 165.556 102.127 165.556 108.538 cv
cp
f
165.556 108.538 mo
165.556 114.949 165.556 136.766 165.556 136.766 cv
165.556 136.766 188.773 128.212 188.773 108.538 cv
188.773 102.127 183.576 96.9292 177.165 96.9292 cv
170.753 96.9292 165.556 102.127 165.556 108.538 cv
cp
f
229.326 108.538 mo
229.326 114.949 229.326 136.766 229.326 136.766 cv
229.326 136.766 206.108 128.212 206.108 108.538 cv
206.108 102.127 211.306 96.9292 217.717 96.9292 cv
224.128 96.9292 229.326 102.127 229.326 108.538 cv
cp
f
229.326 108.538 mo
229.326 114.949 229.326 136.766 229.326 136.766 cv
229.326 136.766 252.543 128.212 252.543 108.538 cv
252.543 102.127 247.346 96.9292 240.935 96.9292 cv
234.523 96.9292 229.326 102.127 229.326 108.538 cv
cp
f
293.095 108.538 mo
293.095 114.949 293.095 136.766 293.095 136.766 cv
293.095 136.766 269.877 128.212 269.877 108.538 cv
269.877 102.127 275.076 96.9292 281.487 96.9292 cv
287.898 96.9292 293.095 102.127 293.095 108.538 cv
cp
f
293.095 108.538 mo
293.095 114.949 293.095 136.766 293.095 136.766 cv
293.095 136.766 316.313 128.212 316.313 108.538 cv
316.313 102.127 311.116 96.9292 304.705 96.9292 cv
298.293 96.9292 293.095 102.127 293.095 108.538 cv
cp
f
356.865 108.538 mo
356.865 114.949 356.865 136.766 356.865 136.766 cv
356.865 136.766 333.647 128.212 333.647 108.538 cv
333.647 102.127 338.845 96.9292 345.256 96.9292 cv
351.667 96.9292 356.865 102.127 356.865 108.538 cv
cp
f
356.865 108.538 mo
356.865 114.949 356.865 136.766 356.865 136.766 cv
356.865 136.766 380.083 128.212 380.083 108.538 cv
380.083 102.127 374.885 96.9292 368.474 96.9292 cv
362.063 96.9292 356.865 102.127 356.865 108.538 cv
cp
f
420.634 108.538 mo
420.634 114.949 420.634 136.766 420.634 136.766 cv
420.634 136.766 397.417 128.212 397.417 108.538 cv
397.417 102.127 402.614 96.9292 409.026 96.9292 cv
415.436 96.9292 420.634 102.127 420.634 108.538 cv
cp
f
420.634 108.538 mo
420.634 114.949 420.634 136.766 420.634 136.766 cv
420.634 136.766 443.852 128.212 443.852 108.538 cv
443.852 102.127 438.655 96.9292 432.243 96.9292 cv
425.833 96.9292 420.634 102.127 420.634 108.538 cv
cp
f
484.405 108.538 mo
484.405 114.949 484.405 136.766 484.405 136.766 cv
484.405 136.766 461.188 128.212 461.188 108.538 cv
461.188 102.127 466.386 96.9292 472.796 96.9292 cv
479.208 96.9292 484.405 102.127 484.405 108.538 cv
cp
f
484.405 108.538 mo
484.405 114.949 484.405 136.766 484.405 136.766 cv
484.405 136.766 507.624 128.212 507.624 108.538 cv
507.624 102.127 502.425 96.9292 496.015 96.9292 cv
489.602 96.9292 484.405 102.127 484.405 108.538 cv
cp
f
548.175 108.538 mo
548.175 114.949 548.175 136.766 548.175 136.766 cv
548.175 136.766 524.958 128.212 524.958 108.538 cv
524.958 102.127 530.155 96.9292 536.565 96.9292 cv
542.977 96.9292 548.175 102.127 548.175 108.538 cv
cp
f
548.175 108.538 mo
548.175 114.949 548.175 136.766 548.175 136.766 cv
548.175 136.766 571.394 128.212 571.394 108.538 cv
571.394 102.127 566.194 96.9292 559.784 96.9292 cv
553.372 96.9292 548.175 102.127 548.175 108.538 cv
cp
f
611.944 108.538 mo
611.944 114.949 611.944 136.766 611.944 136.766 cv
611.944 136.766 588.727 128.212 588.727 108.538 cv
588.727 102.127 593.925 96.9292 600.335 96.9292 cv
606.747 96.9292 611.944 102.127 611.944 108.538 cv
cp
f
611.944 108.538 mo
611.944 114.949 611.944 136.766 611.944 136.766 cv
611.944 136.766 635.163 128.212 635.163 108.538 cv
635.163 102.127 629.964 96.9292 623.554 96.9292 cv
617.142 96.9292 611.944 102.127 611.944 108.538 cv
cp
f
675.716 108.538 mo
675.716 114.949 675.716 136.766 675.716 136.766 cv
675.716 136.766 652.499 128.212 652.499 108.538 cv
652.499 102.127 657.696 96.9292 664.106 96.9292 cv
670.519 96.9292 675.716 102.127 675.716 108.538 cv
cp
f
675.716 108.538 mo
675.716 114.949 675.716 136.766 675.716 136.766 cv
675.716 136.766 698.935 128.212 698.935 108.538 cv
698.935 102.127 693.735 96.9292 687.325 96.9292 cv
680.913 96.9292 675.716 102.127 675.716 108.538 cv
cp
f
739.485 108.538 mo
739.485 114.949 739.485 136.766 739.485 136.766 cv
739.485 136.766 716.269 128.212 716.269 108.538 cv
716.269 102.127 721.466 96.9292 727.876 96.9292 cv
734.288 96.9292 739.485 102.127 739.485 108.538 cv
cp
f
739.485 108.538 mo
739.485 114.949 739.485 136.766 739.485 136.766 cv
739.485 136.766 762.704 128.212 762.704 108.538 cv
762.704 102.127 757.505 96.9292 751.095 96.9292 cv
744.683 96.9292 739.485 102.127 739.485 108.538 cv
cp
f
3.75732 155.975 mo
3.75732 162.386 3.75732 184.203 3.75732 184.203 cv
3.75732 184.203 -19.4604 175.649 -19.4604 155.975 cv
-19.4604 149.564 -14.2627 144.366 -7.85156 144.366 cv
-1.44043 144.366 3.75732 149.564 3.75732 155.975 cv
cp
f
3.75732 155.975 mo
3.75732 162.386 3.75732 184.203 3.75732 184.203 cv
3.75732 184.203 26.9751 175.649 26.9751 155.975 cv
26.9751 149.564 21.7773 144.366 15.3662 144.366 cv
8.95508 144.366 3.75732 149.564 3.75732 155.975 cv
cp
f
67.5273 155.975 mo
67.5273 162.386 67.5273 184.203 67.5273 184.203 cv
67.5273 184.203 44.3096 175.649 44.3096 155.975 cv
44.3096 149.564 49.5073 144.366 55.9185 144.366 cv
62.3296 144.366 67.5273 149.564 67.5273 155.975 cv
cp
f
67.5273 155.975 mo
67.5273 162.386 67.5273 184.203 67.5273 184.203 cv
67.5273 184.203 90.7451 175.649 90.7451 155.975 cv
90.7451 149.564 85.5474 144.366 79.1362 144.366 cv
72.7251 144.366 67.5273 149.564 67.5273 155.975 cv
cp
f
131.297 155.975 mo
131.297 162.386 131.297 184.203 131.297 184.203 cv
131.297 184.203 108.079 175.649 108.079 155.975 cv
108.079 149.564 113.277 144.366 119.688 144.366 cv
126.099 144.366 131.297 149.564 131.297 155.975 cv
cp
f
131.297 155.975 mo
131.297 162.386 131.297 184.203 131.297 184.203 cv
131.297 184.203 154.515 175.649 154.515 155.975 cv
154.515 149.564 149.317 144.366 142.906 144.366 cv
136.495 144.366 131.297 149.564 131.297 155.975 cv
cp
f
195.067 155.975 mo
195.067 162.386 195.067 184.203 195.067 184.203 cv
195.067 184.203 171.849 175.649 171.849 155.975 cv
171.849 149.564 177.047 144.366 183.458 144.366 cv
189.869 144.366 195.067 149.564 195.067 155.975 cv
cp
f
195.067 155.975 mo
195.067 162.386 195.067 184.203 195.067 184.203 cv
195.067 184.203 218.285 175.649 218.285 155.975 cv
218.285 149.564 213.087 144.366 206.676 144.366 cv
200.265 144.366 195.067 149.564 195.067 155.975 cv
cp
f
258.836 155.975 mo
258.836 162.386 258.836 184.203 258.836 184.203 cv
258.836 184.203 235.619 175.649 235.619 155.975 cv
235.619 149.564 240.817 144.366 247.228 144.366 cv
253.639 144.366 258.836 149.564 258.836 155.975 cv
cp
f
258.836 155.975 mo
258.836 162.386 258.836 184.203 258.836 184.203 cv
258.836 184.203 282.054 175.649 282.054 155.975 cv
282.054 149.564 276.857 144.366 270.446 144.366 cv
264.035 144.366 258.836 149.564 258.836 155.975 cv
cp
f
322.606 155.975 mo
322.606 162.386 322.606 184.203 322.606 184.203 cv
322.606 184.203 299.389 175.649 299.389 155.975 cv
299.389 149.564 304.586 144.366 310.998 144.366 cv
317.409 144.366 322.606 149.564 322.606 155.975 cv
cp
f
322.606 155.975 mo
322.606 162.386 322.606 184.203 322.606 184.203 cv
322.606 184.203 345.824 175.649 345.824 155.975 cv
345.824 149.564 340.626 144.366 334.215 144.366 cv
327.804 144.366 322.606 149.564 322.606 155.975 cv
cp
f
386.375 155.975 mo
386.375 162.386 386.375 184.203 386.375 184.203 cv
386.375 184.203 363.159 175.649 363.159 155.975 cv
363.159 149.564 368.356 144.366 374.767 144.366 cv
381.178 144.366 386.375 149.564 386.375 155.975 cv
cp
f
386.375 155.975 mo
386.375 162.386 386.375 184.203 386.375 184.203 cv
386.375 184.203 409.595 175.649 409.595 155.975 cv
409.595 149.564 404.395 144.366 397.985 144.366 cv
391.574 144.366 386.375 149.564 386.375 155.975 cv
cp
f
450.145 155.975 mo
450.145 162.386 450.145 184.203 450.145 184.203 cv
450.145 184.203 426.929 175.649 426.929 155.975 cv
426.929 149.564 432.126 144.366 438.538 144.366 cv
444.948 144.366 450.145 149.564 450.145 155.975 cv
cp
f
450.145 155.975 mo
450.145 162.386 450.145 184.203 450.145 184.203 cv
450.145 184.203 473.364 175.649 473.364 155.975 cv
473.364 149.564 468.167 144.366 461.755 144.366 cv
455.345 144.366 450.145 149.564 450.145 155.975 cv
cp
f
513.915 155.975 mo
513.915 162.386 513.915 184.203 513.915 184.203 cv
513.915 184.203 490.698 175.649 490.698 155.975 cv
490.698 149.564 495.895 144.366 502.306 144.366 cv
508.718 144.366 513.915 149.564 513.915 155.975 cv
cp
f
513.915 155.975 mo
513.915 162.386 513.915 184.203 513.915 184.203 cv
513.915 184.203 537.134 175.649 537.134 155.975 cv
537.134 149.564 531.935 144.366 525.524 144.366 cv
519.112 144.366 513.915 149.564 513.915 155.975 cv
cp
f
577.686 155.975 mo
577.686 162.386 577.686 184.203 577.686 184.203 cv
577.686 184.203 554.47 175.649 554.47 155.975 cv
554.47 149.564 559.667 144.366 566.077 144.366 cv
572.489 144.366 577.686 149.564 577.686 155.975 cv
cp
f
577.686 155.975 mo
577.686 162.386 577.686 184.203 577.686 184.203 cv
577.686 184.203 600.905 175.649 600.905 155.975 cv
600.905 149.564 595.706 144.366 589.296 144.366 cv
582.884 144.366 577.686 149.564 577.686 155.975 cv
cp
f
641.456 155.975 mo
641.456 162.386 641.456 184.203 641.456 184.203 cv
641.456 184.203 618.239 175.649 618.239 155.975 cv
618.239 149.564 623.436 144.366 629.847 144.366 cv
636.259 144.366 641.456 149.564 641.456 155.975 cv
cp
f
641.456 155.975 mo
641.456 162.386 641.456 184.203 641.456 184.203 cv
641.456 184.203 664.675 175.649 664.675 155.975 cv
664.675 149.564 659.476 144.366 653.065 144.366 cv
646.653 144.366 641.456 149.564 641.456 155.975 cv
cp
f
705.226 155.975 mo
705.226 162.386 705.226 184.203 705.226 184.203 cv
705.226 184.203 682.009 175.649 682.009 155.975 cv
682.009 149.564 687.206 144.366 693.616 144.366 cv
700.028 144.366 705.226 149.564 705.226 155.975 cv
cp
f
705.226 155.975 mo
705.226 162.386 705.226 184.203 705.226 184.203 cv
705.226 184.203 728.444 175.649 728.444 155.975 cv
728.444 149.564 723.245 144.366 716.835 144.366 cv
710.423 144.366 705.226 149.564 705.226 155.975 cv
cp
f
38.0161 198.534 mo
38.0161 204.945 38.0161 226.761 38.0161 226.761 cv
38.0161 226.761 14.7983 218.208 14.7983 198.534 cv
14.7983 192.122 19.9961 186.925 26.4072 186.925 cv
32.8184 186.925 38.0161 192.122 38.0161 198.534 cv
cp
f
38.0161 198.534 mo
38.0161 204.945 38.0161 226.761 38.0161 226.761 cv
38.0161 226.761 61.2339 218.208 61.2339 198.534 cv
61.2339 192.122 56.0361 186.925 49.625 186.925 cv
43.2139 186.925 38.0161 192.122 38.0161 198.534 cv
cp
f
101.786 198.534 mo
101.786 204.945 101.786 226.761 101.786 226.761 cv
101.786 226.761 78.5684 218.208 78.5684 198.534 cv
78.5684 192.122 83.7661 186.925 90.1772 186.925 cv
96.5884 186.925 101.786 192.122 101.786 198.534 cv
cp
f
101.786 198.534 mo
101.786 204.945 101.786 226.761 101.786 226.761 cv
101.786 226.761 125.004 218.208 125.004 198.534 cv
125.004 192.122 119.806 186.925 113.395 186.925 cv
106.984 186.925 101.786 192.122 101.786 198.534 cv
cp
f
165.556 198.534 mo
165.556 204.945 165.556 226.761 165.556 226.761 cv
165.556 226.761 142.338 218.208 142.338 198.534 cv
142.338 192.122 147.536 186.925 153.947 186.925 cv
160.358 186.925 165.556 192.122 165.556 198.534 cv
cp
f
165.556 198.534 mo
165.556 204.945 165.556 226.761 165.556 226.761 cv
165.556 226.761 188.773 218.208 188.773 198.534 cv
188.773 192.122 183.576 186.925 177.165 186.925 cv
170.753 186.925 165.556 192.122 165.556 198.534 cv
cp
f
229.326 198.534 mo
229.326 204.945 229.326 226.761 229.326 226.761 cv
229.326 226.761 206.108 218.208 206.108 198.534 cv
206.108 192.122 211.306 186.925 217.717 186.925 cv
224.128 186.925 229.326 192.122 229.326 198.534 cv
cp
f
229.326 198.534 mo
229.326 204.945 229.326 226.761 229.326 226.761 cv
229.326 226.761 252.543 218.208 252.543 198.534 cv
252.543 192.122 247.346 186.925 240.935 186.925 cv
234.523 186.925 229.326 192.122 229.326 198.534 cv
cp
f
293.095 198.534 mo
293.095 204.945 293.095 226.761 293.095 226.761 cv
293.095 226.761 269.877 218.208 269.877 198.534 cv
269.877 192.122 275.076 186.925 281.487 186.925 cv
287.898 186.925 293.095 192.122 293.095 198.534 cv
cp
f
293.095 198.534 mo
293.095 204.945 293.095 226.761 293.095 226.761 cv
293.095 226.761 316.313 218.208 316.313 198.534 cv
316.313 192.122 311.116 186.925 304.705 186.925 cv
298.293 186.925 293.095 192.122 293.095 198.534 cv
cp
f
356.865 198.534 mo
356.865 204.945 356.865 226.761 356.865 226.761 cv
356.865 226.761 333.647 218.208 333.647 198.534 cv
333.647 192.122 338.845 186.925 345.256 186.925 cv
351.667 186.925 356.865 192.122 356.865 198.534 cv
cp
f
356.865 198.534 mo
356.865 204.945 356.865 226.761 356.865 226.761 cv
356.865 226.761 380.083 218.208 380.083 198.534 cv
380.083 192.122 374.885 186.925 368.474 186.925 cv
362.063 186.925 356.865 192.122 356.865 198.534 cv
cp
f
420.634 198.534 mo
420.634 204.945 420.634 226.761 420.634 226.761 cv
420.634 226.761 397.417 218.208 397.417 198.534 cv
397.417 192.122 402.614 186.925 409.026 186.925 cv
415.436 186.925 420.634 192.122 420.634 198.534 cv
cp
f
420.634 198.534 mo
420.634 204.945 420.634 226.761 420.634 226.761 cv
420.634 226.761 443.852 218.208 443.852 198.534 cv
443.852 192.122 438.655 186.925 432.243 186.925 cv
425.833 186.925 420.634 192.122 420.634 198.534 cv
cp
f
484.405 198.534 mo
484.405 204.945 484.405 226.761 484.405 226.761 cv
484.405 226.761 461.188 218.208 461.188 198.534 cv
461.188 192.122 466.386 186.925 472.796 186.925 cv
479.208 186.925 484.405 192.122 484.405 198.534 cv
cp
f
484.405 198.534 mo
484.405 204.945 484.405 226.761 484.405 226.761 cv
484.405 226.761 507.624 218.208 507.624 198.534 cv
507.624 192.122 502.425 186.925 496.015 186.925 cv
489.602 186.925 484.405 192.122 484.405 198.534 cv
cp
f
548.175 198.534 mo
548.175 204.945 548.175 226.761 548.175 226.761 cv
548.175 226.761 524.958 218.208 524.958 198.534 cv
524.958 192.122 530.155 186.925 536.565 186.925 cv
542.977 186.925 548.175 192.122 548.175 198.534 cv
cp
f
548.175 198.534 mo
548.175 204.945 548.175 226.761 548.175 226.761 cv
548.175 226.761 571.394 218.208 571.394 198.534 cv
571.394 192.122 566.194 186.925 559.784 186.925 cv
553.372 186.925 548.175 192.122 548.175 198.534 cv
cp
f
611.944 198.534 mo
611.944 204.945 611.944 226.761 611.944 226.761 cv
611.944 226.761 588.727 218.208 588.727 198.534 cv
588.727 192.122 593.925 186.925 600.335 186.925 cv
606.747 186.925 611.944 192.122 611.944 198.534 cv
cp
f
611.944 198.534 mo
611.944 204.945 611.944 226.761 611.944 226.761 cv
611.944 226.761 635.163 218.208 635.163 198.534 cv
635.163 192.122 629.964 186.925 623.554 186.925 cv
617.142 186.925 611.944 192.122 611.944 198.534 cv
cp
f
675.716 198.534 mo
675.716 204.945 675.716 226.761 675.716 226.761 cv
675.716 226.761 652.499 218.208 652.499 198.534 cv
652.499 192.122 657.696 186.925 664.106 186.925 cv
670.519 186.925 675.716 192.122 675.716 198.534 cv
cp
f
675.716 198.534 mo
675.716 204.945 675.716 226.761 675.716 226.761 cv
675.716 226.761 698.935 218.208 698.935 198.534 cv
698.935 192.122 693.735 186.925 687.325 186.925 cv
680.913 186.925 675.716 192.122 675.716 198.534 cv
cp
f
739.485 198.534 mo
739.485 204.945 739.485 226.761 739.485 226.761 cv
739.485 226.761 716.269 218.208 716.269 198.534 cv
716.269 192.122 721.466 186.925 727.876 186.925 cv
734.288 186.925 739.485 192.122 739.485 198.534 cv
cp
f
739.485 198.534 mo
739.485 204.945 739.485 226.761 739.485 226.761 cv
739.485 226.761 762.704 218.208 762.704 198.534 cv
762.704 192.122 757.505 186.925 751.095 186.925 cv
744.683 186.925 739.485 192.122 739.485 198.534 cv
cp
f
3.75732 245.971 mo
3.75732 252.382 3.75732 274.198 3.75732 274.198 cv
3.75732 274.198 -19.4604 265.645 -19.4604 245.971 cv
-19.4604 239.559 -14.2627 234.362 -7.85156 234.362 cv
-1.44043 234.362 3.75732 239.559 3.75732 245.971 cv
cp
f
3.75732 245.971 mo
3.75732 252.382 3.75732 274.198 3.75732 274.198 cv
3.75732 274.198 26.9751 265.645 26.9751 245.971 cv
26.9751 239.559 21.7773 234.362 15.3662 234.362 cv
8.95508 234.362 3.75732 239.559 3.75732 245.971 cv
cp
f
67.5273 245.971 mo
67.5273 252.382 67.5273 274.198 67.5273 274.198 cv
67.5273 274.198 44.3096 265.645 44.3096 245.971 cv
44.3096 239.559 49.5073 234.362 55.9185 234.362 cv
62.3296 234.362 67.5273 239.559 67.5273 245.971 cv
cp
f
67.5273 245.971 mo
67.5273 252.382 67.5273 274.198 67.5273 274.198 cv
67.5273 274.198 90.7451 265.645 90.7451 245.971 cv
90.7451 239.559 85.5474 234.362 79.1362 234.362 cv
72.7251 234.362 67.5273 239.559 67.5273 245.971 cv
cp
f
131.297 245.971 mo
131.297 252.382 131.297 274.198 131.297 274.198 cv
131.297 274.198 108.079 265.645 108.079 245.971 cv
108.079 239.559 113.277 234.362 119.688 234.362 cv
126.099 234.362 131.297 239.559 131.297 245.971 cv
cp
f
131.297 245.971 mo
131.297 252.382 131.297 274.198 131.297 274.198 cv
131.297 274.198 154.515 265.645 154.515 245.971 cv
154.515 239.559 149.317 234.362 142.906 234.362 cv
136.495 234.362 131.297 239.559 131.297 245.971 cv
cp
f
195.067 245.971 mo
195.067 252.382 195.067 274.198 195.067 274.198 cv
195.067 274.198 171.849 265.645 171.849 245.971 cv
171.849 239.559 177.047 234.362 183.458 234.362 cv
189.869 234.362 195.067 239.559 195.067 245.971 cv
cp
f
195.067 245.971 mo
195.067 252.382 195.067 274.198 195.067 274.198 cv
195.067 274.198 218.285 265.645 218.285 245.971 cv
218.285 239.559 213.087 234.362 206.676 234.362 cv
200.265 234.362 195.067 239.559 195.067 245.971 cv
cp
f
258.836 245.971 mo
258.836 252.382 258.836 274.198 258.836 274.198 cv
258.836 274.198 235.619 265.645 235.619 245.971 cv
235.619 239.559 240.817 234.362 247.228 234.362 cv
253.639 234.362 258.836 239.559 258.836 245.971 cv
cp
f
258.836 245.971 mo
258.836 252.382 258.836 274.198 258.836 274.198 cv
258.836 274.198 282.054 265.645 282.054 245.971 cv
282.054 239.559 276.857 234.362 270.446 234.362 cv
264.035 234.362 258.836 239.559 258.836 245.971 cv
cp
f
322.606 245.971 mo
322.606 252.382 322.606 274.198 322.606 274.198 cv
322.606 274.198 299.389 265.645 299.389 245.971 cv
299.389 239.559 304.586 234.362 310.998 234.362 cv
317.409 234.362 322.606 239.559 322.606 245.971 cv
cp
f
322.606 245.971 mo
322.606 252.382 322.606 274.198 322.606 274.198 cv
322.606 274.198 345.824 265.645 345.824 245.971 cv
345.824 239.559 340.626 234.362 334.215 234.362 cv
327.804 234.362 322.606 239.559 322.606 245.971 cv
cp
f
386.375 245.971 mo
386.375 252.382 386.375 274.198 386.375 274.198 cv
386.375 274.198 363.159 265.645 363.159 245.971 cv
363.159 239.559 368.356 234.362 374.767 234.362 cv
381.178 234.362 386.375 239.559 386.375 245.971 cv
cp
f
386.375 245.971 mo
386.375 252.382 386.375 274.198 386.375 274.198 cv
386.375 274.198 409.595 265.645 409.595 245.971 cv
409.595 239.559 404.395 234.362 397.985 234.362 cv
391.574 234.362 386.375 239.559 386.375 245.971 cv
cp
f
450.145 245.971 mo
450.145 252.382 450.145 274.198 450.145 274.198 cv
450.145 274.198 426.929 265.645 426.929 245.971 cv
426.929 239.559 432.126 234.362 438.538 234.362 cv
444.948 234.362 450.145 239.559 450.145 245.971 cv
cp
f
450.145 245.971 mo
450.145 252.382 450.145 274.198 450.145 274.198 cv
450.145 274.198 473.364 265.645 473.364 245.971 cv
473.364 239.559 468.167 234.362 461.755 234.362 cv
455.345 234.362 450.145 239.559 450.145 245.971 cv
cp
f
513.915 245.971 mo
513.915 252.382 513.915 274.198 513.915 274.198 cv
513.915 274.198 490.698 265.645 490.698 245.971 cv
490.698 239.559 495.895 234.362 502.306 234.362 cv
508.718 234.362 513.915 239.559 513.915 245.971 cv
cp
f
513.915 245.971 mo
513.915 252.382 513.915 274.198 513.915 274.198 cv
513.915 274.198 537.134 265.645 537.134 245.971 cv
537.134 239.559 531.935 234.362 525.524 234.362 cv
519.112 234.362 513.915 239.559 513.915 245.971 cv
cp
f
577.686 245.971 mo
577.686 252.382 577.686 274.198 577.686 274.198 cv
577.686 274.198 554.47 265.645 554.47 245.971 cv
554.47 239.559 559.667 234.362 566.077 234.362 cv
572.489 234.362 577.686 239.559 577.686 245.971 cv
cp
f
577.686 245.971 mo
577.686 252.382 577.686 274.198 577.686 274.198 cv
577.686 274.198 600.905 265.645 600.905 245.971 cv
600.905 239.559 595.706 234.362 589.296 234.362 cv
582.884 234.362 577.686 239.559 577.686 245.971 cv
cp
f
641.456 245.971 mo
641.456 252.382 641.456 274.198 641.456 274.198 cv
641.456 274.198 618.239 265.645 618.239 245.971 cv
618.239 239.559 623.436 234.362 629.847 234.362 cv
636.259 234.362 641.456 239.559 641.456 245.971 cv
cp
f
641.456 245.971 mo
641.456 252.382 641.456 274.198 641.456 274.198 cv
641.456 274.198 664.675 265.645 664.675 245.971 cv
664.675 239.559 659.476 234.362 653.065 234.362 cv
646.653 234.362 641.456 239.559 641.456 245.971 cv
cp
f
705.226 245.971 mo
705.226 252.382 705.226 274.198 705.226 274.198 cv
705.226 274.198 682.009 265.645 682.009 245.971 cv
682.009 239.559 687.206 234.362 693.616 234.362 cv
700.028 234.362 705.226 239.559 705.226 245.971 cv
cp
f
705.226 245.971 mo
705.226 252.382 705.226 274.198 705.226 274.198 cv
705.226 274.198 728.444 265.645 728.444 245.971 cv
728.444 239.559 723.245 234.362 716.835 234.362 cv
710.423 234.362 705.226 239.559 705.226 245.971 cv
cp
f
38.0161 288.529 mo
38.0161 294.94 38.0161 316.758 38.0161 316.758 cv
38.0161 316.758 14.7983 308.204 14.7983 288.529 cv
14.7983 282.118 19.9961 276.92 26.4072 276.92 cv
32.8184 276.92 38.0161 282.118 38.0161 288.529 cv
cp
f
38.0161 288.529 mo
38.0161 294.94 38.0161 316.758 38.0161 316.758 cv
38.0161 316.758 61.2339 308.204 61.2339 288.529 cv
61.2339 282.118 56.0361 276.92 49.625 276.92 cv
43.2139 276.92 38.0161 282.118 38.0161 288.529 cv
cp
f
101.786 288.529 mo
101.786 294.94 101.786 316.758 101.786 316.758 cv
101.786 316.758 78.5684 308.204 78.5684 288.529 cv
78.5684 282.118 83.7661 276.92 90.1772 276.92 cv
96.5884 276.92 101.786 282.118 101.786 288.529 cv
cp
f
101.786 288.529 mo
101.786 294.94 101.786 316.758 101.786 316.758 cv
101.786 316.758 125.004 308.204 125.004 288.529 cv
125.004 282.118 119.806 276.92 113.395 276.92 cv
106.984 276.92 101.786 282.118 101.786 288.529 cv
cp
f
165.556 288.529 mo
165.556 294.94 165.556 316.758 165.556 316.758 cv
165.556 316.758 142.338 308.204 142.338 288.529 cv
142.338 282.118 147.536 276.92 153.947 276.92 cv
160.358 276.92 165.556 282.118 165.556 288.529 cv
cp
f
165.556 288.529 mo
165.556 294.94 165.556 316.758 165.556 316.758 cv
165.556 316.758 188.773 308.204 188.773 288.529 cv
188.773 282.118 183.576 276.92 177.165 276.92 cv
170.753 276.92 165.556 282.118 165.556 288.529 cv
cp
f
229.326 288.529 mo
229.326 294.94 229.326 316.758 229.326 316.758 cv
229.326 316.758 206.108 308.204 206.108 288.529 cv
206.108 282.118 211.306 276.92 217.717 276.92 cv
224.128 276.92 229.326 282.118 229.326 288.529 cv
cp
f
229.326 288.529 mo
229.326 294.94 229.326 316.758 229.326 316.758 cv
229.326 316.758 252.543 308.204 252.543 288.529 cv
252.543 282.118 247.346 276.92 240.935 276.92 cv
234.523 276.92 229.326 282.118 229.326 288.529 cv
cp
f
293.095 288.529 mo
293.095 294.94 293.095 316.758 293.095 316.758 cv
293.095 316.758 269.877 308.204 269.877 288.529 cv
269.877 282.118 275.076 276.92 281.487 276.92 cv
287.898 276.92 293.095 282.118 293.095 288.529 cv
cp
f
293.095 288.529 mo
293.095 294.94 293.095 316.758 293.095 316.758 cv
293.095 316.758 316.313 308.204 316.313 288.529 cv
316.313 282.118 311.116 276.92 304.705 276.92 cv
298.293 276.92 293.095 282.118 293.095 288.529 cv
cp
f
356.865 288.529 mo
356.865 294.94 356.865 316.758 356.865 316.758 cv
356.865 316.758 333.647 308.204 333.647 288.529 cv
333.647 282.118 338.845 276.92 345.256 276.92 cv
351.667 276.92 356.865 282.118 356.865 288.529 cv
cp
f
356.865 288.529 mo
356.865 294.94 356.865 316.758 356.865 316.758 cv
356.865 316.758 380.083 308.204 380.083 288.529 cv
380.083 282.118 374.885 276.92 368.474 276.92 cv
362.063 276.92 356.865 282.118 356.865 288.529 cv
cp
f
420.634 288.529 mo
420.634 294.94 420.634 316.758 420.634 316.758 cv
420.634 316.758 397.417 308.204 397.417 288.529 cv
397.417 282.118 402.614 276.92 409.026 276.92 cv
415.436 276.92 420.634 282.118 420.634 288.529 cv
cp
f
420.634 288.529 mo
420.634 294.94 420.634 316.758 420.634 316.758 cv
420.634 316.758 443.852 308.204 443.852 288.529 cv
443.852 282.118 438.655 276.92 432.243 276.92 cv
425.833 276.92 420.634 282.118 420.634 288.529 cv
cp
f
484.405 288.529 mo
484.405 294.94 484.405 316.758 484.405 316.758 cv
484.405 316.758 461.188 308.204 461.188 288.529 cv
461.188 282.118 466.386 276.92 472.796 276.92 cv
479.208 276.92 484.405 282.118 484.405 288.529 cv
cp
f
484.405 288.529 mo
484.405 294.94 484.405 316.758 484.405 316.758 cv
484.405 316.758 507.624 308.204 507.624 288.529 cv
507.624 282.118 502.425 276.92 496.015 276.92 cv
489.602 276.92 484.405 282.118 484.405 288.529 cv
cp
f
548.175 288.529 mo
548.175 294.94 548.175 316.758 548.175 316.758 cv
548.175 316.758 524.958 308.204 524.958 288.529 cv
524.958 282.118 530.155 276.92 536.565 276.92 cv
542.977 276.92 548.175 282.118 548.175 288.529 cv
cp
f
548.175 288.529 mo
548.175 294.94 548.175 316.758 548.175 316.758 cv
548.175 316.758 571.394 308.204 571.394 288.529 cv
571.394 282.118 566.194 276.92 559.784 276.92 cv
553.372 276.92 548.175 282.118 548.175 288.529 cv
cp
f
611.944 288.529 mo
611.944 294.94 611.944 316.758 611.944 316.758 cv
611.944 316.758 588.727 308.204 588.727 288.529 cv
588.727 282.118 593.925 276.92 600.335 276.92 cv
606.747 276.92 611.944 282.118 611.944 288.529 cv
cp
f
611.944 288.529 mo
611.944 294.94 611.944 316.758 611.944 316.758 cv
611.944 316.758 635.163 308.204 635.163 288.529 cv
635.163 282.118 629.964 276.92 623.554 276.92 cv
617.142 276.92 611.944 282.118 611.944 288.529 cv
cp
f
675.716 288.529 mo
675.716 294.94 675.716 316.758 675.716 316.758 cv
675.716 316.758 652.499 308.204 652.499 288.529 cv
652.499 282.118 657.696 276.92 664.106 276.92 cv
670.519 276.92 675.716 282.118 675.716 288.529 cv
cp
f
675.716 288.529 mo
675.716 294.94 675.716 316.758 675.716 316.758 cv
675.716 316.758 698.935 308.204 698.935 288.529 cv
698.935 282.118 693.735 276.92 687.325 276.92 cv
680.913 276.92 675.716 282.118 675.716 288.529 cv
cp
f
739.485 288.529 mo
739.485 294.94 739.485 316.758 739.485 316.758 cv
739.485 316.758 716.269 308.204 716.269 288.529 cv
716.269 282.118 721.466 276.92 727.876 276.92 cv
734.288 276.92 739.485 282.118 739.485 288.529 cv
cp
f
739.485 288.529 mo
739.485 294.94 739.485 316.758 739.485 316.758 cv
739.485 316.758 762.704 308.204 762.704 288.529 cv
762.704 282.118 757.505 276.92 751.095 276.92 cv
744.683 276.92 739.485 282.118 739.485 288.529 cv
cp
f
3.75732 335.967 mo
3.75732 342.379 3.75732 364.195 3.75732 364.195 cv
3.75732 364.195 -19.4604 355.641 -19.4604 335.967 cv
-19.4604 329.556 -14.2627 324.358 -7.85156 324.358 cv
-1.44043 324.358 3.75732 329.556 3.75732 335.967 cv
cp
f
3.75732 335.967 mo
3.75732 342.379 3.75732 364.195 3.75732 364.195 cv
3.75732 364.195 26.9751 355.641 26.9751 335.967 cv
26.9751 329.556 21.7773 324.358 15.3662 324.358 cv
8.95508 324.358 3.75732 329.556 3.75732 335.967 cv
cp
f
67.5273 335.967 mo
67.5273 342.379 67.5273 364.195 67.5273 364.195 cv
67.5273 364.195 44.3096 355.641 44.3096 335.967 cv
44.3096 329.556 49.5073 324.358 55.9185 324.358 cv
62.3296 324.358 67.5273 329.556 67.5273 335.967 cv
cp
f
67.5273 335.967 mo
67.5273 342.379 67.5273 364.195 67.5273 364.195 cv
67.5273 364.195 90.7451 355.641 90.7451 335.967 cv
90.7451 329.556 85.5474 324.358 79.1362 324.358 cv
72.7251 324.358 67.5273 329.556 67.5273 335.967 cv
cp
f
131.297 335.967 mo
131.297 342.379 131.297 364.195 131.297 364.195 cv
131.297 364.195 108.079 355.641 108.079 335.967 cv
108.079 329.556 113.277 324.358 119.688 324.358 cv
126.099 324.358 131.297 329.556 131.297 335.967 cv
cp
f
131.297 335.967 mo
131.297 342.379 131.297 364.195 131.297 364.195 cv
131.297 364.195 154.515 355.641 154.515 335.967 cv
154.515 329.556 149.317 324.358 142.906 324.358 cv
136.495 324.358 131.297 329.556 131.297 335.967 cv
cp
f
195.067 335.967 mo
195.067 342.379 195.067 364.195 195.067 364.195 cv
195.067 364.195 171.849 355.641 171.849 335.967 cv
171.849 329.556 177.047 324.358 183.458 324.358 cv
189.869 324.358 195.067 329.556 195.067 335.967 cv
cp
f
195.067 335.967 mo
195.067 342.379 195.067 364.195 195.067 364.195 cv
195.067 364.195 218.285 355.641 218.285 335.967 cv
218.285 329.556 213.087 324.358 206.676 324.358 cv
200.265 324.358 195.067 329.556 195.067 335.967 cv
cp
f
258.836 335.967 mo
258.836 342.379 258.836 364.195 258.836 364.195 cv
258.836 364.195 235.619 355.641 235.619 335.967 cv
235.619 329.556 240.817 324.358 247.228 324.358 cv
253.639 324.358 258.836 329.556 258.836 335.967 cv
cp
f
258.836 335.967 mo
258.836 342.379 258.836 364.195 258.836 364.195 cv
258.836 364.195 282.054 355.641 282.054 335.967 cv
282.054 329.556 276.857 324.358 270.446 324.358 cv
264.035 324.358 258.836 329.556 258.836 335.967 cv
cp
f
322.606 335.967 mo
322.606 342.379 322.606 364.195 322.606 364.195 cv
322.606 364.195 299.389 355.641 299.389 335.967 cv
299.389 329.556 304.586 324.358 310.998 324.358 cv
317.409 324.358 322.606 329.556 322.606 335.967 cv
cp
f
322.606 335.967 mo
322.606 342.379 322.606 364.195 322.606 364.195 cv
322.606 364.195 345.824 355.641 345.824 335.967 cv
345.824 329.556 340.626 324.358 334.215 324.358 cv
327.804 324.358 322.606 329.556 322.606 335.967 cv
cp
f
386.375 335.967 mo
386.375 342.379 386.375 364.195 386.375 364.195 cv
386.375 364.195 363.159 355.641 363.159 335.967 cv
363.159 329.556 368.356 324.358 374.767 324.358 cv
381.178 324.358 386.375 329.556 386.375 335.967 cv
cp
f
386.375 335.967 mo
386.375 342.379 386.375 364.195 386.375 364.195 cv
386.375 364.195 409.595 355.641 409.595 335.967 cv
409.595 329.556 404.395 324.358 397.985 324.358 cv
391.574 324.358 386.375 329.556 386.375 335.967 cv
cp
f
450.145 335.967 mo
450.145 342.379 450.145 364.195 450.145 364.195 cv
450.145 364.195 426.929 355.641 426.929 335.967 cv
426.929 329.556 432.126 324.358 438.538 324.358 cv
444.948 324.358 450.145 329.556 450.145 335.967 cv
cp
f
450.145 335.967 mo
450.145 342.379 450.145 364.195 450.145 364.195 cv
450.145 364.195 473.364 355.641 473.364 335.967 cv
473.364 329.556 468.167 324.358 461.755 324.358 cv
455.345 324.358 450.145 329.556 450.145 335.967 cv
cp
f
513.915 335.967 mo
513.915 342.379 513.915 364.195 513.915 364.195 cv
513.915 364.195 490.698 355.641 490.698 335.967 cv
490.698 329.556 495.895 324.358 502.306 324.358 cv
508.718 324.358 513.915 329.556 513.915 335.967 cv
cp
f
513.915 335.967 mo
513.915 342.379 513.915 364.195 513.915 364.195 cv
513.915 364.195 537.134 355.641 537.134 335.967 cv
537.134 329.556 531.935 324.358 525.524 324.358 cv
519.112 324.358 513.915 329.556 513.915 335.967 cv
cp
f
577.686 335.967 mo
577.686 342.379 577.686 364.195 577.686 364.195 cv
577.686 364.195 554.47 355.641 554.47 335.967 cv
554.47 329.556 559.667 324.358 566.077 324.358 cv
572.489 324.358 577.686 329.556 577.686 335.967 cv
cp
f
577.686 335.967 mo
577.686 342.379 577.686 364.195 577.686 364.195 cv
577.686 364.195 600.905 355.641 600.905 335.967 cv
600.905 329.556 595.706 324.358 589.296 324.358 cv
582.884 324.358 577.686 329.556 577.686 335.967 cv
cp
f
641.456 335.967 mo
641.456 342.379 641.456 364.195 641.456 364.195 cv
641.456 364.195 618.239 355.641 618.239 335.967 cv
618.239 329.556 623.436 324.358 629.847 324.358 cv
636.259 324.358 641.456 329.556 641.456 335.967 cv
cp
f
641.456 335.967 mo
641.456 342.379 641.456 364.195 641.456 364.195 cv
641.456 364.195 664.675 355.641 664.675 335.967 cv
664.675 329.556 659.476 324.358 653.065 324.358 cv
646.653 324.358 641.456 329.556 641.456 335.967 cv
cp
f
705.226 335.967 mo
705.226 342.379 705.226 364.195 705.226 364.195 cv
705.226 364.195 682.009 355.641 682.009 335.967 cv
682.009 329.556 687.206 324.358 693.616 324.358 cv
700.028 324.358 705.226 329.556 705.226 335.967 cv
cp
f
705.226 335.967 mo
705.226 342.379 705.226 364.195 705.226 364.195 cv
705.226 364.195 728.444 355.641 728.444 335.967 cv
728.444 329.556 723.245 324.358 716.835 324.358 cv
710.423 324.358 705.226 329.556 705.226 335.967 cv
cp
f
38.0161 378.525 mo
38.0161 384.938 38.0161 406.754 38.0161 406.754 cv
38.0161 406.754 14.7983 398.199 14.7983 378.525 cv
14.7983 372.115 19.9961 366.917 26.4072 366.917 cv
32.8184 366.917 38.0161 372.115 38.0161 378.525 cv
cp
f
38.0161 378.525 mo
38.0161 384.938 38.0161 406.754 38.0161 406.754 cv
38.0161 406.754 61.2339 398.199 61.2339 378.525 cv
61.2339 372.115 56.0361 366.917 49.625 366.917 cv
43.2139 366.917 38.0161 372.115 38.0161 378.525 cv
cp
f
101.786 378.525 mo
101.786 384.938 101.786 406.754 101.786 406.754 cv
101.786 406.754 78.5684 398.199 78.5684 378.525 cv
78.5684 372.115 83.7661 366.917 90.1772 366.917 cv
96.5884 366.917 101.786 372.115 101.786 378.525 cv
cp
f
101.786 378.525 mo
101.786 384.938 101.786 406.754 101.786 406.754 cv
101.786 406.754 125.004 398.199 125.004 378.525 cv
125.004 372.115 119.806 366.917 113.395 366.917 cv
106.984 366.917 101.786 372.115 101.786 378.525 cv
cp
f
165.556 378.525 mo
165.556 384.938 165.556 406.754 165.556 406.754 cv
165.556 406.754 142.338 398.199 142.338 378.525 cv
142.338 372.115 147.536 366.917 153.947 366.917 cv
160.358 366.917 165.556 372.115 165.556 378.525 cv
cp
f
165.556 378.525 mo
165.556 384.938 165.556 406.754 165.556 406.754 cv
165.556 406.754 188.773 398.199 188.773 378.525 cv
188.773 372.115 183.576 366.917 177.165 366.917 cv
170.753 366.917 165.556 372.115 165.556 378.525 cv
cp
f
229.326 378.525 mo
229.326 384.938 229.326 406.754 229.326 406.754 cv
229.326 406.754 206.108 398.199 206.108 378.525 cv
206.108 372.115 211.306 366.917 217.717 366.917 cv
224.128 366.917 229.326 372.115 229.326 378.525 cv
cp
f
229.326 378.525 mo
229.326 384.938 229.326 406.754 229.326 406.754 cv
229.326 406.754 252.543 398.199 252.543 378.525 cv
252.543 372.115 247.346 366.917 240.935 366.917 cv
234.523 366.917 229.326 372.115 229.326 378.525 cv
cp
f
293.095 378.525 mo
293.095 384.938 293.095 406.754 293.095 406.754 cv
293.095 406.754 269.877 398.199 269.877 378.525 cv
269.877 372.115 275.076 366.917 281.487 366.917 cv
287.898 366.917 293.095 372.115 293.095 378.525 cv
cp
f
293.095 378.525 mo
293.095 384.938 293.095 406.754 293.095 406.754 cv
293.095 406.754 316.313 398.199 316.313 378.525 cv
316.313 372.115 311.116 366.917 304.705 366.917 cv
298.293 366.917 293.095 372.115 293.095 378.525 cv
cp
f
356.865 378.525 mo
356.865 384.938 356.865 406.754 356.865 406.754 cv
356.865 406.754 333.647 398.199 333.647 378.525 cv
333.647 372.115 338.845 366.917 345.256 366.917 cv
351.667 366.917 356.865 372.115 356.865 378.525 cv
cp
f
356.865 378.525 mo
356.865 384.938 356.865 406.754 356.865 406.754 cv
356.865 406.754 380.083 398.199 380.083 378.525 cv
380.083 372.115 374.885 366.917 368.474 366.917 cv
362.063 366.917 356.865 372.115 356.865 378.525 cv
cp
f
420.634 378.525 mo
420.634 384.938 420.634 406.754 420.634 406.754 cv
420.634 406.754 397.417 398.199 397.417 378.525 cv
397.417 372.115 402.614 366.917 409.026 366.917 cv
415.436 366.917 420.634 372.115 420.634 378.525 cv
cp
f
420.634 378.525 mo
420.634 384.938 420.634 406.754 420.634 406.754 cv
420.634 406.754 443.852 398.199 443.852 378.525 cv
443.852 372.115 438.655 366.917 432.243 366.917 cv
425.833 366.917 420.634 372.115 420.634 378.525 cv
cp
f
484.405 378.525 mo
484.405 384.938 484.405 406.754 484.405 406.754 cv
484.405 406.754 461.188 398.199 461.188 378.525 cv
461.188 372.115 466.386 366.917 472.796 366.917 cv
479.208 366.917 484.405 372.115 484.405 378.525 cv
cp
f
484.405 378.525 mo
484.405 384.938 484.405 406.754 484.405 406.754 cv
484.405 406.754 507.624 398.199 507.624 378.525 cv
507.624 372.115 502.425 366.917 496.015 366.917 cv
489.602 366.917 484.405 372.115 484.405 378.525 cv
cp
f
548.175 378.525 mo
548.175 384.938 548.175 406.754 548.175 406.754 cv
548.175 406.754 524.958 398.199 524.958 378.525 cv
524.958 372.115 530.155 366.917 536.565 366.917 cv
542.977 366.917 548.175 372.115 548.175 378.525 cv
cp
f
548.175 378.525 mo
548.175 384.938 548.175 406.754 548.175 406.754 cv
548.175 406.754 571.394 398.199 571.394 378.525 cv
571.394 372.115 566.194 366.917 559.784 366.917 cv
553.372 366.917 548.175 372.115 548.175 378.525 cv
cp
f
611.944 378.525 mo
611.944 384.938 611.944 406.754 611.944 406.754 cv
611.944 406.754 588.727 398.199 588.727 378.525 cv
588.727 372.115 593.925 366.917 600.335 366.917 cv
606.747 366.917 611.944 372.115 611.944 378.525 cv
cp
f
611.944 378.525 mo
611.944 384.938 611.944 406.754 611.944 406.754 cv
611.944 406.754 635.163 398.199 635.163 378.525 cv
635.163 372.115 629.964 366.917 623.554 366.917 cv
617.142 366.917 611.944 372.115 611.944 378.525 cv
cp
f
675.716 378.525 mo
675.716 384.938 675.716 406.754 675.716 406.754 cv
675.716 406.754 652.499 398.199 652.499 378.525 cv
652.499 372.115 657.696 366.917 664.106 366.917 cv
670.519 366.917 675.716 372.115 675.716 378.525 cv
cp
f
675.716 378.525 mo
675.716 384.938 675.716 406.754 675.716 406.754 cv
675.716 406.754 698.935 398.199 698.935 378.525 cv
698.935 372.115 693.735 366.917 687.325 366.917 cv
680.913 366.917 675.716 372.115 675.716 378.525 cv
cp
f
739.485 378.525 mo
739.485 384.938 739.485 406.754 739.485 406.754 cv
739.485 406.754 716.269 398.199 716.269 378.525 cv
716.269 372.115 721.466 366.917 727.876 366.917 cv
734.288 366.917 739.485 372.115 739.485 378.525 cv
cp
f
739.485 378.525 mo
739.485 384.938 739.485 406.754 739.485 406.754 cv
739.485 406.754 762.704 398.199 762.704 378.525 cv
762.704 372.115 757.505 366.917 751.095 366.917 cv
744.683 366.917 739.485 372.115 739.485 378.525 cv
cp
f
3.75732 425.963 mo
3.75732 432.375 3.75732 454.191 3.75732 454.191 cv
3.75732 454.191 -19.4604 445.637 -19.4604 425.963 cv
-19.4604 419.551 -14.2627 414.354 -7.85156 414.354 cv
-1.44043 414.354 3.75732 419.551 3.75732 425.963 cv
cp
f
3.75732 425.963 mo
3.75732 432.375 3.75732 454.191 3.75732 454.191 cv
3.75732 454.191 26.9751 445.637 26.9751 425.963 cv
26.9751 419.551 21.7773 414.354 15.3662 414.354 cv
8.95508 414.354 3.75732 419.551 3.75732 425.963 cv
cp
f
67.5273 425.963 mo
67.5273 432.375 67.5273 454.191 67.5273 454.191 cv
67.5273 454.191 44.3096 445.637 44.3096 425.963 cv
44.3096 419.551 49.5073 414.354 55.9185 414.354 cv
62.3296 414.354 67.5273 419.551 67.5273 425.963 cv
cp
f
67.5273 425.963 mo
67.5273 432.375 67.5273 454.191 67.5273 454.191 cv
67.5273 454.191 90.7451 445.637 90.7451 425.963 cv
90.7451 419.551 85.5474 414.354 79.1362 414.354 cv
72.7251 414.354 67.5273 419.551 67.5273 425.963 cv
cp
f
131.297 425.963 mo
131.297 432.375 131.297 454.191 131.297 454.191 cv
131.297 454.191 108.079 445.637 108.079 425.963 cv
108.079 419.551 113.277 414.354 119.688 414.354 cv
126.099 414.354 131.297 419.551 131.297 425.963 cv
cp
f
131.297 425.963 mo
131.297 432.375 131.297 454.191 131.297 454.191 cv
131.297 454.191 154.515 445.637 154.515 425.963 cv
154.515 419.551 149.317 414.354 142.906 414.354 cv
136.495 414.354 131.297 419.551 131.297 425.963 cv
cp
f
195.067 425.963 mo
195.067 432.375 195.067 454.191 195.067 454.191 cv
195.067 454.191 171.849 445.637 171.849 425.963 cv
171.849 419.551 177.047 414.354 183.458 414.354 cv
189.869 414.354 195.067 419.551 195.067 425.963 cv
cp
f
195.067 425.963 mo
195.067 432.375 195.067 454.191 195.067 454.191 cv
195.067 454.191 218.285 445.637 218.285 425.963 cv
218.285 419.551 213.087 414.354 206.676 414.354 cv
200.265 414.354 195.067 419.551 195.067 425.963 cv
cp
f
258.836 425.963 mo
258.836 432.375 258.836 454.191 258.836 454.191 cv
258.836 454.191 235.619 445.637 235.619 425.963 cv
235.619 419.551 240.817 414.354 247.228 414.354 cv
253.639 414.354 258.836 419.551 258.836 425.963 cv
cp
f
258.836 425.963 mo
258.836 432.375 258.836 454.191 258.836 454.191 cv
258.836 454.191 282.054 445.637 282.054 425.963 cv
282.054 419.551 276.857 414.354 270.446 414.354 cv
264.035 414.354 258.836 419.551 258.836 425.963 cv
cp
f
322.606 425.963 mo
322.606 432.375 322.606 454.191 322.606 454.191 cv
322.606 454.191 299.389 445.637 299.389 425.963 cv
299.389 419.551 304.586 414.354 310.998 414.354 cv
317.409 414.354 322.606 419.551 322.606 425.963 cv
cp
f
322.606 425.963 mo
322.606 432.375 322.606 454.191 322.606 454.191 cv
322.606 454.191 345.824 445.637 345.824 425.963 cv
345.824 419.551 340.626 414.354 334.215 414.354 cv
327.804 414.354 322.606 419.551 322.606 425.963 cv
cp
f
386.375 425.963 mo
386.375 432.375 386.375 454.191 386.375 454.191 cv
386.375 454.191 363.159 445.637 363.159 425.963 cv
363.159 419.551 368.356 414.354 374.767 414.354 cv
381.178 414.354 386.375 419.551 386.375 425.963 cv
cp
f
386.375 425.963 mo
386.375 432.375 386.375 454.191 386.375 454.191 cv
386.375 454.191 409.595 445.637 409.595 425.963 cv
409.595 419.551 404.395 414.354 397.985 414.354 cv
391.574 414.354 386.375 419.551 386.375 425.963 cv
cp
f
450.145 425.963 mo
450.145 432.375 450.145 454.191 450.145 454.191 cv
450.145 454.191 426.929 445.637 426.929 425.963 cv
426.929 419.551 432.126 414.354 438.538 414.354 cv
444.948 414.354 450.145 419.551 450.145 425.963 cv
cp
f
450.145 425.963 mo
450.145 432.375 450.145 454.191 450.145 454.191 cv
450.145 454.191 473.364 445.637 473.364 425.963 cv
473.364 419.551 468.167 414.354 461.755 414.354 cv
455.345 414.354 450.145 419.551 450.145 425.963 cv
cp
f
513.915 425.963 mo
513.915 432.375 513.915 454.191 513.915 454.191 cv
513.915 454.191 490.698 445.637 490.698 425.963 cv
490.698 419.551 495.895 414.354 502.306 414.354 cv
508.718 414.354 513.915 419.551 513.915 425.963 cv
cp
f
513.915 425.963 mo
513.915 432.375 513.915 454.191 513.915 454.191 cv
513.915 454.191 537.134 445.637 537.134 425.963 cv
537.134 419.551 531.935 414.354 525.524 414.354 cv
519.112 414.354 513.915 419.551 513.915 425.963 cv
cp
f
577.686 425.963 mo
577.686 432.375 577.686 454.191 577.686 454.191 cv
577.686 454.191 554.47 445.637 554.47 425.963 cv
554.47 419.551 559.667 414.354 566.077 414.354 cv
572.489 414.354 577.686 419.551 577.686 425.963 cv
cp
f
577.686 425.963 mo
577.686 432.375 577.686 454.191 577.686 454.191 cv
577.686 454.191 600.905 445.637 600.905 425.963 cv
600.905 419.551 595.706 414.354 589.296 414.354 cv
582.884 414.354 577.686 419.551 577.686 425.963 cv
cp
f
641.456 425.963 mo
641.456 432.375 641.456 454.191 641.456 454.191 cv
641.456 454.191 618.239 445.637 618.239 425.963 cv
618.239 419.551 623.436 414.354 629.847 414.354 cv
636.259 414.354 641.456 419.551 641.456 425.963 cv
cp
f
641.456 425.963 mo
641.456 432.375 641.456 454.191 641.456 454.191 cv
641.456 454.191 664.675 445.637 664.675 425.963 cv
664.675 419.551 659.476 414.354 653.065 414.354 cv
646.653 414.354 641.456 419.551 641.456 425.963 cv
cp
f
705.226 425.963 mo
705.226 432.375 705.226 454.191 705.226 454.191 cv
705.226 454.191 682.009 445.637 682.009 425.963 cv
682.009 419.551 687.206 414.354 693.616 414.354 cv
700.028 414.354 705.226 419.551 705.226 425.963 cv
cp
f
705.226 425.963 mo
705.226 432.375 705.226 454.191 705.226 454.191 cv
705.226 454.191 728.444 445.637 728.444 425.963 cv
728.444 419.551 723.245 414.354 716.835 414.354 cv
710.423 414.354 705.226 419.551 705.226 425.963 cv
cp
f
38.0161 468.522 mo
38.0161 474.934 38.0161 496.75 38.0161 496.75 cv
38.0161 496.75 14.7983 488.195 14.7983 468.522 cv
14.7983 462.111 19.9961 456.912 26.4072 456.912 cv
32.8184 456.912 38.0161 462.111 38.0161 468.522 cv
cp
f
38.0161 468.522 mo
38.0161 474.934 38.0161 496.75 38.0161 496.75 cv
38.0161 496.75 61.2339 488.195 61.2339 468.522 cv
61.2339 462.111 56.0361 456.912 49.625 456.912 cv
43.2139 456.912 38.0161 462.111 38.0161 468.522 cv
cp
f
101.786 468.522 mo
101.786 474.934 101.786 496.75 101.786 496.75 cv
101.786 496.75 78.5684 488.195 78.5684 468.522 cv
78.5684 462.111 83.7661 456.912 90.1772 456.912 cv
96.5884 456.912 101.786 462.111 101.786 468.522 cv
cp
f
101.786 468.522 mo
101.786 474.934 101.786 496.75 101.786 496.75 cv
101.786 496.75 125.004 488.195 125.004 468.522 cv
125.004 462.111 119.806 456.912 113.395 456.912 cv
106.984 456.912 101.786 462.111 101.786 468.522 cv
cp
f
165.556 468.522 mo
165.556 474.934 165.556 496.75 165.556 496.75 cv
165.556 496.75 142.338 488.195 142.338 468.522 cv
142.338 462.111 147.536 456.912 153.947 456.912 cv
160.358 456.912 165.556 462.111 165.556 468.522 cv
cp
f
165.556 468.522 mo
165.556 474.934 165.556 496.75 165.556 496.75 cv
165.556 496.75 188.773 488.195 188.773 468.522 cv
188.773 462.111 183.576 456.912 177.165 456.912 cv
170.753 456.912 165.556 462.111 165.556 468.522 cv
cp
f
229.326 468.522 mo
229.326 474.934 229.326 496.75 229.326 496.75 cv
229.326 496.75 206.108 488.195 206.108 468.522 cv
206.108 462.111 211.306 456.912 217.717 456.912 cv
224.128 456.912 229.326 462.111 229.326 468.522 cv
cp
f
229.326 468.522 mo
229.326 474.934 229.326 496.75 229.326 496.75 cv
229.326 496.75 252.543 488.195 252.543 468.522 cv
252.543 462.111 247.346 456.912 240.935 456.912 cv
234.523 456.912 229.326 462.111 229.326 468.522 cv
cp
f
293.095 468.522 mo
293.095 474.934 293.095 496.75 293.095 496.75 cv
293.095 496.75 269.877 488.195 269.877 468.522 cv
269.877 462.111 275.076 456.912 281.487 456.912 cv
287.898 456.912 293.095 462.111 293.095 468.522 cv
cp
f
293.095 468.522 mo
293.095 474.934 293.095 496.75 293.095 496.75 cv
293.095 496.75 316.313 488.195 316.313 468.522 cv
316.313 462.111 311.116 456.912 304.705 456.912 cv
298.293 456.912 293.095 462.111 293.095 468.522 cv
cp
f
356.865 468.522 mo
356.865 474.934 356.865 496.75 356.865 496.75 cv
356.865 496.75 333.647 488.195 333.647 468.522 cv
333.647 462.111 338.845 456.912 345.256 456.912 cv
351.667 456.912 356.865 462.111 356.865 468.522 cv
cp
f
356.865 468.522 mo
356.865 474.934 356.865 496.75 356.865 496.75 cv
356.865 496.75 380.083 488.195 380.083 468.522 cv
380.083 462.111 374.885 456.912 368.474 456.912 cv
362.063 456.912 356.865 462.111 356.865 468.522 cv
cp
f
420.634 468.522 mo
420.634 474.934 420.634 496.75 420.634 496.75 cv
420.634 496.75 397.417 488.195 397.417 468.522 cv
397.417 462.111 402.614 456.912 409.026 456.912 cv
415.436 456.912 420.634 462.111 420.634 468.522 cv
cp
f
420.634 468.522 mo
420.634 474.934 420.634 496.75 420.634 496.75 cv
420.634 496.75 443.852 488.195 443.852 468.522 cv
443.852 462.111 438.655 456.912 432.243 456.912 cv
425.833 456.912 420.634 462.111 420.634 468.522 cv
cp
f
484.405 468.522 mo
484.405 474.934 484.405 496.75 484.405 496.75 cv
484.405 496.75 461.188 488.195 461.188 468.522 cv
461.188 462.111 466.386 456.912 472.796 456.912 cv
479.208 456.912 484.405 462.111 484.405 468.522 cv
cp
f
484.405 468.522 mo
484.405 474.934 484.405 496.75 484.405 496.75 cv
484.405 496.75 507.624 488.195 507.624 468.522 cv
507.624 462.111 502.425 456.912 496.015 456.912 cv
489.602 456.912 484.405 462.111 484.405 468.522 cv
cp
f
548.175 468.522 mo
548.175 474.934 548.175 496.75 548.175 496.75 cv
548.175 496.75 524.958 488.195 524.958 468.522 cv
524.958 462.111 530.155 456.912 536.565 456.912 cv
542.977 456.912 548.175 462.111 548.175 468.522 cv
cp
f
548.175 468.522 mo
548.175 474.934 548.175 496.75 548.175 496.75 cv
548.175 496.75 571.394 488.195 571.394 468.522 cv
571.394 462.111 566.194 456.912 559.784 456.912 cv
553.372 456.912 548.175 462.111 548.175 468.522 cv
cp
f
611.944 468.522 mo
611.944 474.934 611.944 496.75 611.944 496.75 cv
611.944 496.75 588.727 488.195 588.727 468.522 cv
588.727 462.111 593.925 456.912 600.335 456.912 cv
606.747 456.912 611.944 462.111 611.944 468.522 cv
cp
f
611.944 468.522 mo
611.944 474.934 611.944 496.75 611.944 496.75 cv
611.944 496.75 635.163 488.195 635.163 468.522 cv
635.163 462.111 629.964 456.912 623.554 456.912 cv
617.142 456.912 611.944 462.111 611.944 468.522 cv
cp
f
675.716 468.522 mo
675.716 474.934 675.716 496.75 675.716 496.75 cv
675.716 496.75 652.499 488.195 652.499 468.522 cv
652.499 462.111 657.696 456.912 664.106 456.912 cv
670.519 456.912 675.716 462.111 675.716 468.522 cv
cp
f
675.716 468.522 mo
675.716 474.934 675.716 496.75 675.716 496.75 cv
675.716 496.75 698.935 488.195 698.935 468.522 cv
698.935 462.111 693.735 456.912 687.325 456.912 cv
680.913 456.912 675.716 462.111 675.716 468.522 cv
cp
f
739.485 468.522 mo
739.485 474.934 739.485 496.75 739.485 496.75 cv
739.485 496.75 716.269 488.195 716.269 468.522 cv
716.269 462.111 721.466 456.912 727.876 456.912 cv
734.288 456.912 739.485 462.111 739.485 468.522 cv
cp
f
739.485 468.522 mo
739.485 474.934 739.485 496.75 739.485 496.75 cv
739.485 496.75 762.704 488.195 762.704 468.522 cv
762.704 462.111 757.505 456.912 751.095 456.912 cv
744.683 456.912 739.485 462.111 739.485 468.522 cv
cp
f
3.75732 515.959 mo
3.75732 522.371 3.75732 544.188 3.75732 544.188 cv
3.75732 544.188 -19.4604 535.633 -19.4604 515.959 cv
-19.4604 509.547 -14.2627 504.35 -7.85156 504.35 cv
-1.44043 504.35 3.75732 509.547 3.75732 515.959 cv
cp
f
3.75732 515.959 mo
3.75732 522.371 3.75732 544.188 3.75732 544.188 cv
3.75732 544.188 26.9751 535.633 26.9751 515.959 cv
26.9751 509.547 21.7773 504.35 15.3662 504.35 cv
8.95508 504.35 3.75732 509.547 3.75732 515.959 cv
cp
f
67.5273 515.959 mo
67.5273 522.371 67.5273 544.188 67.5273 544.188 cv
67.5273 544.188 44.3096 535.633 44.3096 515.959 cv
44.3096 509.547 49.5073 504.35 55.9185 504.35 cv
62.3296 504.35 67.5273 509.547 67.5273 515.959 cv
cp
f
67.5273 515.959 mo
67.5273 522.371 67.5273 544.188 67.5273 544.188 cv
67.5273 544.188 90.7451 535.633 90.7451 515.959 cv
90.7451 509.547 85.5474 504.35 79.1362 504.35 cv
72.7251 504.35 67.5273 509.547 67.5273 515.959 cv
cp
f
131.297 515.959 mo
131.297 522.371 131.297 544.188 131.297 544.188 cv
131.297 544.188 108.079 535.633 108.079 515.959 cv
108.079 509.547 113.277 504.35 119.688 504.35 cv
126.099 504.35 131.297 509.547 131.297 515.959 cv
cp
f
131.297 515.959 mo
131.297 522.371 131.297 544.188 131.297 544.188 cv
131.297 544.188 154.515 535.633 154.515 515.959 cv
154.515 509.547 149.317 504.35 142.906 504.35 cv
136.495 504.35 131.297 509.547 131.297 515.959 cv
cp
f
195.067 515.959 mo
195.067 522.371 195.067 544.188 195.067 544.188 cv
195.067 544.188 171.849 535.633 171.849 515.959 cv
171.849 509.547 177.047 504.35 183.458 504.35 cv
189.869 504.35 195.067 509.547 195.067 515.959 cv
cp
f
195.067 515.959 mo
195.067 522.371 195.067 544.188 195.067 544.188 cv
195.067 544.188 218.285 535.633 218.285 515.959 cv
218.285 509.547 213.087 504.35 206.676 504.35 cv
200.265 504.35 195.067 509.547 195.067 515.959 cv
cp
f
258.836 515.959 mo
258.836 522.371 258.836 544.188 258.836 544.188 cv
258.836 544.188 235.619 535.633 235.619 515.959 cv
235.619 509.547 240.817 504.35 247.228 504.35 cv
253.639 504.35 258.836 509.547 258.836 515.959 cv
cp
f
258.836 515.959 mo
258.836 522.371 258.836 544.188 258.836 544.188 cv
258.836 544.188 282.054 535.633 282.054 515.959 cv
282.054 509.547 276.857 504.35 270.446 504.35 cv
264.035 504.35 258.836 509.547 258.836 515.959 cv
cp
f
322.606 515.959 mo
322.606 522.371 322.606 544.188 322.606 544.188 cv
322.606 544.188 299.389 535.633 299.389 515.959 cv
299.389 509.547 304.586 504.35 310.998 504.35 cv
317.409 504.35 322.606 509.547 322.606 515.959 cv
cp
f
322.606 515.959 mo
322.606 522.371 322.606 544.188 322.606 544.188 cv
322.606 544.188 345.824 535.633 345.824 515.959 cv
345.824 509.547 340.626 504.35 334.215 504.35 cv
327.804 504.35 322.606 509.547 322.606 515.959 cv
cp
f
386.375 515.959 mo
386.375 522.371 386.375 544.188 386.375 544.188 cv
386.375 544.188 363.159 535.633 363.159 515.959 cv
363.159 509.547 368.356 504.35 374.767 504.35 cv
381.178 504.35 386.375 509.547 386.375 515.959 cv
cp
f
386.375 515.959 mo
386.375 522.371 386.375 544.188 386.375 544.188 cv
386.375 544.188 409.595 535.633 409.595 515.959 cv
409.595 509.547 404.395 504.35 397.985 504.35 cv
391.574 504.35 386.375 509.547 386.375 515.959 cv
cp
f
450.145 515.959 mo
450.145 522.371 450.145 544.188 450.145 544.188 cv
450.145 544.188 426.929 535.633 426.929 515.959 cv
426.929 509.547 432.126 504.35 438.538 504.35 cv
444.948 504.35 450.145 509.547 450.145 515.959 cv
cp
f
450.145 515.959 mo
450.145 522.371 450.145 544.188 450.145 544.188 cv
450.145 544.188 473.364 535.633 473.364 515.959 cv
473.364 509.547 468.167 504.35 461.755 504.35 cv
455.345 504.35 450.145 509.547 450.145 515.959 cv
cp
f
513.915 515.959 mo
513.915 522.371 513.915 544.188 513.915 544.188 cv
513.915 544.188 490.698 535.633 490.698 515.959 cv
490.698 509.547 495.895 504.35 502.306 504.35 cv
508.718 504.35 513.915 509.547 513.915 515.959 cv
cp
f
513.915 515.959 mo
513.915 522.371 513.915 544.188 513.915 544.188 cv
513.915 544.188 537.134 535.633 537.134 515.959 cv
537.134 509.547 531.935 504.35 525.524 504.35 cv
519.112 504.35 513.915 509.547 513.915 515.959 cv
cp
f
577.686 515.959 mo
577.686 522.371 577.686 544.188 577.686 544.188 cv
577.686 544.188 554.47 535.633 554.47 515.959 cv
554.47 509.547 559.667 504.35 566.077 504.35 cv
572.489 504.35 577.686 509.547 577.686 515.959 cv
cp
f
577.686 515.959 mo
577.686 522.371 577.686 544.188 577.686 544.188 cv
577.686 544.188 600.905 535.633 600.905 515.959 cv
600.905 509.547 595.706 504.35 589.296 504.35 cv
582.884 504.35 577.686 509.547 577.686 515.959 cv
cp
f
641.456 515.959 mo
641.456 522.371 641.456 544.188 641.456 544.188 cv
641.456 544.188 618.239 535.633 618.239 515.959 cv
618.239 509.547 623.436 504.35 629.847 504.35 cv
636.259 504.35 641.456 509.547 641.456 515.959 cv
cp
f
641.456 515.959 mo
641.456 522.371 641.456 544.188 641.456 544.188 cv
641.456 544.188 664.675 535.633 664.675 515.959 cv
664.675 509.547 659.476 504.35 653.065 504.35 cv
646.653 504.35 641.456 509.547 641.456 515.959 cv
cp
f
705.226 515.959 mo
705.226 522.371 705.226 544.188 705.226 544.188 cv
705.226 544.188 682.009 535.633 682.009 515.959 cv
682.009 509.547 687.206 504.35 693.616 504.35 cv
700.028 504.35 705.226 509.547 705.226 515.959 cv
cp
f
705.226 515.959 mo
705.226 522.371 705.226 544.188 705.226 544.188 cv
705.226 544.188 728.444 535.633 728.444 515.959 cv
728.444 509.547 723.245 504.35 716.835 504.35 cv
710.423 504.35 705.226 509.547 705.226 515.959 cv
cp
f
38.0161 558.518 mo
38.0161 564.93 38.0161 586.746 38.0161 586.746 cv
38.0161 586.746 14.7983 578.191 14.7983 558.518 cv
14.7983 552.107 19.9961 546.908 26.4072 546.908 cv
32.8184 546.908 38.0161 552.107 38.0161 558.518 cv
cp
f
38.0161 558.518 mo
38.0161 564.93 38.0161 586.746 38.0161 586.746 cv
38.0161 586.746 61.2339 578.191 61.2339 558.518 cv
61.2339 552.107 56.0361 546.908 49.625 546.908 cv
43.2139 546.908 38.0161 552.107 38.0161 558.518 cv
cp
f
101.786 558.518 mo
101.786 564.93 101.786 586.746 101.786 586.746 cv
101.786 586.746 78.5684 578.191 78.5684 558.518 cv
78.5684 552.107 83.7661 546.908 90.1772 546.908 cv
96.5884 546.908 101.786 552.107 101.786 558.518 cv
cp
f
101.786 558.518 mo
101.786 564.93 101.786 586.746 101.786 586.746 cv
101.786 586.746 125.004 578.191 125.004 558.518 cv
125.004 552.107 119.806 546.908 113.395 546.908 cv
106.984 546.908 101.786 552.107 101.786 558.518 cv
cp
f
165.556 558.518 mo
165.556 564.93 165.556 586.746 165.556 586.746 cv
165.556 586.746 142.338 578.191 142.338 558.518 cv
142.338 552.107 147.536 546.908 153.947 546.908 cv
160.358 546.908 165.556 552.107 165.556 558.518 cv
cp
f
165.556 558.518 mo
165.556 564.93 165.556 586.746 165.556 586.746 cv
165.556 586.746 188.773 578.191 188.773 558.518 cv
188.773 552.107 183.576 546.908 177.165 546.908 cv
170.753 546.908 165.556 552.107 165.556 558.518 cv
cp
f
229.326 558.518 mo
229.326 564.93 229.326 586.746 229.326 586.746 cv
229.326 586.746 206.108 578.191 206.108 558.518 cv
206.108 552.107 211.306 546.908 217.717 546.908 cv
224.128 546.908 229.326 552.107 229.326 558.518 cv
cp
f
229.326 558.518 mo
229.326 564.93 229.326 586.746 229.326 586.746 cv
229.326 586.746 252.543 578.191 252.543 558.518 cv
252.543 552.107 247.346 546.908 240.935 546.908 cv
234.523 546.908 229.326 552.107 229.326 558.518 cv
cp
f
293.095 558.518 mo
293.095 564.93 293.095 586.746 293.095 586.746 cv
293.095 586.746 269.877 578.191 269.877 558.518 cv
269.877 552.107 275.076 546.908 281.487 546.908 cv
287.898 546.908 293.095 552.107 293.095 558.518 cv
cp
f
293.095 558.518 mo
293.095 564.93 293.095 586.746 293.095 586.746 cv
293.095 586.746 316.313 578.191 316.313 558.518 cv
316.313 552.107 311.116 546.908 304.705 546.908 cv
298.293 546.908 293.095 552.107 293.095 558.518 cv
cp
f
356.865 558.518 mo
356.865 564.93 356.865 586.746 356.865 586.746 cv
356.865 586.746 333.647 578.191 333.647 558.518 cv
333.647 552.107 338.845 546.908 345.256 546.908 cv
351.667 546.908 356.865 552.107 356.865 558.518 cv
cp
f
356.865 558.518 mo
356.865 564.93 356.865 586.746 356.865 586.746 cv
356.865 586.746 380.083 578.191 380.083 558.518 cv
380.083 552.107 374.885 546.908 368.474 546.908 cv
362.063 546.908 356.865 552.107 356.865 558.518 cv
cp
f
420.634 558.518 mo
420.634 564.93 420.634 586.746 420.634 586.746 cv
420.634 586.746 397.417 578.191 397.417 558.518 cv
397.417 552.107 402.614 546.908 409.026 546.908 cv
415.436 546.908 420.634 552.107 420.634 558.518 cv
cp
f
420.634 558.518 mo
420.634 564.93 420.634 586.746 420.634 586.746 cv
420.634 586.746 443.852 578.191 443.852 558.518 cv
443.852 552.107 438.655 546.908 432.243 546.908 cv
425.833 546.908 420.634 552.107 420.634 558.518 cv
cp
f
484.405 558.518 mo
484.405 564.93 484.405 586.746 484.405 586.746 cv
484.405 586.746 461.188 578.191 461.188 558.518 cv
461.188 552.107 466.386 546.908 472.796 546.908 cv
479.208 546.908 484.405 552.107 484.405 558.518 cv
cp
f
484.405 558.518 mo
484.405 564.93 484.405 586.746 484.405 586.746 cv
484.405 586.746 507.624 578.191 507.624 558.518 cv
507.624 552.107 502.425 546.908 496.015 546.908 cv
489.602 546.908 484.405 552.107 484.405 558.518 cv
cp
f
548.175 558.518 mo
548.175 564.93 548.175 586.746 548.175 586.746 cv
548.175 586.746 524.958 578.191 524.958 558.518 cv
524.958 552.107 530.155 546.908 536.565 546.908 cv
542.977 546.908 548.175 552.107 548.175 558.518 cv
cp
f
548.175 558.518 mo
548.175 564.93 548.175 586.746 548.175 586.746 cv
548.175 586.746 571.394 578.191 571.394 558.518 cv
571.394 552.107 566.194 546.908 559.784 546.908 cv
553.372 546.908 548.175 552.107 548.175 558.518 cv
cp
f
611.944 558.518 mo
611.944 564.93 611.944 586.746 611.944 586.746 cv
611.944 586.746 588.727 578.191 588.727 558.518 cv
588.727 552.107 593.925 546.908 600.335 546.908 cv
606.747 546.908 611.944 552.107 611.944 558.518 cv
cp
f
611.944 558.518 mo
611.944 564.93 611.944 586.746 611.944 586.746 cv
611.944 586.746 635.163 578.191 635.163 558.518 cv
635.163 552.107 629.964 546.908 623.554 546.908 cv
617.142 546.908 611.944 552.107 611.944 558.518 cv
cp
f
675.716 558.518 mo
675.716 564.93 675.716 586.746 675.716 586.746 cv
675.716 586.746 652.499 578.191 652.499 558.518 cv
652.499 552.107 657.696 546.908 664.106 546.908 cv
670.519 546.908 675.716 552.107 675.716 558.518 cv
cp
f
675.716 558.518 mo
675.716 564.93 675.716 586.746 675.716 586.746 cv
675.716 586.746 698.935 578.191 698.935 558.518 cv
698.935 552.107 693.735 546.908 687.325 546.908 cv
680.913 546.908 675.716 552.107 675.716 558.518 cv
cp
f
739.485 558.518 mo
739.485 564.93 739.485 586.746 739.485 586.746 cv
739.485 586.746 716.269 578.191 716.269 558.518 cv
716.269 552.107 721.466 546.908 727.876 546.908 cv
734.288 546.908 739.485 552.107 739.485 558.518 cv
cp
f
739.485 558.518 mo
739.485 564.93 739.485 586.746 739.485 586.746 cv
739.485 586.746 762.704 578.191 762.704 558.518 cv
762.704 552.107 757.505 546.908 751.095 546.908 cv
744.683 546.908 739.485 552.107 739.485 558.518 cv
cp
f
3.75732 605.955 mo
3.75732 612.367 3.75732 634.184 3.75732 634.184 cv
3.75732 634.184 -19.4604 625.629 -19.4604 605.955 cv
-19.4604 599.543 -14.2627 594.346 -7.85156 594.346 cv
-1.44043 594.346 3.75732 599.543 3.75732 605.955 cv
cp
f
3.75732 605.955 mo
3.75732 612.367 3.75732 634.184 3.75732 634.184 cv
3.75732 634.184 26.9751 625.629 26.9751 605.955 cv
26.9751 599.543 21.7773 594.346 15.3662 594.346 cv
8.95508 594.346 3.75732 599.543 3.75732 605.955 cv
cp
f
67.5273 605.955 mo
67.5273 612.367 67.5273 634.184 67.5273 634.184 cv
67.5273 634.184 44.3096 625.629 44.3096 605.955 cv
44.3096 599.543 49.5073 594.346 55.9185 594.346 cv
62.3296 594.346 67.5273 599.543 67.5273 605.955 cv
cp
f
67.5273 605.955 mo
67.5273 612.367 67.5273 634.184 67.5273 634.184 cv
67.5273 634.184 90.7451 625.629 90.7451 605.955 cv
90.7451 599.543 85.5474 594.346 79.1362 594.346 cv
72.7251 594.346 67.5273 599.543 67.5273 605.955 cv
cp
f
131.297 605.955 mo
131.297 612.367 131.297 634.184 131.297 634.184 cv
131.297 634.184 108.079 625.629 108.079 605.955 cv
108.079 599.543 113.277 594.346 119.688 594.346 cv
126.099 594.346 131.297 599.543 131.297 605.955 cv
cp
f
131.297 605.955 mo
131.297 612.367 131.297 634.184 131.297 634.184 cv
131.297 634.184 154.515 625.629 154.515 605.955 cv
154.515 599.543 149.317 594.346 142.906 594.346 cv
136.495 594.346 131.297 599.543 131.297 605.955 cv
cp
f
195.067 605.955 mo
195.067 612.367 195.067 634.184 195.067 634.184 cv
195.067 634.184 171.849 625.629 171.849 605.955 cv
171.849 599.543 177.047 594.346 183.458 594.346 cv
189.869 594.346 195.067 599.543 195.067 605.955 cv
cp
f
195.067 605.955 mo
195.067 612.367 195.067 634.184 195.067 634.184 cv
195.067 634.184 218.285 625.629 218.285 605.955 cv
218.285 599.543 213.087 594.346 206.676 594.346 cv
200.265 594.346 195.067 599.543 195.067 605.955 cv
cp
f
258.836 605.955 mo
258.836 612.367 258.836 634.184 258.836 634.184 cv
258.836 634.184 235.619 625.629 235.619 605.955 cv
235.619 599.543 240.817 594.346 247.228 594.346 cv
253.639 594.346 258.836 599.543 258.836 605.955 cv
cp
f
258.836 605.955 mo
258.836 612.367 258.836 634.184 258.836 634.184 cv
258.836 634.184 282.054 625.629 282.054 605.955 cv
282.054 599.543 276.857 594.346 270.446 594.346 cv
264.035 594.346 258.836 599.543 258.836 605.955 cv
cp
f
322.606 605.955 mo
322.606 612.367 322.606 634.184 322.606 634.184 cv
322.606 634.184 299.389 625.629 299.389 605.955 cv
299.389 599.543 304.586 594.346 310.998 594.346 cv
317.409 594.346 322.606 599.543 322.606 605.955 cv
cp
f
322.606 605.955 mo
322.606 612.367 322.606 634.184 322.606 634.184 cv
322.606 634.184 345.824 625.629 345.824 605.955 cv
345.824 599.543 340.626 594.346 334.215 594.346 cv
327.804 594.346 322.606 599.543 322.606 605.955 cv
cp
f
386.375 605.955 mo
386.375 612.367 386.375 634.184 386.375 634.184 cv
386.375 634.184 363.159 625.629 363.159 605.955 cv
363.159 599.543 368.356 594.346 374.767 594.346 cv
381.178 594.346 386.375 599.543 386.375 605.955 cv
cp
f
386.375 605.955 mo
386.375 612.367 386.375 634.184 386.375 634.184 cv
386.375 634.184 409.595 625.629 409.595 605.955 cv
409.595 599.543 404.395 594.346 397.985 594.346 cv
391.574 594.346 386.375 599.543 386.375 605.955 cv
cp
f
450.145 605.955 mo
450.145 612.367 450.145 634.184 450.145 634.184 cv
450.145 634.184 426.929 625.629 426.929 605.955 cv
426.929 599.543 432.126 594.346 438.538 594.346 cv
444.948 594.346 450.145 599.543 450.145 605.955 cv
cp
f
450.145 605.955 mo
450.145 612.367 450.145 634.184 450.145 634.184 cv
450.145 634.184 473.364 625.629 473.364 605.955 cv
473.364 599.543 468.167 594.346 461.755 594.346 cv
455.345 594.346 450.145 599.543 450.145 605.955 cv
cp
f
513.915 605.955 mo
513.915 612.367 513.915 634.184 513.915 634.184 cv
513.915 634.184 490.698 625.629 490.698 605.955 cv
490.698 599.543 495.895 594.346 502.306 594.346 cv
508.718 594.346 513.915 599.543 513.915 605.955 cv
cp
f
513.915 605.955 mo
513.915 612.367 513.915 634.184 513.915 634.184 cv
513.915 634.184 537.134 625.629 537.134 605.955 cv
537.134 599.543 531.935 594.346 525.524 594.346 cv
519.112 594.346 513.915 599.543 513.915 605.955 cv
cp
f
577.686 605.955 mo
577.686 612.367 577.686 634.184 577.686 634.184 cv
577.686 634.184 554.47 625.629 554.47 605.955 cv
554.47 599.543 559.667 594.346 566.077 594.346 cv
572.489 594.346 577.686 599.543 577.686 605.955 cv
cp
f
577.686 605.955 mo
577.686 612.367 577.686 634.184 577.686 634.184 cv
577.686 634.184 600.905 625.629 600.905 605.955 cv
600.905 599.543 595.706 594.346 589.296 594.346 cv
582.884 594.346 577.686 599.543 577.686 605.955 cv
cp
f
641.456 605.955 mo
641.456 612.367 641.456 634.184 641.456 634.184 cv
641.456 634.184 618.239 625.629 618.239 605.955 cv
618.239 599.543 623.436 594.346 629.847 594.346 cv
636.259 594.346 641.456 599.543 641.456 605.955 cv
cp
f
641.456 605.955 mo
641.456 612.367 641.456 634.184 641.456 634.184 cv
641.456 634.184 664.675 625.629 664.675 605.955 cv
664.675 599.543 659.476 594.346 653.065 594.346 cv
646.653 594.346 641.456 599.543 641.456 605.955 cv
cp
f
705.226 605.955 mo
705.226 612.367 705.226 634.184 705.226 634.184 cv
705.226 634.184 682.009 625.629 682.009 605.955 cv
682.009 599.543 687.206 594.346 693.616 594.346 cv
700.028 594.346 705.226 599.543 705.226 605.955 cv
cp
f
705.226 605.955 mo
705.226 612.367 705.226 634.184 705.226 634.184 cv
705.226 634.184 728.444 625.629 728.444 605.955 cv
728.444 599.543 723.245 594.346 716.835 594.346 cv
710.423 594.346 705.226 599.543 705.226 605.955 cv
cp
f
38.0161 648.514 mo
38.0161 654.926 38.0161 676.742 38.0161 676.742 cv
38.0161 676.742 14.7983 668.188 14.7983 648.514 cv
14.7983 642.104 19.9961 636.904 26.4072 636.904 cv
32.8184 636.904 38.0161 642.104 38.0161 648.514 cv
cp
f
38.0161 648.514 mo
38.0161 654.926 38.0161 676.742 38.0161 676.742 cv
38.0161 676.742 61.2339 668.188 61.2339 648.514 cv
61.2339 642.104 56.0361 636.904 49.625 636.904 cv
43.2139 636.904 38.0161 642.104 38.0161 648.514 cv
cp
f
101.786 648.514 mo
101.786 654.926 101.786 676.742 101.786 676.742 cv
101.786 676.742 78.5684 668.188 78.5684 648.514 cv
78.5684 642.104 83.7661 636.904 90.1772 636.904 cv
96.5884 636.904 101.786 642.104 101.786 648.514 cv
cp
f
101.786 648.514 mo
101.786 654.926 101.786 676.742 101.786 676.742 cv
101.786 676.742 125.004 668.188 125.004 648.514 cv
125.004 642.104 119.806 636.904 113.395 636.904 cv
106.984 636.904 101.786 642.104 101.786 648.514 cv
cp
f
165.556 648.514 mo
165.556 654.926 165.556 676.742 165.556 676.742 cv
165.556 676.742 142.338 668.188 142.338 648.514 cv
142.338 642.104 147.536 636.904 153.947 636.904 cv
160.358 636.904 165.556 642.104 165.556 648.514 cv
cp
f
165.556 648.514 mo
165.556 654.926 165.556 676.742 165.556 676.742 cv
165.556 676.742 188.773 668.188 188.773 648.514 cv
188.773 642.104 183.576 636.904 177.165 636.904 cv
170.753 636.904 165.556 642.104 165.556 648.514 cv
cp
f
229.326 648.514 mo
229.326 654.926 229.326 676.742 229.326 676.742 cv
229.326 676.742 206.108 668.188 206.108 648.514 cv
206.108 642.104 211.306 636.904 217.717 636.904 cv
224.128 636.904 229.326 642.104 229.326 648.514 cv
cp
f
229.326 648.514 mo
229.326 654.926 229.326 676.742 229.326 676.742 cv
229.326 676.742 252.543 668.188 252.543 648.514 cv
252.543 642.104 247.346 636.904 240.935 636.904 cv
234.523 636.904 229.326 642.104 229.326 648.514 cv
cp
f
293.095 648.514 mo
293.095 654.926 293.095 676.742 293.095 676.742 cv
293.095 676.742 269.877 668.188 269.877 648.514 cv
269.877 642.104 275.076 636.904 281.487 636.904 cv
287.898 636.904 293.095 642.104 293.095 648.514 cv
cp
f
293.095 648.514 mo
293.095 654.926 293.095 676.742 293.095 676.742 cv
293.095 676.742 316.313 668.188 316.313 648.514 cv
316.313 642.104 311.116 636.904 304.705 636.904 cv
298.293 636.904 293.095 642.104 293.095 648.514 cv
cp
f
356.865 648.514 mo
356.865 654.926 356.865 676.742 356.865 676.742 cv
356.865 676.742 333.647 668.188 333.647 648.514 cv
333.647 642.104 338.845 636.904 345.256 636.904 cv
351.667 636.904 356.865 642.104 356.865 648.514 cv
cp
f
356.865 648.514 mo
356.865 654.926 356.865 676.742 356.865 676.742 cv
356.865 676.742 380.083 668.188 380.083 648.514 cv
380.083 642.104 374.885 636.904 368.474 636.904 cv
362.063 636.904 356.865 642.104 356.865 648.514 cv
cp
f
420.634 648.514 mo
420.634 654.926 420.634 676.742 420.634 676.742 cv
420.634 676.742 397.417 668.188 397.417 648.514 cv
397.417 642.104 402.614 636.904 409.026 636.904 cv
415.436 636.904 420.634 642.104 420.634 648.514 cv
cp
f
420.634 648.514 mo
420.634 654.926 420.634 676.742 420.634 676.742 cv
420.634 676.742 443.852 668.188 443.852 648.514 cv
443.852 642.104 438.655 636.904 432.243 636.904 cv
425.833 636.904 420.634 642.104 420.634 648.514 cv
cp
f
484.405 648.514 mo
484.405 654.926 484.405 676.742 484.405 676.742 cv
484.405 676.742 461.188 668.188 461.188 648.514 cv
461.188 642.104 466.386 636.904 472.796 636.904 cv
479.208 636.904 484.405 642.104 484.405 648.514 cv
cp
f
484.405 648.514 mo
484.405 654.926 484.405 676.742 484.405 676.742 cv
484.405 676.742 507.624 668.188 507.624 648.514 cv
507.624 642.104 502.425 636.904 496.015 636.904 cv
489.602 636.904 484.405 642.104 484.405 648.514 cv
cp
f
548.175 648.514 mo
548.175 654.926 548.175 676.742 548.175 676.742 cv
548.175 676.742 524.958 668.188 524.958 648.514 cv
524.958 642.104 530.155 636.904 536.565 636.904 cv
542.977 636.904 548.175 642.104 548.175 648.514 cv
cp
f
548.175 648.514 mo
548.175 654.926 548.175 676.742 548.175 676.742 cv
548.175 676.742 571.394 668.188 571.394 648.514 cv
571.394 642.104 566.194 636.904 559.784 636.904 cv
553.372 636.904 548.175 642.104 548.175 648.514 cv
cp
f
611.944 648.514 mo
611.944 654.926 611.944 676.742 611.944 676.742 cv
611.944 676.742 588.727 668.188 588.727 648.514 cv
588.727 642.104 593.925 636.904 600.335 636.904 cv
606.747 636.904 611.944 642.104 611.944 648.514 cv
cp
f
611.944 648.514 mo
611.944 654.926 611.944 676.742 611.944 676.742 cv
611.944 676.742 635.163 668.188 635.163 648.514 cv
635.163 642.104 629.964 636.904 623.554 636.904 cv
617.142 636.904 611.944 642.104 611.944 648.514 cv
cp
f
675.716 648.514 mo
675.716 654.926 675.716 676.742 675.716 676.742 cv
675.716 676.742 652.499 668.188 652.499 648.514 cv
652.499 642.104 657.696 636.904 664.106 636.904 cv
670.519 636.904 675.716 642.104 675.716 648.514 cv
cp
f
675.716 648.514 mo
675.716 654.926 675.716 676.742 675.716 676.742 cv
675.716 676.742 698.935 668.188 698.935 648.514 cv
698.935 642.104 693.735 636.904 687.325 636.904 cv
680.913 636.904 675.716 642.104 675.716 648.514 cv
cp
f
739.485 648.514 mo
739.485 654.926 739.485 676.742 739.485 676.742 cv
739.485 676.742 716.269 668.188 716.269 648.514 cv
716.269 642.104 721.466 636.904 727.876 636.904 cv
734.288 636.904 739.485 642.104 739.485 648.514 cv
cp
f
739.485 648.514 mo
739.485 654.926 739.485 676.742 739.485 676.742 cv
739.485 676.742 762.704 668.188 762.704 648.514 cv
762.704 642.104 757.505 636.904 751.095 636.904 cv
744.683 636.904 739.485 642.104 739.485 648.514 cv
cp
f
3.75732 695.951 mo
3.75732 702.363 3.75732 724.18 3.75732 724.18 cv
3.75732 724.18 -19.4604 715.625 -19.4604 695.951 cv
-19.4604 689.539 -14.2627 684.342 -7.85156 684.342 cv
-1.44043 684.342 3.75732 689.539 3.75732 695.951 cv
cp
f
3.75732 695.951 mo
3.75732 702.363 3.75732 724.18 3.75732 724.18 cv
3.75732 724.18 26.9751 715.625 26.9751 695.951 cv
26.9751 689.539 21.7773 684.342 15.3662 684.342 cv
8.95508 684.342 3.75732 689.539 3.75732 695.951 cv
cp
f
67.5273 695.951 mo
67.5273 702.363 67.5273 724.18 67.5273 724.18 cv
67.5273 724.18 44.3096 715.625 44.3096 695.951 cv
44.3096 689.539 49.5073 684.342 55.9185 684.342 cv
62.3296 684.342 67.5273 689.539 67.5273 695.951 cv
cp
f
67.5273 695.951 mo
67.5273 702.363 67.5273 724.18 67.5273 724.18 cv
67.5273 724.18 90.7451 715.625 90.7451 695.951 cv
90.7451 689.539 85.5474 684.342 79.1362 684.342 cv
72.7251 684.342 67.5273 689.539 67.5273 695.951 cv
cp
f
131.297 695.951 mo
131.297 702.363 131.297 724.18 131.297 724.18 cv
131.297 724.18 108.079 715.625 108.079 695.951 cv
108.079 689.539 113.277 684.342 119.688 684.342 cv
126.099 684.342 131.297 689.539 131.297 695.951 cv
cp
f
131.297 695.951 mo
131.297 702.363 131.297 724.18 131.297 724.18 cv
131.297 724.18 154.515 715.625 154.515 695.951 cv
154.515 689.539 149.317 684.342 142.906 684.342 cv
136.495 684.342 131.297 689.539 131.297 695.951 cv
cp
f
195.067 695.951 mo
195.067 702.363 195.067 724.18 195.067 724.18 cv
195.067 724.18 171.849 715.625 171.849 695.951 cv
171.849 689.539 177.047 684.342 183.458 684.342 cv
189.869 684.342 195.067 689.539 195.067 695.951 cv
cp
f
195.067 695.951 mo
195.067 702.363 195.067 724.18 195.067 724.18 cv
195.067 724.18 218.285 715.625 218.285 695.951 cv
218.285 689.539 213.087 684.342 206.676 684.342 cv
200.265 684.342 195.067 689.539 195.067 695.951 cv
cp
f
258.836 695.951 mo
258.836 702.363 258.836 724.18 258.836 724.18 cv
258.836 724.18 235.619 715.625 235.619 695.951 cv
235.619 689.539 240.817 684.342 247.228 684.342 cv
253.639 684.342 258.836 689.539 258.836 695.951 cv
cp
f
258.836 695.951 mo
258.836 702.363 258.836 724.18 258.836 724.18 cv
258.836 724.18 282.054 715.625 282.054 695.951 cv
282.054 689.539 276.857 684.342 270.446 684.342 cv
264.035 684.342 258.836 689.539 258.836 695.951 cv
cp
f
322.606 695.951 mo
322.606 702.363 322.606 724.18 322.606 724.18 cv
322.606 724.18 299.389 715.625 299.389 695.951 cv
299.389 689.539 304.586 684.342 310.998 684.342 cv
317.409 684.342 322.606 689.539 322.606 695.951 cv
cp
f
322.606 695.951 mo
322.606 702.363 322.606 724.18 322.606 724.18 cv
322.606 724.18 345.824 715.625 345.824 695.951 cv
345.824 689.539 340.626 684.342 334.215 684.342 cv
327.804 684.342 322.606 689.539 322.606 695.951 cv
cp
f
386.375 695.951 mo
386.375 702.363 386.375 724.18 386.375 724.18 cv
386.375 724.18 363.159 715.625 363.159 695.951 cv
363.159 689.539 368.356 684.342 374.767 684.342 cv
381.178 684.342 386.375 689.539 386.375 695.951 cv
cp
f
386.375 695.951 mo
386.375 702.363 386.375 724.18 386.375 724.18 cv
386.375 724.18 409.595 715.625 409.595 695.951 cv
409.595 689.539 404.395 684.342 397.985 684.342 cv
391.574 684.342 386.375 689.539 386.375 695.951 cv
cp
f
450.145 695.951 mo
450.145 702.363 450.145 724.18 450.145 724.18 cv
450.145 724.18 426.929 715.625 426.929 695.951 cv
426.929 689.539 432.126 684.342 438.538 684.342 cv
444.948 684.342 450.145 689.539 450.145 695.951 cv
cp
f
450.145 695.951 mo
450.145 702.363 450.145 724.18 450.145 724.18 cv
450.145 724.18 473.364 715.625 473.364 695.951 cv
473.364 689.539 468.167 684.342 461.755 684.342 cv
455.345 684.342 450.145 689.539 450.145 695.951 cv
cp
f
513.915 695.951 mo
513.915 702.363 513.915 724.18 513.915 724.18 cv
513.915 724.18 490.698 715.625 490.698 695.951 cv
490.698 689.539 495.895 684.342 502.306 684.342 cv
508.718 684.342 513.915 689.539 513.915 695.951 cv
cp
f
513.915 695.951 mo
513.915 702.363 513.915 724.18 513.915 724.18 cv
513.915 724.18 537.134 715.625 537.134 695.951 cv
537.134 689.539 531.935 684.342 525.524 684.342 cv
519.112 684.342 513.915 689.539 513.915 695.951 cv
cp
f
577.686 695.951 mo
577.686 702.363 577.686 724.18 577.686 724.18 cv
577.686 724.18 554.47 715.625 554.47 695.951 cv
554.47 689.539 559.667 684.342 566.077 684.342 cv
572.489 684.342 577.686 689.539 577.686 695.951 cv
cp
f
577.686 695.951 mo
577.686 702.363 577.686 724.18 577.686 724.18 cv
577.686 724.18 600.905 715.625 600.905 695.951 cv
600.905 689.539 595.706 684.342 589.296 684.342 cv
582.884 684.342 577.686 689.539 577.686 695.951 cv
cp
f
641.456 695.951 mo
641.456 702.363 641.456 724.18 641.456 724.18 cv
641.456 724.18 618.239 715.625 618.239 695.951 cv
618.239 689.539 623.436 684.342 629.847 684.342 cv
636.259 684.342 641.456 689.539 641.456 695.951 cv
cp
f
641.456 695.951 mo
641.456 702.363 641.456 724.18 641.456 724.18 cv
641.456 724.18 664.675 715.625 664.675 695.951 cv
664.675 689.539 659.476 684.342 653.065 684.342 cv
646.653 684.342 641.456 689.539 641.456 695.951 cv
cp
f
705.226 695.951 mo
705.226 702.363 705.226 724.18 705.226 724.18 cv
705.226 724.18 682.009 715.625 682.009 695.951 cv
682.009 689.539 687.206 684.342 693.616 684.342 cv
700.028 684.342 705.226 689.539 705.226 695.951 cv
cp
f
705.226 695.951 mo
705.226 702.363 705.226 724.18 705.226 724.18 cv
705.226 724.18 728.444 715.625 728.444 695.951 cv
728.444 689.539 723.245 684.342 716.835 684.342 cv
710.423 684.342 705.226 689.539 705.226 695.951 cv
cp
f
38.0161 738.51 mo
38.0161 744.922 38.0161 766.738 38.0161 766.738 cv
38.0161 766.738 14.7983 758.184 14.7983 738.51 cv
14.7983 732.1 19.9961 726.9 26.4072 726.9 cv
32.8184 726.9 38.0161 732.1 38.0161 738.51 cv
cp
f
38.0161 738.51 mo
38.0161 744.922 38.0161 766.738 38.0161 766.738 cv
38.0161 766.738 61.2339 758.184 61.2339 738.51 cv
61.2339 732.1 56.0361 726.9 49.625 726.9 cv
43.2139 726.9 38.0161 732.1 38.0161 738.51 cv
cp
f
101.786 738.51 mo
101.786 744.922 101.786 766.738 101.786 766.738 cv
101.786 766.738 78.5684 758.184 78.5684 738.51 cv
78.5684 732.1 83.7661 726.9 90.1772 726.9 cv
96.5884 726.9 101.786 732.1 101.786 738.51 cv
cp
f
101.786 738.51 mo
101.786 744.922 101.786 766.738 101.786 766.738 cv
101.786 766.738 125.004 758.184 125.004 738.51 cv
125.004 732.1 119.806 726.9 113.395 726.9 cv
106.984 726.9 101.786 732.1 101.786 738.51 cv
cp
f
165.556 738.51 mo
165.556 744.922 165.556 766.738 165.556 766.738 cv
165.556 766.738 142.338 758.184 142.338 738.51 cv
142.338 732.1 147.536 726.9 153.947 726.9 cv
160.358 726.9 165.556 732.1 165.556 738.51 cv
cp
f
165.556 738.51 mo
165.556 744.922 165.556 766.738 165.556 766.738 cv
165.556 766.738 188.773 758.184 188.773 738.51 cv
188.773 732.1 183.576 726.9 177.165 726.9 cv
170.753 726.9 165.556 732.1 165.556 738.51 cv
cp
f
229.326 738.51 mo
229.326 744.922 229.326 766.738 229.326 766.738 cv
229.326 766.738 206.108 758.184 206.108 738.51 cv
206.108 732.1 211.306 726.9 217.717 726.9 cv
224.128 726.9 229.326 732.1 229.326 738.51 cv
cp
f
229.326 738.51 mo
229.326 744.922 229.326 766.738 229.326 766.738 cv
229.326 766.738 252.543 758.184 252.543 738.51 cv
252.543 732.1 247.346 726.9 240.935 726.9 cv
234.523 726.9 229.326 732.1 229.326 738.51 cv
cp
f
293.095 738.51 mo
293.095 744.922 293.095 766.738 293.095 766.738 cv
293.095 766.738 269.877 758.184 269.877 738.51 cv
269.877 732.1 275.076 726.9 281.487 726.9 cv
287.898 726.9 293.095 732.1 293.095 738.51 cv
cp
f
293.095 738.51 mo
293.095 744.922 293.095 766.738 293.095 766.738 cv
293.095 766.738 316.313 758.184 316.313 738.51 cv
316.313 732.1 311.116 726.9 304.705 726.9 cv
298.293 726.9 293.095 732.1 293.095 738.51 cv
cp
f
356.865 738.51 mo
356.865 744.922 356.865 766.738 356.865 766.738 cv
356.865 766.738 333.647 758.184 333.647 738.51 cv
333.647 732.1 338.845 726.9 345.256 726.9 cv
351.667 726.9 356.865 732.1 356.865 738.51 cv
cp
f
356.865 738.51 mo
356.865 744.922 356.865 766.738 356.865 766.738 cv
356.865 766.738 380.083 758.184 380.083 738.51 cv
380.083 732.1 374.885 726.9 368.474 726.9 cv
362.063 726.9 356.865 732.1 356.865 738.51 cv
cp
f
420.634 738.51 mo
420.634 744.922 420.634 766.738 420.634 766.738 cv
420.634 766.738 397.417 758.184 397.417 738.51 cv
397.417 732.1 402.614 726.9 409.026 726.9 cv
415.436 726.9 420.634 732.1 420.634 738.51 cv
cp
f
420.634 738.51 mo
420.634 744.922 420.634 766.738 420.634 766.738 cv
420.634 766.738 443.852 758.184 443.852 738.51 cv
443.852 732.1 438.655 726.9 432.243 726.9 cv
425.833 726.9 420.634 732.1 420.634 738.51 cv
cp
f
484.405 738.51 mo
484.405 744.922 484.405 766.738 484.405 766.738 cv
484.405 766.738 461.188 758.184 461.188 738.51 cv
461.188 732.1 466.386 726.9 472.796 726.9 cv
479.208 726.9 484.405 732.1 484.405 738.51 cv
cp
f
484.405 738.51 mo
484.405 744.922 484.405 766.738 484.405 766.738 cv
484.405 766.738 507.624 758.184 507.624 738.51 cv
507.624 732.1 502.425 726.9 496.015 726.9 cv
489.602 726.9 484.405 732.1 484.405 738.51 cv
cp
f
548.175 738.51 mo
548.175 744.922 548.175 766.738 548.175 766.738 cv
548.175 766.738 524.958 758.184 524.958 738.51 cv
524.958 732.1 530.155 726.9 536.565 726.9 cv
542.977 726.9 548.175 732.1 548.175 738.51 cv
cp
f
548.175 738.51 mo
548.175 744.922 548.175 766.738 548.175 766.738 cv
548.175 766.738 571.394 758.184 571.394 738.51 cv
571.394 732.1 566.194 726.9 559.784 726.9 cv
553.372 726.9 548.175 732.1 548.175 738.51 cv
cp
f
611.944 738.51 mo
611.944 744.922 611.944 766.738 611.944 766.738 cv
611.944 766.738 588.727 758.184 588.727 738.51 cv
588.727 732.1 593.925 726.9 600.335 726.9 cv
606.747 726.9 611.944 732.1 611.944 738.51 cv
cp
f
611.944 738.51 mo
611.944 744.922 611.944 766.738 611.944 766.738 cv
611.944 766.738 635.163 758.184 635.163 738.51 cv
635.163 732.1 629.964 726.9 623.554 726.9 cv
617.142 726.9 611.944 732.1 611.944 738.51 cv
cp
f
675.716 738.51 mo
675.716 744.922 675.716 766.738 675.716 766.738 cv
675.716 766.738 652.499 758.184 652.499 738.51 cv
652.499 732.1 657.696 726.9 664.106 726.9 cv
670.519 726.9 675.716 732.1 675.716 738.51 cv
cp
f
675.716 738.51 mo
675.716 744.922 675.716 766.738 675.716 766.738 cv
675.716 766.738 698.935 758.184 698.935 738.51 cv
698.935 732.1 693.735 726.9 687.325 726.9 cv
680.913 726.9 675.716 732.1 675.716 738.51 cv
cp
f
739.485 738.51 mo
739.485 744.922 739.485 766.738 739.485 766.738 cv
739.485 766.738 716.269 758.184 716.269 738.51 cv
716.269 732.1 721.466 726.9 727.876 726.9 cv
734.288 726.9 739.485 732.1 739.485 738.51 cv
cp
f
739.485 738.51 mo
739.485 744.922 739.485 766.738 739.485 766.738 cv
739.485 766.738 762.704 758.184 762.704 738.51 cv
762.704 732.1 757.505 726.9 751.095 726.9 cv
744.683 726.9 739.485 732.1 739.485 738.51 cv
cp
f
769.028 65.9795 mo
769.028 72.3906 769.028 94.207 769.028 94.207 cv
769.028 94.207 745.81 85.6533 745.81 65.9795 cv
745.81 59.5679 751.008 54.3706 757.419 54.3706 cv
763.83 54.3706 769.028 59.5679 769.028 65.9795 cv
cp
f
769.028 65.9795 mo
769.028 72.3906 769.028 94.207 769.028 94.207 cv
769.028 94.207 792.245 85.6533 792.245 65.9795 cv
792.245 59.5679 787.048 54.3706 780.637 54.3706 cv
774.226 54.3706 769.028 59.5679 769.028 65.9795 cv
cp
f
769.028 155.975 mo
769.028 162.386 769.028 184.203 769.028 184.203 cv
769.028 184.203 745.81 175.649 745.81 155.975 cv
745.81 149.564 751.008 144.366 757.419 144.366 cv
763.83 144.366 769.028 149.564 769.028 155.975 cv
cp
f
769.028 155.975 mo
769.028 162.386 769.028 184.203 769.028 184.203 cv
769.028 184.203 792.245 175.649 792.245 155.975 cv
792.245 149.564 787.048 144.366 780.637 144.366 cv
774.226 144.366 769.028 149.564 769.028 155.975 cv
cp
f
769.028 245.971 mo
769.028 252.382 769.028 274.198 769.028 274.198 cv
769.028 274.198 745.81 265.645 745.81 245.971 cv
745.81 239.559 751.008 234.362 757.419 234.362 cv
763.83 234.362 769.028 239.559 769.028 245.971 cv
cp
f
769.028 245.971 mo
769.028 252.382 769.028 274.198 769.028 274.198 cv
769.028 274.198 792.245 265.645 792.245 245.971 cv
792.245 239.559 787.048 234.362 780.637 234.362 cv
774.226 234.362 769.028 239.559 769.028 245.971 cv
cp
f
769.028 335.967 mo
769.028 342.379 769.028 364.195 769.028 364.195 cv
769.028 364.195 745.81 355.641 745.81 335.967 cv
745.81 329.556 751.008 324.358 757.419 324.358 cv
763.83 324.358 769.028 329.556 769.028 335.967 cv
cp
f
769.028 335.967 mo
769.028 342.379 769.028 364.195 769.028 364.195 cv
769.028 364.195 792.245 355.641 792.245 335.967 cv
792.245 329.556 787.048 324.358 780.637 324.358 cv
774.226 324.358 769.028 329.556 769.028 335.967 cv
cp
f
769.028 425.963 mo
769.028 432.375 769.028 454.191 769.028 454.191 cv
769.028 454.191 745.81 445.637 745.81 425.963 cv
745.81 419.551 751.008 414.354 757.419 414.354 cv
763.83 414.354 769.028 419.551 769.028 425.963 cv
cp
f
769.028 425.963 mo
769.028 432.375 769.028 454.191 769.028 454.191 cv
769.028 454.191 792.245 445.637 792.245 425.963 cv
792.245 419.551 787.048 414.354 780.637 414.354 cv
774.226 414.354 769.028 419.551 769.028 425.963 cv
cp
f
769.028 515.959 mo
769.028 522.371 769.028 544.188 769.028 544.188 cv
769.028 544.188 745.81 535.633 745.81 515.959 cv
745.81 509.547 751.008 504.35 757.419 504.35 cv
763.83 504.35 769.028 509.547 769.028 515.959 cv
cp
f
769.028 515.959 mo
769.028 522.371 769.028 544.188 769.028 544.188 cv
769.028 544.188 792.245 535.633 792.245 515.959 cv
792.245 509.547 787.048 504.35 780.637 504.35 cv
774.226 504.35 769.028 509.547 769.028 515.959 cv
cp
f
769.028 605.955 mo
769.028 612.367 769.028 634.184 769.028 634.184 cv
769.028 634.184 745.81 625.629 745.81 605.955 cv
745.81 599.543 751.008 594.346 757.419 594.346 cv
763.83 594.346 769.028 599.543 769.028 605.955 cv
cp
f
769.028 605.955 mo
769.028 612.367 769.028 634.184 769.028 634.184 cv
769.028 634.184 792.245 625.629 792.245 605.955 cv
792.245 599.543 787.048 594.346 780.637 594.346 cv
774.226 594.346 769.028 599.543 769.028 605.955 cv
cp
f
769.028 695.951 mo
769.028 702.363 769.028 724.18 769.028 724.18 cv
769.028 724.18 745.81 715.625 745.81 695.951 cv
745.81 689.539 751.008 684.342 757.419 684.342 cv
763.83 684.342 769.028 689.539 769.028 695.951 cv
cp
f
769.028 695.951 mo
769.028 702.363 769.028 724.18 769.028 724.18 cv
769.028 724.18 792.245 715.625 792.245 695.951 cv
792.245 689.539 787.048 684.342 780.637 684.342 cv
774.226 684.342 769.028 689.539 769.028 695.951 cv
cp
f
112.039 5.57714 mo
105.627 5.57714 100.43 10.7744 100.43 17.186 cv
100.43 10.7744 95.2319 5.57714 88.8208 5.57714 cv
82.4097 5.57714 77.2119 10.7744 77.2119 17.186 cv
77.2119 36.8598 100.43 45.4136 100.43 45.4136 cv
100.43 45.4136 123.648 36.8598 123.648 17.186 cv
123.648 10.7744 118.45 5.57714 112.039 5.57714 cv
cp
.0129091 .0812085 .0378119 0 cmyk
f
239.578 5.57714 mo
233.167 5.57714 227.969 10.7744 227.969 17.186 cv
227.969 10.7744 222.771 5.57714 216.36 5.57714 cv
209.949 5.57714 204.751 10.7744 204.751 17.186 cv
204.751 36.8598 227.969 45.4136 227.969 45.4136 cv
227.969 45.4136 251.187 36.8598 251.187 17.186 cv
251.187 10.7744 245.989 5.57714 239.578 5.57714 cv
cp
f
367.118 5.57714 mo
360.706 5.57714 355.509 10.7744 355.509 17.186 cv
355.509 10.7744 350.311 5.57714 343.9 5.57714 cv
337.489 5.57714 332.291 10.7744 332.291 17.186 cv
332.291 36.8598 355.509 45.4136 355.509 45.4136 cv
355.509 45.4136 378.727 36.8598 378.727 17.186 cv
378.727 10.7744 373.529 5.57714 367.118 5.57714 cv
cp
f
494.658 5.57714 mo
488.246 5.57714 483.049 10.7744 483.049 17.186 cv
483.049 10.7744 477.852 5.57714 471.44 5.57714 cv
465.029 5.57714 459.832 10.7744 459.832 17.186 cv
459.832 36.8598 483.049 45.4136 483.049 45.4136 cv
483.049 45.4136 506.268 36.8598 506.268 17.186 cv
506.268 10.7744 501.068 5.57714 494.658 5.57714 cv
cp
f
622.197 5.57714 mo
615.785 5.57714 610.588 10.7744 610.588 17.186 cv
610.588 10.7744 605.391 5.57714 598.978 5.57714 cv
592.568 5.57714 587.371 10.7744 587.371 17.186 cv
587.371 36.8598 610.588 45.4136 610.588 45.4136 cv
610.588 45.4136 633.807 36.8598 633.807 17.186 cv
633.807 10.7744 628.607 5.57714 622.197 5.57714 cv
cp
f
738.129 45.4136 mo
738.129 45.4136 761.348 36.8598 761.348 17.186 cv
761.348 10.7744 756.148 5.57714 749.738 5.57714 cv
743.326 5.57714 738.129 10.7744 738.129 17.186 cv
738.129 10.7744 732.932 5.57714 726.519 5.57714 cv
720.109 5.57714 714.912 10.7744 714.912 17.186 cv
714.912 36.8598 738.129 45.4136 738.129 45.4136 cv
cp
f
66.1709 92.8506 mo
66.1709 92.8506 89.3887 84.2969 89.3887 64.623 cv
89.3887 58.2114 84.1909 53.0141 77.7798 53.0141 cv
71.3687 53.0141 66.1709 58.2114 66.1709 64.623 cv
66.1709 58.2114 60.9731 53.0141 54.562 53.0141 cv
48.1509 53.0141 42.9531 58.2114 42.9531 64.623 cv
42.9531 84.2969 66.1709 92.8506 66.1709 92.8506 cv
cp
f
193.71 92.8506 mo
193.71 92.8506 216.928 84.2969 216.928 64.623 cv
216.928 58.2114 211.73 53.0141 205.319 53.0141 cv
198.908 53.0141 193.71 58.2114 193.71 64.623 cv
193.71 58.2114 188.513 53.0141 182.102 53.0141 cv
175.69 53.0141 170.493 58.2114 170.493 64.623 cv
170.493 84.2969 193.71 92.8506 193.71 92.8506 cv
cp
f
321.25 92.8506 mo
321.25 92.8506 344.468 84.2969 344.468 64.623 cv
344.468 58.2114 339.27 53.0141 332.859 53.0141 cv
326.448 53.0141 321.25 58.2114 321.25 64.623 cv
321.25 58.2114 316.052 53.0141 309.641 53.0141 cv
303.23 53.0141 298.032 58.2114 298.032 64.623 cv
298.032 84.2969 321.25 92.8506 321.25 92.8506 cv
cp
f
448.789 92.8506 mo
448.789 92.8506 472.008 84.2969 472.008 64.623 cv
472.008 58.2114 466.81 53.0141 460.398 53.0141 cv
453.988 53.0141 448.789 58.2114 448.789 64.623 cv
448.789 58.2114 443.592 53.0141 437.182 53.0141 cv
430.769 53.0141 425.572 58.2114 425.572 64.623 cv
425.572 84.2969 448.789 92.8506 448.789 92.8506 cv
cp
f
576.33 92.8506 mo
576.33 92.8506 599.549 84.2969 599.549 64.623 cv
599.549 58.2114 594.35 53.0141 587.94 53.0141 cv
581.527 53.0141 576.33 58.2114 576.33 64.623 cv
576.33 58.2114 571.133 53.0141 564.721 53.0141 cv
558.31 53.0141 553.113 58.2114 553.113 64.623 cv
553.113 84.2969 576.33 92.8506 576.33 92.8506 cv
cp
f
703.869 92.8506 mo
703.869 92.8506 727.088 84.2969 727.088 64.623 cv
727.088 58.2114 721.889 53.0141 715.478 53.0141 cv
709.066 53.0141 703.869 58.2114 703.869 64.623 cv
703.869 58.2114 698.672 53.0141 692.26 53.0141 cv
685.85 53.0141 680.652 58.2114 680.652 64.623 cv
680.652 84.2969 703.869 92.8506 703.869 92.8506 cv
cp
f
112.039 95.5727 mo
105.627 95.5727 100.43 100.77 100.43 107.182 cv
100.43 100.77 95.2319 95.5727 88.8208 95.5727 cv
82.4097 95.5727 77.2119 100.77 77.2119 107.182 cv
77.2119 126.855 100.43 135.409 100.43 135.409 cv
100.43 135.409 123.648 126.855 123.648 107.182 cv
123.648 100.77 118.45 95.5727 112.039 95.5727 cv
cp
f
239.578 95.5727 mo
233.167 95.5727 227.969 100.77 227.969 107.182 cv
227.969 100.77 222.771 95.5727 216.36 95.5727 cv
209.949 95.5727 204.751 100.77 204.751 107.182 cv
204.751 126.855 227.969 135.409 227.969 135.409 cv
227.969 135.409 251.187 126.855 251.187 107.182 cv
251.187 100.77 245.989 95.5727 239.578 95.5727 cv
cp
f
367.118 95.5727 mo
360.706 95.5727 355.509 100.77 355.509 107.182 cv
355.509 100.77 350.311 95.5727 343.9 95.5727 cv
337.489 95.5727 332.291 100.77 332.291 107.182 cv
332.291 126.855 355.509 135.409 355.509 135.409 cv
355.509 135.409 378.727 126.855 378.727 107.182 cv
378.727 100.77 373.529 95.5727 367.118 95.5727 cv
cp
f
494.658 95.5727 mo
488.246 95.5727 483.049 100.77 483.049 107.182 cv
483.049 100.77 477.852 95.5727 471.44 95.5727 cv
465.029 95.5727 459.832 100.77 459.832 107.182 cv
459.832 126.855 483.049 135.409 483.049 135.409 cv
483.049 135.409 506.268 126.855 506.268 107.182 cv
506.268 100.77 501.068 95.5727 494.658 95.5727 cv
cp
f
622.197 95.5727 mo
615.785 95.5727 610.588 100.77 610.588 107.182 cv
610.588 100.77 605.391 95.5727 598.978 95.5727 cv
592.568 95.5727 587.371 100.77 587.371 107.182 cv
587.371 126.855 610.588 135.409 610.588 135.409 cv
610.588 135.409 633.807 126.855 633.807 107.182 cv
633.807 100.77 628.607 95.5727 622.197 95.5727 cv
cp
f
749.738 95.5727 mo
743.326 95.5727 738.129 100.77 738.129 107.182 cv
738.129 100.77 732.932 95.5727 726.519 95.5727 cv
720.109 95.5727 714.912 100.77 714.912 107.182 cv
714.912 126.855 738.129 135.409 738.129 135.409 cv
738.129 135.409 761.348 126.855 761.348 107.182 cv
761.348 100.77 756.148 95.5727 749.738 95.5727 cv
cp
f
66.1709 182.846 mo
66.1709 182.846 89.3887 174.292 89.3887 154.619 cv
89.3887 148.207 84.1909 143.01 77.7798 143.01 cv
71.3687 143.01 66.1709 148.207 66.1709 154.619 cv
66.1709 148.207 60.9731 143.01 54.562 143.01 cv
48.1509 143.01 42.9531 148.207 42.9531 154.619 cv
42.9531 174.292 66.1709 182.846 66.1709 182.846 cv
cp
f
193.71 182.846 mo
193.71 182.846 216.928 174.292 216.928 154.619 cv
216.928 148.207 211.73 143.01 205.319 143.01 cv
198.908 143.01 193.71 148.207 193.71 154.619 cv
193.71 148.207 188.513 143.01 182.102 143.01 cv
175.69 143.01 170.493 148.207 170.493 154.619 cv
170.493 174.292 193.71 182.846 193.71 182.846 cv
cp
f
321.25 182.846 mo
321.25 182.846 344.468 174.292 344.468 154.619 cv
344.468 148.207 339.27 143.01 332.859 143.01 cv
326.448 143.01 321.25 148.207 321.25 154.619 cv
321.25 148.207 316.052 143.01 309.641 143.01 cv
303.23 143.01 298.032 148.207 298.032 154.619 cv
298.032 174.292 321.25 182.846 321.25 182.846 cv
cp
f
448.789 182.846 mo
448.789 182.846 472.008 174.292 472.008 154.619 cv
472.008 148.207 466.81 143.01 460.398 143.01 cv
453.988 143.01 448.789 148.207 448.789 154.619 cv
448.789 148.207 443.592 143.01 437.182 143.01 cv
430.769 143.01 425.572 148.207 425.572 154.619 cv
425.572 174.292 448.789 182.846 448.789 182.846 cv
cp
f
576.33 182.846 mo
576.33 182.846 599.549 174.292 599.549 154.619 cv
599.549 148.207 594.35 143.01 587.94 143.01 cv
581.527 143.01 576.33 148.207 576.33 154.619 cv
576.33 148.207 571.133 143.01 564.721 143.01 cv
558.31 143.01 553.113 148.207 553.113 154.619 cv
553.113 174.292 576.33 182.846 576.33 182.846 cv
cp
f
703.869 182.846 mo
703.869 182.846 727.088 174.292 727.088 154.619 cv
727.088 148.207 721.889 143.01 715.478 143.01 cv
709.066 143.01 703.869 148.207 703.869 154.619 cv
703.869 148.207 698.672 143.01 692.26 143.01 cv
685.85 143.01 680.652 148.207 680.652 154.619 cv
680.652 174.292 703.869 182.846 703.869 182.846 cv
cp
f
112.039 185.568 mo
105.627 185.568 100.43 190.766 100.43 197.177 cv
100.43 190.766 95.2319 185.568 88.8208 185.568 cv
82.4097 185.568 77.2119 190.766 77.2119 197.177 cv
77.2119 216.851 100.43 225.405 100.43 225.405 cv
100.43 225.405 123.648 216.851 123.648 197.177 cv
123.648 190.766 118.45 185.568 112.039 185.568 cv
cp
f
239.578 185.568 mo
233.167 185.568 227.969 190.766 227.969 197.177 cv
227.969 190.766 222.771 185.568 216.36 185.568 cv
209.949 185.568 204.751 190.766 204.751 197.177 cv
204.751 216.851 227.969 225.405 227.969 225.405 cv
227.969 225.405 251.187 216.851 251.187 197.177 cv
251.187 190.766 245.989 185.568 239.578 185.568 cv
cp
f
367.118 185.568 mo
360.706 185.568 355.509 190.766 355.509 197.177 cv
355.509 190.766 350.311 185.568 343.9 185.568 cv
337.489 185.568 332.291 190.766 332.291 197.177 cv
332.291 216.851 355.509 225.405 355.509 225.405 cv
355.509 225.405 378.727 216.851 378.727 197.177 cv
378.727 190.766 373.529 185.568 367.118 185.568 cv
cp
f
494.658 185.568 mo
488.246 185.568 483.049 190.766 483.049 197.177 cv
483.049 190.766 477.852 185.568 471.44 185.568 cv
465.029 185.568 459.832 190.766 459.832 197.177 cv
459.832 216.851 483.049 225.405 483.049 225.405 cv
483.049 225.405 506.268 216.851 506.268 197.177 cv
506.268 190.766 501.068 185.568 494.658 185.568 cv
cp
f
622.197 185.568 mo
615.785 185.568 610.588 190.766 610.588 197.177 cv
610.588 190.766 605.391 185.568 598.978 185.568 cv
592.568 185.568 587.371 190.766 587.371 197.177 cv
587.371 216.851 610.588 225.405 610.588 225.405 cv
610.588 225.405 633.807 216.851 633.807 197.177 cv
633.807 190.766 628.607 185.568 622.197 185.568 cv
cp
f
749.738 185.568 mo
743.326 185.568 738.129 190.766 738.129 197.177 cv
738.129 190.766 732.932 185.568 726.519 185.568 cv
720.109 185.568 714.912 190.766 714.912 197.177 cv
714.912 216.851 738.129 225.405 738.129 225.405 cv
738.129 225.405 761.348 216.851 761.348 197.177 cv
761.348 190.766 756.148 185.568 749.738 185.568 cv
cp
f
66.1709 272.842 mo
66.1709 272.842 89.3887 264.288 89.3887 244.614 cv
89.3887 238.203 84.1909 233.005 77.7798 233.005 cv
71.3687 233.005 66.1709 238.203 66.1709 244.614 cv
66.1709 238.203 60.9731 233.005 54.562 233.005 cv
48.1509 233.005 42.9531 238.203 42.9531 244.614 cv
42.9531 264.288 66.1709 272.842 66.1709 272.842 cv
cp
f
193.71 272.842 mo
193.71 272.842 216.928 264.288 216.928 244.614 cv
216.928 238.203 211.73 233.005 205.319 233.005 cv
198.908 233.005 193.71 238.203 193.71 244.614 cv
193.71 238.203 188.513 233.005 182.102 233.005 cv
175.69 233.005 170.493 238.203 170.493 244.614 cv
170.493 264.288 193.71 272.842 193.71 272.842 cv
cp
f
321.25 272.842 mo
321.25 272.842 344.468 264.288 344.468 244.614 cv
344.468 238.203 339.27 233.005 332.859 233.005 cv
326.448 233.005 321.25 238.203 321.25 244.614 cv
321.25 238.203 316.052 233.005 309.641 233.005 cv
303.23 233.005 298.032 238.203 298.032 244.614 cv
298.032 264.288 321.25 272.842 321.25 272.842 cv
cp
f
448.789 272.842 mo
448.789 272.842 472.008 264.288 472.008 244.614 cv
472.008 238.203 466.81 233.005 460.398 233.005 cv
453.988 233.005 448.789 238.203 448.789 244.614 cv
448.789 238.203 443.592 233.005 437.182 233.005 cv
430.769 233.005 425.572 238.203 425.572 244.614 cv
425.572 264.288 448.789 272.842 448.789 272.842 cv
cp
f
576.33 272.842 mo
576.33 272.842 599.549 264.288 599.549 244.614 cv
599.549 238.203 594.35 233.005 587.94 233.005 cv
581.527 233.005 576.33 238.203 576.33 244.614 cv
576.33 238.203 571.133 233.005 564.721 233.005 cv
558.31 233.005 553.113 238.203 553.113 244.614 cv
553.113 264.288 576.33 272.842 576.33 272.842 cv
cp
f
703.869 272.842 mo
703.869 272.842 727.088 264.288 727.088 244.614 cv
727.088 238.203 721.889 233.005 715.478 233.005 cv
709.066 233.005 703.869 238.203 703.869 244.614 cv
703.869 238.203 698.672 233.005 692.26 233.005 cv
685.85 233.005 680.652 238.203 680.652 244.614 cv
680.652 264.288 703.869 272.842 703.869 272.842 cv
cp
f
112.039 275.564 mo
105.627 275.564 100.43 280.762 100.43 287.173 cv
100.43 280.762 95.2319 275.564 88.8208 275.564 cv
82.4097 275.564 77.2119 280.762 77.2119 287.173 cv
77.2119 306.848 100.43 315.401 100.43 315.401 cv
100.43 315.401 123.648 306.848 123.648 287.173 cv
123.648 280.762 118.45 275.564 112.039 275.564 cv
cp
f
239.578 275.564 mo
233.167 275.564 227.969 280.762 227.969 287.173 cv
227.969 280.762 222.771 275.564 216.36 275.564 cv
209.949 275.564 204.751 280.762 204.751 287.173 cv
204.751 306.848 227.969 315.401 227.969 315.401 cv
227.969 315.401 251.187 306.848 251.187 287.173 cv
251.187 280.762 245.989 275.564 239.578 275.564 cv
cp
f
367.118 275.564 mo
360.706 275.564 355.509 280.762 355.509 287.173 cv
355.509 280.762 350.311 275.564 343.9 275.564 cv
337.489 275.564 332.291 280.762 332.291 287.173 cv
332.291 306.848 355.509 315.401 355.509 315.401 cv
355.509 315.401 378.727 306.848 378.727 287.173 cv
378.727 280.762 373.529 275.564 367.118 275.564 cv
cp
f
494.658 275.564 mo
488.246 275.564 483.049 280.762 483.049 287.173 cv
483.049 280.762 477.852 275.564 471.44 275.564 cv
465.029 275.564 459.832 280.762 459.832 287.173 cv
459.832 306.848 483.049 315.401 483.049 315.401 cv
483.049 315.401 506.268 306.848 506.268 287.173 cv
506.268 280.762 501.068 275.564 494.658 275.564 cv
cp
f
622.197 275.564 mo
615.785 275.564 610.588 280.762 610.588 287.173 cv
610.588 280.762 605.391 275.564 598.978 275.564 cv
592.568 275.564 587.371 280.762 587.371 287.173 cv
587.371 306.848 610.588 315.401 610.588 315.401 cv
610.588 315.401 633.807 306.848 633.807 287.173 cv
633.807 280.762 628.607 275.564 622.197 275.564 cv
cp
f
749.738 275.564 mo
743.326 275.564 738.129 280.762 738.129 287.173 cv
738.129 280.762 732.932 275.564 726.519 275.564 cv
720.109 275.564 714.912 280.762 714.912 287.173 cv
714.912 306.848 738.129 315.401 738.129 315.401 cv
738.129 315.401 761.348 306.848 761.348 287.173 cv
761.348 280.762 756.148 275.564 749.738 275.564 cv
cp
f
66.1709 362.839 mo
66.1709 362.839 89.3887 354.284 89.3887 334.61 cv
89.3887 328.199 84.1909 323.002 77.7798 323.002 cv
71.3687 323.002 66.1709 328.199 66.1709 334.61 cv
66.1709 328.199 60.9731 323.002 54.562 323.002 cv
48.1509 323.002 42.9531 328.199 42.9531 334.61 cv
42.9531 354.284 66.1709 362.839 66.1709 362.839 cv
cp
f
193.71 362.839 mo
193.71 362.839 216.928 354.284 216.928 334.61 cv
216.928 328.199 211.73 323.002 205.319 323.002 cv
198.908 323.002 193.71 328.199 193.71 334.61 cv
193.71 328.199 188.513 323.002 182.102 323.002 cv
175.69 323.002 170.493 328.199 170.493 334.61 cv
170.493 354.284 193.71 362.839 193.71 362.839 cv
cp
f
321.25 362.839 mo
321.25 362.839 344.468 354.284 344.468 334.61 cv
344.468 328.199 339.27 323.002 332.859 323.002 cv
326.448 323.002 321.25 328.199 321.25 334.61 cv
321.25 328.199 316.052 323.002 309.641 323.002 cv
303.23 323.002 298.032 328.199 298.032 334.61 cv
298.032 354.284 321.25 362.839 321.25 362.839 cv
cp
f
448.789 362.839 mo
448.789 362.839 472.008 354.284 472.008 334.61 cv
472.008 328.199 466.81 323.002 460.398 323.002 cv
453.988 323.002 448.789 328.199 448.789 334.61 cv
448.789 328.199 443.592 323.002 437.182 323.002 cv
430.769 323.002 425.572 328.199 425.572 334.61 cv
425.572 354.284 448.789 362.839 448.789 362.839 cv
cp
f
576.33 362.839 mo
576.33 362.839 599.549 354.284 599.549 334.61 cv
599.549 328.199 594.35 323.002 587.94 323.002 cv
581.527 323.002 576.33 328.199 576.33 334.61 cv
576.33 328.199 571.133 323.002 564.721 323.002 cv
558.31 323.002 553.113 328.199 553.113 334.61 cv
553.113 354.284 576.33 362.839 576.33 362.839 cv
cp
f
703.869 362.839 mo
703.869 362.839 727.088 354.284 727.088 334.61 cv
727.088 328.199 721.889 323.002 715.478 323.002 cv
709.066 323.002 703.869 328.199 703.869 334.61 cv
703.869 328.199 698.672 323.002 692.26 323.002 cv
685.85 323.002 680.652 328.199 680.652 334.61 cv
680.652 354.284 703.869 362.839 703.869 362.839 cv
cp
f
112.039 365.56 mo
105.627 365.56 100.43 370.759 100.43 377.169 cv
100.43 370.759 95.2319 365.56 88.8208 365.56 cv
82.4097 365.56 77.2119 370.759 77.2119 377.169 cv
77.2119 396.843 100.43 405.397 100.43 405.397 cv
100.43 405.397 123.648 396.843 123.648 377.169 cv
123.648 370.759 118.45 365.56 112.039 365.56 cv
cp
f
239.578 365.56 mo
233.167 365.56 227.969 370.759 227.969 377.169 cv
227.969 370.759 222.771 365.56 216.36 365.56 cv
209.949 365.56 204.751 370.759 204.751 377.169 cv
204.751 396.843 227.969 405.397 227.969 405.397 cv
227.969 405.397 251.187 396.843 251.187 377.169 cv
251.187 370.759 245.989 365.56 239.578 365.56 cv
cp
f
367.118 365.56 mo
360.706 365.56 355.509 370.759 355.509 377.169 cv
355.509 370.759 350.311 365.56 343.9 365.56 cv
337.489 365.56 332.291 370.759 332.291 377.169 cv
332.291 396.843 355.509 405.397 355.509 405.397 cv
355.509 405.397 378.727 396.843 378.727 377.169 cv
378.727 370.759 373.529 365.56 367.118 365.56 cv
cp
f
494.658 365.56 mo
488.246 365.56 483.049 370.759 483.049 377.169 cv
483.049 370.759 477.852 365.56 471.44 365.56 cv
465.029 365.56 459.832 370.759 459.832 377.169 cv
459.832 396.843 483.049 405.397 483.049 405.397 cv
483.049 405.397 506.268 396.843 506.268 377.169 cv
506.268 370.759 501.068 365.56 494.658 365.56 cv
cp
f
622.197 365.56 mo
615.785 365.56 610.588 370.759 610.588 377.169 cv
610.588 370.759 605.391 365.56 598.978 365.56 cv
592.568 365.56 587.371 370.759 587.371 377.169 cv
587.371 396.843 610.588 405.397 610.588 405.397 cv
610.588 405.397 633.807 396.843 633.807 377.169 cv
633.807 370.759 628.607 365.56 622.197 365.56 cv
cp
f
749.738 365.56 mo
743.326 365.56 738.129 370.759 738.129 377.169 cv
738.129 370.759 732.932 365.56 726.519 365.56 cv
720.109 365.56 714.912 370.759 714.912 377.169 cv
714.912 396.843 738.129 405.397 738.129 405.397 cv
738.129 405.397 761.348 396.843 761.348 377.169 cv
761.348 370.759 756.148 365.56 749.738 365.56 cv
cp
f
66.1709 452.835 mo
66.1709 452.835 89.3887 444.28 89.3887 424.606 cv
89.3887 418.194 84.1909 412.997 77.7798 412.997 cv
71.3687 412.997 66.1709 418.194 66.1709 424.606 cv
66.1709 418.194 60.9731 412.997 54.562 412.997 cv
48.1509 412.997 42.9531 418.194 42.9531 424.606 cv
42.9531 444.28 66.1709 452.835 66.1709 452.835 cv
cp
f
193.71 452.835 mo
193.71 452.835 216.928 444.28 216.928 424.606 cv
216.928 418.194 211.73 412.997 205.319 412.997 cv
198.908 412.997 193.71 418.194 193.71 424.606 cv
193.71 418.194 188.513 412.997 182.102 412.997 cv
175.69 412.997 170.493 418.194 170.493 424.606 cv
170.493 444.28 193.71 452.835 193.71 452.835 cv
cp
f
321.25 452.835 mo
321.25 452.835 344.468 444.28 344.468 424.606 cv
344.468 418.194 339.27 412.997 332.859 412.997 cv
326.448 412.997 321.25 418.194 321.25 424.606 cv
321.25 418.194 316.052 412.997 309.641 412.997 cv
303.23 412.997 298.032 418.194 298.032 424.606 cv
298.032 444.28 321.25 452.835 321.25 452.835 cv
cp
f
448.789 452.835 mo
448.789 452.835 472.008 444.28 472.008 424.606 cv
472.008 418.194 466.81 412.997 460.398 412.997 cv
453.988 412.997 448.789 418.194 448.789 424.606 cv
448.789 418.194 443.592 412.997 437.182 412.997 cv
430.769 412.997 425.572 418.194 425.572 424.606 cv
425.572 444.28 448.789 452.835 448.789 452.835 cv
cp
f
576.33 452.835 mo
576.33 452.835 599.549 444.28 599.549 424.606 cv
599.549 418.194 594.35 412.997 587.94 412.997 cv
581.527 412.997 576.33 418.194 576.33 424.606 cv
576.33 418.194 571.133 412.997 564.721 412.997 cv
558.31 412.997 553.113 418.194 553.113 424.606 cv
553.113 444.28 576.33 452.835 576.33 452.835 cv
cp
f
703.869 452.835 mo
703.869 452.835 727.088 444.28 727.088 424.606 cv
727.088 418.194 721.889 412.997 715.478 412.997 cv
709.066 412.997 703.869 418.194 703.869 424.606 cv
703.869 418.194 698.672 412.997 692.26 412.997 cv
685.85 412.997 680.652 418.194 680.652 424.606 cv
680.652 444.28 703.869 452.835 703.869 452.835 cv
cp
f
112.039 455.556 mo
105.627 455.556 100.43 460.755 100.43 467.165 cv
100.43 460.755 95.2319 455.556 88.8208 455.556 cv
82.4097 455.556 77.2119 460.755 77.2119 467.165 cv
77.2119 486.839 100.43 495.393 100.43 495.393 cv
100.43 495.393 123.648 486.839 123.648 467.165 cv
123.648 460.755 118.45 455.556 112.039 455.556 cv
cp
f
239.578 455.556 mo
233.167 455.556 227.969 460.755 227.969 467.165 cv
227.969 460.755 222.771 455.556 216.36 455.556 cv
209.949 455.556 204.751 460.755 204.751 467.165 cv
204.751 486.839 227.969 495.393 227.969 495.393 cv
227.969 495.393 251.187 486.839 251.187 467.165 cv
251.187 460.755 245.989 455.556 239.578 455.556 cv
cp
f
367.118 455.556 mo
360.706 455.556 355.509 460.755 355.509 467.165 cv
355.509 460.755 350.311 455.556 343.9 455.556 cv
337.489 455.556 332.291 460.755 332.291 467.165 cv
332.291 486.839 355.509 495.393 355.509 495.393 cv
355.509 495.393 378.727 486.839 378.727 467.165 cv
378.727 460.755 373.529 455.556 367.118 455.556 cv
cp
f
494.658 455.556 mo
488.246 455.556 483.049 460.755 483.049 467.165 cv
483.049 460.755 477.852 455.556 471.44 455.556 cv
465.029 455.556 459.832 460.755 459.832 467.165 cv
459.832 486.839 483.049 495.393 483.049 495.393 cv
483.049 495.393 506.268 486.839 506.268 467.165 cv
506.268 460.755 501.068 455.556 494.658 455.556 cv
cp
f
622.197 455.556 mo
615.785 455.556 610.588 460.755 610.588 467.165 cv
610.588 460.755 605.391 455.556 598.978 455.556 cv
592.568 455.556 587.371 460.755 587.371 467.165 cv
587.371 486.839 610.588 495.393 610.588 495.393 cv
610.588 495.393 633.807 486.839 633.807 467.165 cv
633.807 460.755 628.607 455.556 622.197 455.556 cv
cp
f
749.738 455.556 mo
743.326 455.556 738.129 460.755 738.129 467.165 cv
738.129 460.755 732.932 455.556 726.519 455.556 cv
720.109 455.556 714.912 460.755 714.912 467.165 cv
714.912 486.839 738.129 495.393 738.129 495.393 cv
738.129 495.393 761.348 486.839 761.348 467.165 cv
761.348 460.755 756.148 455.556 749.738 455.556 cv
cp
f
66.1709 542.831 mo
66.1709 542.831 89.3887 534.276 89.3887 514.602 cv
89.3887 508.19 84.1909 502.993 77.7798 502.993 cv
71.3687 502.993 66.1709 508.19 66.1709 514.602 cv
66.1709 508.19 60.9731 502.993 54.562 502.993 cv
48.1509 502.993 42.9531 508.19 42.9531 514.602 cv
42.9531 534.276 66.1709 542.831 66.1709 542.831 cv
cp
f
193.71 542.831 mo
193.71 542.831 216.928 534.276 216.928 514.602 cv
216.928 508.19 211.73 502.993 205.319 502.993 cv
198.908 502.993 193.71 508.19 193.71 514.602 cv
193.71 508.19 188.513 502.993 182.102 502.993 cv
175.69 502.993 170.493 508.19 170.493 514.602 cv
170.493 534.276 193.71 542.831 193.71 542.831 cv
cp
f
321.25 542.831 mo
321.25 542.831 344.468 534.276 344.468 514.602 cv
344.468 508.19 339.27 502.993 332.859 502.993 cv
326.448 502.993 321.25 508.19 321.25 514.602 cv
321.25 508.19 316.052 502.993 309.641 502.993 cv
303.23 502.993 298.032 508.19 298.032 514.602 cv
298.032 534.276 321.25 542.831 321.25 542.831 cv
cp
f
448.789 542.831 mo
448.789 542.831 472.008 534.276 472.008 514.602 cv
472.008 508.19 466.81 502.993 460.398 502.993 cv
453.988 502.993 448.789 508.19 448.789 514.602 cv
448.789 508.19 443.592 502.993 437.182 502.993 cv
430.769 502.993 425.572 508.19 425.572 514.602 cv
425.572 534.276 448.789 542.831 448.789 542.831 cv
cp
f
576.33 542.831 mo
576.33 542.831 599.549 534.276 599.549 514.602 cv
599.549 508.19 594.35 502.993 587.94 502.993 cv
581.527 502.993 576.33 508.19 576.33 514.602 cv
576.33 508.19 571.133 502.993 564.721 502.993 cv
558.31 502.993 553.113 508.19 553.113 514.602 cv
553.113 534.276 576.33 542.831 576.33 542.831 cv
cp
f
703.869 542.831 mo
703.869 542.831 727.088 534.276 727.088 514.602 cv
727.088 508.19 721.889 502.993 715.478 502.993 cv
709.066 502.993 703.869 508.19 703.869 514.602 cv
703.869 508.19 698.672 502.993 692.26 502.993 cv
685.85 502.993 680.652 508.19 680.652 514.602 cv
680.652 534.276 703.869 542.831 703.869 542.831 cv
cp
f
112.039 545.552 mo
105.627 545.552 100.43 550.751 100.43 557.161 cv
100.43 550.751 95.2319 545.552 88.8208 545.552 cv
82.4097 545.552 77.2119 550.751 77.2119 557.161 cv
77.2119 576.835 100.43 585.39 100.43 585.39 cv
100.43 585.39 123.648 576.835 123.648 557.161 cv
123.648 550.751 118.45 545.552 112.039 545.552 cv
cp
f
239.578 545.552 mo
233.167 545.552 227.969 550.751 227.969 557.161 cv
227.969 550.751 222.771 545.552 216.36 545.552 cv
209.949 545.552 204.751 550.751 204.751 557.161 cv
204.751 576.835 227.969 585.39 227.969 585.39 cv
227.969 585.39 251.187 576.835 251.187 557.161 cv
251.187 550.751 245.989 545.552 239.578 545.552 cv
cp
f
367.118 545.552 mo
360.706 545.552 355.509 550.751 355.509 557.161 cv
355.509 550.751 350.311 545.552 343.9 545.552 cv
337.489 545.552 332.291 550.751 332.291 557.161 cv
332.291 576.835 355.509 585.39 355.509 585.39 cv
355.509 585.39 378.727 576.835 378.727 557.161 cv
378.727 550.751 373.529 545.552 367.118 545.552 cv
cp
f
494.658 545.552 mo
488.246 545.552 483.049 550.751 483.049 557.161 cv
483.049 550.751 477.852 545.552 471.44 545.552 cv
465.029 545.552 459.832 550.751 459.832 557.161 cv
459.832 576.835 483.049 585.39 483.049 585.39 cv
483.049 585.39 506.268 576.835 506.268 557.161 cv
506.268 550.751 501.068 545.552 494.658 545.552 cv
cp
f
622.197 545.552 mo
615.785 545.552 610.588 550.751 610.588 557.161 cv
610.588 550.751 605.391 545.552 598.978 545.552 cv
592.568 545.552 587.371 550.751 587.371 557.161 cv
587.371 576.835 610.588 585.39 610.588 585.39 cv
610.588 585.39 633.807 576.835 633.807 557.161 cv
633.807 550.751 628.607 545.552 622.197 545.552 cv
cp
f
749.738 545.552 mo
743.326 545.552 738.129 550.751 738.129 557.161 cv
738.129 550.751 732.932 545.552 726.519 545.552 cv
720.109 545.552 714.912 550.751 714.912 557.161 cv
714.912 576.835 738.129 585.39 738.129 585.39 cv
738.129 585.39 761.348 576.835 761.348 557.161 cv
761.348 550.751 756.148 545.552 749.738 545.552 cv
cp
f
66.1709 632.827 mo
66.1709 632.827 89.3887 624.272 89.3887 604.599 cv
89.3887 598.187 84.1909 592.989 77.7798 592.989 cv
71.3687 592.989 66.1709 598.187 66.1709 604.599 cv
66.1709 598.187 60.9731 592.989 54.562 592.989 cv
48.1509 592.989 42.9531 598.187 42.9531 604.599 cv
42.9531 624.272 66.1709 632.827 66.1709 632.827 cv
cp
f
193.71 632.827 mo
193.71 632.827 216.928 624.272 216.928 604.599 cv
216.928 598.187 211.73 592.989 205.319 592.989 cv
198.908 592.989 193.71 598.187 193.71 604.599 cv
193.71 598.187 188.513 592.989 182.102 592.989 cv
175.69 592.989 170.493 598.187 170.493 604.599 cv
170.493 624.272 193.71 632.827 193.71 632.827 cv
cp
f
321.25 632.827 mo
321.25 632.827 344.468 624.272 344.468 604.599 cv
344.468 598.187 339.27 592.989 332.859 592.989 cv
326.448 592.989 321.25 598.187 321.25 604.599 cv
321.25 598.187 316.052 592.989 309.641 592.989 cv
303.23 592.989 298.032 598.187 298.032 604.599 cv
298.032 624.272 321.25 632.827 321.25 632.827 cv
cp
f
448.789 632.827 mo
448.789 632.827 472.008 624.272 472.008 604.599 cv
472.008 598.187 466.81 592.989 460.398 592.989 cv
453.988 592.989 448.789 598.187 448.789 604.599 cv
448.789 598.187 443.592 592.989 437.182 592.989 cv
430.769 592.989 425.572 598.187 425.572 604.599 cv
425.572 624.272 448.789 632.827 448.789 632.827 cv
cp
f
576.33 632.827 mo
576.33 632.827 599.549 624.272 599.549 604.599 cv
599.549 598.187 594.35 592.989 587.94 592.989 cv
581.527 592.989 576.33 598.187 576.33 604.599 cv
576.33 598.187 571.133 592.989 564.721 592.989 cv
558.31 592.989 553.113 598.187 553.113 604.599 cv
553.113 624.272 576.33 632.827 576.33 632.827 cv
cp
f
703.869 632.827 mo
703.869 632.827 727.088 624.272 727.088 604.599 cv
727.088 598.187 721.889 592.989 715.478 592.989 cv
709.066 592.989 703.869 598.187 703.869 604.599 cv
703.869 598.187 698.672 592.989 692.26 592.989 cv
685.85 592.989 680.652 598.187 680.652 604.599 cv
680.652 624.272 703.869 632.827 703.869 632.827 cv
cp
f
112.039 635.548 mo
105.627 635.548 100.43 640.747 100.43 647.157 cv
100.43 640.747 95.2319 635.548 88.8208 635.548 cv
82.4097 635.548 77.2119 640.747 77.2119 647.157 cv
77.2119 666.831 100.43 675.386 100.43 675.386 cv
100.43 675.386 123.648 666.831 123.648 647.157 cv
123.648 640.747 118.45 635.548 112.039 635.548 cv
cp
f
239.578 635.548 mo
233.167 635.548 227.969 640.747 227.969 647.157 cv
227.969 640.747 222.771 635.548 216.36 635.548 cv
209.949 635.548 204.751 640.747 204.751 647.157 cv
204.751 666.831 227.969 675.386 227.969 675.386 cv
227.969 675.386 251.187 666.831 251.187 647.157 cv
251.187 640.747 245.989 635.548 239.578 635.548 cv
cp
f
367.118 635.548 mo
360.706 635.548 355.509 640.747 355.509 647.157 cv
355.509 640.747 350.311 635.548 343.9 635.548 cv
337.489 635.548 332.291 640.747 332.291 647.157 cv
332.291 666.831 355.509 675.386 355.509 675.386 cv
355.509 675.386 378.727 666.831 378.727 647.157 cv
378.727 640.747 373.529 635.548 367.118 635.548 cv
cp
f
494.658 635.548 mo
488.246 635.548 483.049 640.747 483.049 647.157 cv
483.049 640.747 477.852 635.548 471.44 635.548 cv
465.029 635.548 459.832 640.747 459.832 647.157 cv
459.832 666.831 483.049 675.386 483.049 675.386 cv
483.049 675.386 506.268 666.831 506.268 647.157 cv
506.268 640.747 501.068 635.548 494.658 635.548 cv
cp
f
622.197 635.548 mo
615.785 635.548 610.588 640.747 610.588 647.157 cv
610.588 640.747 605.391 635.548 598.978 635.548 cv
592.568 635.548 587.371 640.747 587.371 647.157 cv
587.371 666.831 610.588 675.386 610.588 675.386 cv
610.588 675.386 633.807 666.831 633.807 647.157 cv
633.807 640.747 628.607 635.548 622.197 635.548 cv
cp
f
749.738 635.548 mo
743.326 635.548 738.129 640.747 738.129 647.157 cv
738.129 640.747 732.932 635.548 726.519 635.548 cv
720.109 635.548 714.912 640.747 714.912 647.157 cv
714.912 666.831 738.129 675.386 738.129 675.386 cv
738.129 675.386 761.348 666.831 761.348 647.157 cv
761.348 640.747 756.148 635.548 749.738 635.548 cv
cp
f
66.1709 722.823 mo
66.1709 722.823 89.3887 714.268 89.3887 694.595 cv
89.3887 688.183 84.1909 682.985 77.7798 682.985 cv
71.3687 682.985 66.1709 688.183 66.1709 694.595 cv
66.1709 688.183 60.9731 682.985 54.562 682.985 cv
48.1509 682.985 42.9531 688.183 42.9531 694.595 cv
42.9531 714.268 66.1709 722.823 66.1709 722.823 cv
cp
f
193.71 722.823 mo
193.71 722.823 216.928 714.268 216.928 694.595 cv
216.928 688.183 211.73 682.985 205.319 682.985 cv
198.908 682.985 193.71 688.183 193.71 694.595 cv
193.71 688.183 188.513 682.985 182.102 682.985 cv
175.69 682.985 170.493 688.183 170.493 694.595 cv
170.493 714.268 193.71 722.823 193.71 722.823 cv
cp
f
321.25 722.823 mo
321.25 722.823 344.468 714.268 344.468 694.595 cv
344.468 688.183 339.27 682.985 332.859 682.985 cv
326.448 682.985 321.25 688.183 321.25 694.595 cv
321.25 688.183 316.052 682.985 309.641 682.985 cv
303.23 682.985 298.032 688.183 298.032 694.595 cv
298.032 714.268 321.25 722.823 321.25 722.823 cv
cp
f
448.789 722.823 mo
448.789 722.823 472.008 714.268 472.008 694.595 cv
472.008 688.183 466.81 682.985 460.398 682.985 cv
453.988 682.985 448.789 688.183 448.789 694.595 cv
448.789 688.183 443.592 682.985 437.182 682.985 cv
430.769 682.985 425.572 688.183 425.572 694.595 cv
425.572 714.268 448.789 722.823 448.789 722.823 cv
cp
f
576.33 722.823 mo
576.33 722.823 599.549 714.268 599.549 694.595 cv
599.549 688.183 594.35 682.985 587.94 682.985 cv
581.527 682.985 576.33 688.183 576.33 694.595 cv
576.33 688.183 571.133 682.985 564.721 682.985 cv
558.31 682.985 553.113 688.183 553.113 694.595 cv
553.113 714.268 576.33 722.823 576.33 722.823 cv
cp
f
703.869 722.823 mo
703.869 722.823 727.088 714.268 727.088 694.595 cv
727.088 688.183 721.889 682.985 715.478 682.985 cv
709.066 682.985 703.869 688.183 703.869 694.595 cv
703.869 688.183 698.672 682.985 692.26 682.985 cv
685.85 682.985 680.652 688.183 680.652 694.595 cv
680.652 714.268 703.869 722.823 703.869 722.823 cv
cp
f
112.039 725.544 mo
105.627 725.544 100.43 730.743 100.43 737.153 cv
100.43 730.743 95.2319 725.544 88.8208 725.544 cv
82.4097 725.544 77.2119 730.743 77.2119 737.153 cv
77.2119 756.827 100.43 765.382 100.43 765.382 cv
100.43 765.382 123.648 756.827 123.648 737.153 cv
123.648 730.743 118.45 725.544 112.039 725.544 cv
cp
f
239.578 725.544 mo
233.167 725.544 227.969 730.743 227.969 737.153 cv
227.969 730.743 222.771 725.544 216.36 725.544 cv
209.949 725.544 204.751 730.743 204.751 737.153 cv
204.751 756.827 227.969 765.382 227.969 765.382 cv
227.969 765.382 251.187 756.827 251.187 737.153 cv
251.187 730.743 245.989 725.544 239.578 725.544 cv
cp
f
367.118 725.544 mo
360.706 725.544 355.509 730.743 355.509 737.153 cv
355.509 730.743 350.311 725.544 343.9 725.544 cv
337.489 725.544 332.291 730.743 332.291 737.153 cv
332.291 756.827 355.509 765.382 355.509 765.382 cv
355.509 765.382 378.727 756.827 378.727 737.153 cv
378.727 730.743 373.529 725.544 367.118 725.544 cv
cp
f
494.658 725.544 mo
488.246 725.544 483.049 730.743 483.049 737.153 cv
483.049 730.743 477.852 725.544 471.44 725.544 cv
465.029 725.544 459.832 730.743 459.832 737.153 cv
459.832 756.827 483.049 765.382 483.049 765.382 cv
483.049 765.382 506.268 756.827 506.268 737.153 cv
506.268 730.743 501.068 725.544 494.658 725.544 cv
cp
f
622.197 725.544 mo
615.785 725.544 610.588 730.743 610.588 737.153 cv
610.588 730.743 605.391 725.544 598.978 725.544 cv
592.568 725.544 587.371 730.743 587.371 737.153 cv
587.371 756.827 610.588 765.382 610.588 765.382 cv
610.588 765.382 633.807 756.827 633.807 737.153 cv
633.807 730.743 628.607 725.544 622.197 725.544 cv
cp
f
749.738 725.544 mo
743.326 725.544 738.129 730.743 738.129 737.153 cv
738.129 730.743 732.932 725.544 726.519 725.544 cv
720.109 725.544 714.912 730.743 714.912 737.153 cv
714.912 756.827 738.129 765.382 738.129 765.382 cv
738.129 765.382 761.348 756.827 761.348 737.153 cv
761.348 730.743 756.148 725.544 749.738 725.544 cv
cp
f
48.2686 5.57714 mo
41.8574 5.57714 36.6597 10.7744 36.6597 17.186 cv
36.6597 10.7744 31.4619 5.57714 25.0508 5.57714 cv
18.6396 5.57714 13.4419 10.7744 13.4419 17.186 cv
13.4419 36.8598 36.6597 45.4136 36.6597 45.4136 cv
36.6597 45.4136 59.8774 36.8598 59.8774 17.186 cv
59.8774 10.7744 54.6797 5.57714 48.2686 5.57714 cv
cp
.00280766 .243381 .116396 0 cmyk
f
175.808 5.57714 mo
169.397 5.57714 164.199 10.7744 164.199 17.186 cv
164.199 10.7744 159.002 5.57714 152.59 5.57714 cv
146.179 5.57714 140.981 10.7744 140.981 17.186 cv
140.981 36.8598 164.199 45.4136 164.199 45.4136 cv
164.199 45.4136 187.417 36.8598 187.417 17.186 cv
187.417 10.7744 182.219 5.57714 175.808 5.57714 cv
cp
f
303.348 5.57714 mo
296.937 5.57714 291.739 10.7744 291.739 17.186 cv
291.739 10.7744 286.542 5.57714 280.13 5.57714 cv
273.719 5.57714 268.521 10.7744 268.521 17.186 cv
268.521 36.8598 291.739 45.4136 291.739 45.4136 cv
291.739 45.4136 314.956 36.8598 314.956 17.186 cv
314.956 10.7744 309.759 5.57714 303.348 5.57714 cv
cp
f
430.887 5.57714 mo
424.477 5.57714 419.277 10.7744 419.277 17.186 cv
419.277 10.7744 414.08 5.57714 407.67 5.57714 cv
401.258 5.57714 396.061 10.7744 396.061 17.186 cv
396.061 36.8598 419.277 45.4136 419.277 45.4136 cv
419.277 45.4136 442.496 36.8598 442.496 17.186 cv
442.496 10.7744 437.299 5.57714 430.887 5.57714 cv
cp
f
558.428 5.57714 mo
552.016 5.57714 546.818 10.7744 546.818 17.186 cv
546.818 10.7744 541.621 5.57714 535.209 5.57714 cv
528.799 5.57714 523.602 10.7744 523.602 17.186 cv
523.602 36.8598 546.818 45.4136 546.818 45.4136 cv
546.818 45.4136 570.037 36.8598 570.037 17.186 cv
570.037 10.7744 564.838 5.57714 558.428 5.57714 cv
cp
f
685.969 5.57714 mo
679.557 5.57714 674.359 10.7744 674.359 17.186 cv
674.359 10.7744 669.162 5.57714 662.75 5.57714 cv
656.34 5.57714 651.143 10.7744 651.143 17.186 cv
651.143 36.8598 674.359 45.4136 674.359 45.4136 cv
674.359 45.4136 697.578 36.8598 697.578 17.186 cv
697.578 10.7744 692.379 5.57714 685.969 5.57714 cv
cp
f
2.40088 92.8506 mo
2.40088 92.8506 25.6187 84.2969 25.6187 64.623 cv
25.6187 58.2114 20.4209 53.0141 14.0098 53.0141 cv
7.59863 53.0141 2.40088 58.2114 2.40088 64.623 cv
2.40088 58.2114 -2.79688 53.0141 -9.20801 53.0141 cv
-15.6191 53.0141 -20.8169 58.2114 -20.8169 64.623 cv
-20.8169 84.2969 2.40088 92.8506 2.40088 92.8506 cv
cp
f
129.94 92.8506 mo
129.94 92.8506 153.158 84.2969 153.158 64.623 cv
153.158 58.2114 147.96 53.0141 141.549 53.0141 cv
135.138 53.0141 129.94 58.2114 129.94 64.623 cv
129.94 58.2114 124.743 53.0141 118.331 53.0141 cv
111.92 53.0141 106.723 58.2114 106.723 64.623 cv
106.723 84.2969 129.94 92.8506 129.94 92.8506 cv
cp
f
257.48 92.8506 mo
257.48 92.8506 280.698 84.2969 280.698 64.623 cv
280.698 58.2114 275.5 53.0141 269.089 53.0141 cv
262.678 53.0141 257.48 58.2114 257.48 64.623 cv
257.48 58.2114 252.283 53.0141 245.872 53.0141 cv
239.46 53.0141 234.262 58.2114 234.262 64.623 cv
234.262 84.2969 257.48 92.8506 257.48 92.8506 cv
cp
f
385.019 92.8506 mo
385.019 92.8506 408.238 84.2969 408.238 64.623 cv
408.238 58.2114 403.039 53.0141 396.628 53.0141 cv
390.217 53.0141 385.019 58.2114 385.019 64.623 cv
385.019 58.2114 379.822 53.0141 373.411 53.0141 cv
367 53.0141 361.802 58.2114 361.802 64.623 cv
361.802 84.2969 385.019 92.8506 385.019 92.8506 cv
cp
f
512.559 92.8506 mo
512.559 92.8506 535.777 84.2969 535.777 64.623 cv
535.777 58.2114 530.578 53.0141 524.168 53.0141 cv
517.756 53.0141 512.559 58.2114 512.559 64.623 cv
512.559 58.2114 507.361 53.0141 500.949 53.0141 cv
494.539 53.0141 489.342 58.2114 489.342 64.623 cv
489.342 84.2969 512.559 92.8506 512.559 92.8506 cv
cp
f
640.1 92.8506 mo
640.1 92.8506 663.318 84.2969 663.318 64.623 cv
663.318 58.2114 658.119 53.0141 651.709 53.0141 cv
645.297 53.0141 640.1 58.2114 640.1 64.623 cv
640.1 58.2114 634.902 53.0141 628.49 53.0141 cv
622.08 53.0141 616.883 58.2114 616.883 64.623 cv
616.883 84.2969 640.1 92.8506 640.1 92.8506 cv
cp
f
48.2686 95.5727 mo
41.8574 95.5727 36.6597 100.77 36.6597 107.182 cv
36.6597 100.77 31.4619 95.5727 25.0508 95.5727 cv
18.6396 95.5727 13.4419 100.77 13.4419 107.182 cv
13.4419 126.855 36.6597 135.409 36.6597 135.409 cv
36.6597 135.409 59.8774 126.855 59.8774 107.182 cv
59.8774 100.77 54.6797 95.5727 48.2686 95.5727 cv
cp
f
175.808 95.5727 mo
169.397 95.5727 164.199 100.77 164.199 107.182 cv
164.199 100.77 159.002 95.5727 152.59 95.5727 cv
146.179 95.5727 140.981 100.77 140.981 107.182 cv
140.981 126.855 164.199 135.409 164.199 135.409 cv
164.199 135.409 187.417 126.855 187.417 107.182 cv
187.417 100.77 182.219 95.5727 175.808 95.5727 cv
cp
f
303.348 95.5727 mo
296.937 95.5727 291.739 100.77 291.739 107.182 cv
291.739 100.77 286.542 95.5727 280.13 95.5727 cv
273.719 95.5727 268.521 100.77 268.521 107.182 cv
268.521 126.855 291.739 135.409 291.739 135.409 cv
291.739 135.409 314.956 126.855 314.956 107.182 cv
314.956 100.77 309.759 95.5727 303.348 95.5727 cv
cp
f
430.887 95.5727 mo
424.477 95.5727 419.277 100.77 419.277 107.182 cv
419.277 100.77 414.08 95.5727 407.67 95.5727 cv
401.258 95.5727 396.061 100.77 396.061 107.182 cv
396.061 126.855 419.277 135.409 419.277 135.409 cv
419.277 135.409 442.496 126.855 442.496 107.182 cv
442.496 100.77 437.299 95.5727 430.887 95.5727 cv
cp
f
558.428 95.5727 mo
552.016 95.5727 546.818 100.77 546.818 107.182 cv
546.818 100.77 541.621 95.5727 535.209 95.5727 cv
528.799 95.5727 523.602 100.77 523.602 107.182 cv
523.602 126.855 546.818 135.409 546.818 135.409 cv
546.818 135.409 570.037 126.855 570.037 107.182 cv
570.037 100.77 564.838 95.5727 558.428 95.5727 cv
cp
f
685.969 95.5727 mo
679.557 95.5727 674.359 100.77 674.359 107.182 cv
674.359 100.77 669.162 95.5727 662.75 95.5727 cv
656.34 95.5727 651.143 100.77 651.143 107.182 cv
651.143 126.855 674.359 135.409 674.359 135.409 cv
674.359 135.409 697.578 126.855 697.578 107.182 cv
697.578 100.77 692.379 95.5727 685.969 95.5727 cv
cp
f
2.40088 182.846 mo
2.40088 182.846 25.6187 174.292 25.6187 154.619 cv
25.6187 148.207 20.4209 143.01 14.0098 143.01 cv
7.59863 143.01 2.40088 148.207 2.40088 154.619 cv
2.40088 148.207 -2.79688 143.01 -9.20801 143.01 cv
-15.6191 143.01 -20.8169 148.207 -20.8169 154.619 cv
-20.8169 174.292 2.40088 182.846 2.40088 182.846 cv
cp
f
129.94 182.846 mo
129.94 182.846 153.158 174.292 153.158 154.619 cv
153.158 148.207 147.96 143.01 141.549 143.01 cv
135.138 143.01 129.94 148.207 129.94 154.619 cv
129.94 148.207 124.743 143.01 118.331 143.01 cv
111.92 143.01 106.723 148.207 106.723 154.619 cv
106.723 174.292 129.94 182.846 129.94 182.846 cv
cp
f
257.48 182.846 mo
257.48 182.846 280.698 174.292 280.698 154.619 cv
280.698 148.207 275.5 143.01 269.089 143.01 cv
262.678 143.01 257.48 148.207 257.48 154.619 cv
257.48 148.207 252.283 143.01 245.872 143.01 cv
239.46 143.01 234.262 148.207 234.262 154.619 cv
234.262 174.292 257.48 182.846 257.48 182.846 cv
cp
f
385.019 182.846 mo
385.019 182.846 408.238 174.292 408.238 154.619 cv
408.238 148.207 403.039 143.01 396.628 143.01 cv
390.217 143.01 385.019 148.207 385.019 154.619 cv
385.019 148.207 379.822 143.01 373.411 143.01 cv
367 143.01 361.802 148.207 361.802 154.619 cv
361.802 174.292 385.019 182.846 385.019 182.846 cv
cp
f
512.559 182.846 mo
512.559 182.846 535.777 174.292 535.777 154.619 cv
535.777 148.207 530.578 143.01 524.168 143.01 cv
517.756 143.01 512.559 148.207 512.559 154.619 cv
512.559 148.207 507.361 143.01 500.949 143.01 cv
494.539 143.01 489.342 148.207 489.342 154.619 cv
489.342 174.292 512.559 182.846 512.559 182.846 cv
cp
f
640.1 182.846 mo
640.1 182.846 663.318 174.292 663.318 154.619 cv
663.318 148.207 658.119 143.01 651.709 143.01 cv
645.297 143.01 640.1 148.207 640.1 154.619 cv
640.1 148.207 634.902 143.01 628.49 143.01 cv
622.08 143.01 616.883 148.207 616.883 154.619 cv
616.883 174.292 640.1 182.846 640.1 182.846 cv
cp
f
48.2686 185.568 mo
41.8574 185.568 36.6597 190.766 36.6597 197.177 cv
36.6597 190.766 31.4619 185.568 25.0508 185.568 cv
18.6396 185.568 13.4419 190.766 13.4419 197.177 cv
13.4419 216.851 36.6597 225.405 36.6597 225.405 cv
36.6597 225.405 59.8774 216.851 59.8774 197.177 cv
59.8774 190.766 54.6797 185.568 48.2686 185.568 cv
cp
f
175.808 185.568 mo
169.397 185.568 164.199 190.766 164.199 197.177 cv
164.199 190.766 159.002 185.568 152.59 185.568 cv
146.179 185.568 140.981 190.766 140.981 197.177 cv
140.981 216.851 164.199 225.405 164.199 225.405 cv
164.199 225.405 187.417 216.851 187.417 197.177 cv
187.417 190.766 182.219 185.568 175.808 185.568 cv
cp
f
303.348 185.568 mo
296.937 185.568 291.739 190.766 291.739 197.177 cv
291.739 190.766 286.542 185.568 280.13 185.568 cv
273.719 185.568 268.521 190.766 268.521 197.177 cv
268.521 216.851 291.739 225.405 291.739 225.405 cv
291.739 225.405 314.956 216.851 314.956 197.177 cv
314.956 190.766 309.759 185.568 303.348 185.568 cv
cp
f
430.887 185.568 mo
424.477 185.568 419.277 190.766 419.277 197.177 cv
419.277 190.766 414.08 185.568 407.67 185.568 cv
401.258 185.568 396.061 190.766 396.061 197.177 cv
396.061 216.851 419.277 225.405 419.277 225.405 cv
419.277 225.405 442.496 216.851 442.496 197.177 cv
442.496 190.766 437.299 185.568 430.887 185.568 cv
cp
f
558.428 185.568 mo
552.016 185.568 546.818 190.766 546.818 197.177 cv
546.818 190.766 541.621 185.568 535.209 185.568 cv
528.799 185.568 523.602 190.766 523.602 197.177 cv
523.602 216.851 546.818 225.405 546.818 225.405 cv
546.818 225.405 570.037 216.851 570.037 197.177 cv
570.037 190.766 564.838 185.568 558.428 185.568 cv
cp
f
685.969 185.568 mo
679.557 185.568 674.359 190.766 674.359 197.177 cv
674.359 190.766 669.162 185.568 662.75 185.568 cv
656.34 185.568 651.143 190.766 651.143 197.177 cv
651.143 216.851 674.359 225.405 674.359 225.405 cv
674.359 225.405 697.578 216.851 697.578 197.177 cv
697.578 190.766 692.379 185.568 685.969 185.568 cv
cp
f
2.40088 272.842 mo
2.40088 272.842 25.6187 264.288 25.6187 244.614 cv
25.6187 238.203 20.4209 233.005 14.0098 233.005 cv
7.59863 233.005 2.40088 238.203 2.40088 244.614 cv
2.40088 238.203 -2.79688 233.005 -9.20801 233.005 cv
-15.6191 233.005 -20.8169 238.203 -20.8169 244.614 cv
-20.8169 264.288 2.40088 272.842 2.40088 272.842 cv
cp
f
129.94 272.842 mo
129.94 272.842 153.158 264.288 153.158 244.614 cv
153.158 238.203 147.96 233.005 141.549 233.005 cv
135.138 233.005 129.94 238.203 129.94 244.614 cv
129.94 238.203 124.743 233.005 118.331 233.005 cv
111.92 233.005 106.723 238.203 106.723 244.614 cv
106.723 264.288 129.94 272.842 129.94 272.842 cv
cp
f
257.48 272.842 mo
257.48 272.842 280.698 264.288 280.698 244.614 cv
280.698 238.203 275.5 233.005 269.089 233.005 cv
262.678 233.005 257.48 238.203 257.48 244.614 cv
257.48 238.203 252.283 233.005 245.872 233.005 cv
239.46 233.005 234.262 238.203 234.262 244.614 cv
234.262 264.288 257.48 272.842 257.48 272.842 cv
cp
f
385.019 272.842 mo
385.019 272.842 408.238 264.288 408.238 244.614 cv
408.238 238.203 403.039 233.005 396.628 233.005 cv
390.217 233.005 385.019 238.203 385.019 244.614 cv
385.019 238.203 379.822 233.005 373.411 233.005 cv
367 233.005 361.802 238.203 361.802 244.614 cv
361.802 264.288 385.019 272.842 385.019 272.842 cv
cp
f
512.559 272.842 mo
512.559 272.842 535.777 264.288 535.777 244.614 cv
535.777 238.203 530.578 233.005 524.168 233.005 cv
517.756 233.005 512.559 238.203 512.559 244.614 cv
512.559 238.203 507.361 233.005 500.949 233.005 cv
494.539 233.005 489.342 238.203 489.342 244.614 cv
489.342 264.288 512.559 272.842 512.559 272.842 cv
cp
f
640.1 272.842 mo
640.1 272.842 663.318 264.288 663.318 244.614 cv
663.318 238.203 658.119 233.005 651.709 233.005 cv
645.297 233.005 640.1 238.203 640.1 244.614 cv
640.1 238.203 634.902 233.005 628.49 233.005 cv
622.08 233.005 616.883 238.203 616.883 244.614 cv
616.883 264.288 640.1 272.842 640.1 272.842 cv
cp
f
48.2686 275.564 mo
41.8574 275.564 36.6597 280.762 36.6597 287.173 cv
36.6597 280.762 31.4619 275.564 25.0508 275.564 cv
18.6396 275.564 13.4419 280.762 13.4419 287.173 cv
13.4419 306.848 36.6597 315.401 36.6597 315.401 cv
36.6597 315.401 59.8774 306.848 59.8774 287.173 cv
59.8774 280.762 54.6797 275.564 48.2686 275.564 cv
cp
f
175.808 275.564 mo
169.397 275.564 164.199 280.762 164.199 287.173 cv
164.199 280.762 159.002 275.564 152.59 275.564 cv
146.179 275.564 140.981 280.762 140.981 287.173 cv
140.981 306.848 164.199 315.401 164.199 315.401 cv
164.199 315.401 187.417 306.848 187.417 287.173 cv
187.417 280.762 182.219 275.564 175.808 275.564 cv
cp
f
303.348 275.564 mo
296.937 275.564 291.739 280.762 291.739 287.173 cv
291.739 280.762 286.542 275.564 280.13 275.564 cv
273.719 275.564 268.521 280.762 268.521 287.173 cv
268.521 306.848 291.739 315.401 291.739 315.401 cv
291.739 315.401 314.956 306.848 314.956 287.173 cv
314.956 280.762 309.759 275.564 303.348 275.564 cv
cp
f
430.887 275.564 mo
424.477 275.564 419.277 280.762 419.277 287.173 cv
419.277 280.762 414.08 275.564 407.67 275.564 cv
401.258 275.564 396.061 280.762 396.061 287.173 cv
396.061 306.848 419.277 315.401 419.277 315.401 cv
419.277 315.401 442.496 306.848 442.496 287.173 cv
442.496 280.762 437.299 275.564 430.887 275.564 cv
cp
f
558.428 275.564 mo
552.016 275.564 546.818 280.762 546.818 287.173 cv
546.818 280.762 541.621 275.564 535.209 275.564 cv
528.799 275.564 523.602 280.762 523.602 287.173 cv
523.602 306.848 546.818 315.401 546.818 315.401 cv
546.818 315.401 570.037 306.848 570.037 287.173 cv
570.037 280.762 564.838 275.564 558.428 275.564 cv
cp
f
685.969 275.564 mo
679.557 275.564 674.359 280.762 674.359 287.173 cv
674.359 280.762 669.162 275.564 662.75 275.564 cv
656.34 275.564 651.143 280.762 651.143 287.173 cv
651.143 306.848 674.359 315.401 674.359 315.401 cv
674.359 315.401 697.578 306.848 697.578 287.173 cv
697.578 280.762 692.379 275.564 685.969 275.564 cv
cp
f
2.40088 362.839 mo
2.40088 362.839 25.6187 354.284 25.6187 334.61 cv
25.6187 328.199 20.4209 323.002 14.0098 323.002 cv
7.59863 323.002 2.40088 328.199 2.40088 334.61 cv
2.40088 328.199 -2.79688 323.002 -9.20801 323.002 cv
-15.6191 323.002 -20.8169 328.199 -20.8169 334.61 cv
-20.8169 354.284 2.40088 362.839 2.40088 362.839 cv
cp
f
129.94 362.839 mo
129.94 362.839 153.158 354.284 153.158 334.61 cv
153.158 328.199 147.96 323.002 141.549 323.002 cv
135.138 323.002 129.94 328.199 129.94 334.61 cv
129.94 328.199 124.743 323.002 118.331 323.002 cv
111.92 323.002 106.723 328.199 106.723 334.61 cv
106.723 354.284 129.94 362.839 129.94 362.839 cv
cp
f
257.48 362.839 mo
257.48 362.839 280.698 354.284 280.698 334.61 cv
280.698 328.199 275.5 323.002 269.089 323.002 cv
262.678 323.002 257.48 328.199 257.48 334.61 cv
257.48 328.199 252.283 323.002 245.872 323.002 cv
239.46 323.002 234.262 328.199 234.262 334.61 cv
234.262 354.284 257.48 362.839 257.48 362.839 cv
cp
f
385.019 362.839 mo
385.019 362.839 408.238 354.284 408.238 334.61 cv
408.238 328.199 403.039 323.002 396.628 323.002 cv
390.217 323.002 385.019 328.199 385.019 334.61 cv
385.019 328.199 379.822 323.002 373.411 323.002 cv
367 323.002 361.802 328.199 361.802 334.61 cv
361.802 354.284 385.019 362.839 385.019 362.839 cv
cp
f
512.559 362.839 mo
512.559 362.839 535.777 354.284 535.777 334.61 cv
535.777 328.199 530.578 323.002 524.168 323.002 cv
517.756 323.002 512.559 328.199 512.559 334.61 cv
512.559 328.199 507.361 323.002 500.949 323.002 cv
494.539 323.002 489.342 328.199 489.342 334.61 cv
489.342 354.284 512.559 362.839 512.559 362.839 cv
cp
f
640.1 362.839 mo
640.1 362.839 663.318 354.284 663.318 334.61 cv
663.318 328.199 658.119 323.002 651.709 323.002 cv
645.297 323.002 640.1 328.199 640.1 334.61 cv
640.1 328.199 634.902 323.002 628.49 323.002 cv
622.08 323.002 616.883 328.199 616.883 334.61 cv
616.883 354.284 640.1 362.839 640.1 362.839 cv
cp
f
48.2686 365.56 mo
41.8574 365.56 36.6597 370.759 36.6597 377.169 cv
36.6597 370.759 31.4619 365.56 25.0508 365.56 cv
18.6396 365.56 13.4419 370.759 13.4419 377.169 cv
13.4419 396.843 36.6597 405.397 36.6597 405.397 cv
36.6597 405.397 59.8774 396.843 59.8774 377.169 cv
59.8774 370.759 54.6797 365.56 48.2686 365.56 cv
cp
f
175.808 365.56 mo
169.397 365.56 164.199 370.759 164.199 377.169 cv
164.199 370.759 159.002 365.56 152.59 365.56 cv
146.179 365.56 140.981 370.759 140.981 377.169 cv
140.981 396.843 164.199 405.397 164.199 405.397 cv
164.199 405.397 187.417 396.843 187.417 377.169 cv
187.417 370.759 182.219 365.56 175.808 365.56 cv
cp
f
303.348 365.56 mo
296.937 365.56 291.739 370.759 291.739 377.169 cv
291.739 370.759 286.542 365.56 280.13 365.56 cv
273.719 365.56 268.521 370.759 268.521 377.169 cv
268.521 396.843 291.739 405.397 291.739 405.397 cv
291.739 405.397 314.956 396.843 314.956 377.169 cv
314.956 370.759 309.759 365.56 303.348 365.56 cv
cp
f
430.887 365.56 mo
424.477 365.56 419.277 370.759 419.277 377.169 cv
419.277 370.759 414.08 365.56 407.67 365.56 cv
401.258 365.56 396.061 370.759 396.061 377.169 cv
396.061 396.843 419.277 405.397 419.277 405.397 cv
419.277 405.397 442.496 396.843 442.496 377.169 cv
442.496 370.759 437.299 365.56 430.887 365.56 cv
cp
f
558.428 365.56 mo
552.016 365.56 546.818 370.759 546.818 377.169 cv
546.818 370.759 541.621 365.56 535.209 365.56 cv
528.799 365.56 523.602 370.759 523.602 377.169 cv
523.602 396.843 546.818 405.397 546.818 405.397 cv
546.818 405.397 570.037 396.843 570.037 377.169 cv
570.037 370.759 564.838 365.56 558.428 365.56 cv
cp
f
685.969 365.56 mo
679.557 365.56 674.359 370.759 674.359 377.169 cv
674.359 370.759 669.162 365.56 662.75 365.56 cv
656.34 365.56 651.143 370.759 651.143 377.169 cv
651.143 396.843 674.359 405.397 674.359 405.397 cv
674.359 405.397 697.578 396.843 697.578 377.169 cv
697.578 370.759 692.379 365.56 685.969 365.56 cv
cp
f
2.40088 452.835 mo
2.40088 452.835 25.6187 444.28 25.6187 424.606 cv
25.6187 418.194 20.4209 412.997 14.0098 412.997 cv
7.59863 412.997 2.40088 418.194 2.40088 424.606 cv
2.40088 418.194 -2.79688 412.997 -9.20801 412.997 cv
-15.6191 412.997 -20.8169 418.194 -20.8169 424.606 cv
-20.8169 444.28 2.40088 452.835 2.40088 452.835 cv
cp
f
129.94 452.835 mo
129.94 452.835 153.158 444.28 153.158 424.606 cv
153.158 418.194 147.96 412.997 141.549 412.997 cv
135.138 412.997 129.94 418.194 129.94 424.606 cv
129.94 418.194 124.743 412.997 118.331 412.997 cv
111.92 412.997 106.723 418.194 106.723 424.606 cv
106.723 444.28 129.94 452.835 129.94 452.835 cv
cp
f
257.48 452.835 mo
257.48 452.835 280.698 444.28 280.698 424.606 cv
280.698 418.194 275.5 412.997 269.089 412.997 cv
262.678 412.997 257.48 418.194 257.48 424.606 cv
257.48 418.194 252.283 412.997 245.872 412.997 cv
239.46 412.997 234.262 418.194 234.262 424.606 cv
234.262 444.28 257.48 452.835 257.48 452.835 cv
cp
f
385.019 452.835 mo
385.019 452.835 408.238 444.28 408.238 424.606 cv
408.238 418.194 403.039 412.997 396.628 412.997 cv
390.217 412.997 385.019 418.194 385.019 424.606 cv
385.019 418.194 379.822 412.997 373.411 412.997 cv
367 412.997 361.802 418.194 361.802 424.606 cv
361.802 444.28 385.019 452.835 385.019 452.835 cv
cp
f
512.559 452.835 mo
512.559 452.835 535.777 444.28 535.777 424.606 cv
535.777 418.194 530.578 412.997 524.168 412.997 cv
517.756 412.997 512.559 418.194 512.559 424.606 cv
512.559 418.194 507.361 412.997 500.949 412.997 cv
494.539 412.997 489.342 418.194 489.342 424.606 cv
489.342 444.28 512.559 452.835 512.559 452.835 cv
cp
f
640.1 452.835 mo
640.1 452.835 663.318 444.28 663.318 424.606 cv
663.318 418.194 658.119 412.997 651.709 412.997 cv
645.297 412.997 640.1 418.194 640.1 424.606 cv
640.1 418.194 634.902 412.997 628.49 412.997 cv
622.08 412.997 616.883 418.194 616.883 424.606 cv
616.883 444.28 640.1 452.835 640.1 452.835 cv
cp
f
48.2686 455.556 mo
41.8574 455.556 36.6597 460.755 36.6597 467.165 cv
36.6597 460.755 31.4619 455.556 25.0508 455.556 cv
18.6396 455.556 13.4419 460.755 13.4419 467.165 cv
13.4419 486.839 36.6597 495.393 36.6597 495.393 cv
36.6597 495.393 59.8774 486.839 59.8774 467.165 cv
59.8774 460.755 54.6797 455.556 48.2686 455.556 cv
cp
f
175.808 455.556 mo
169.397 455.556 164.199 460.755 164.199 467.165 cv
164.199 460.755 159.002 455.556 152.59 455.556 cv
146.179 455.556 140.981 460.755 140.981 467.165 cv
140.981 486.839 164.199 495.393 164.199 495.393 cv
164.199 495.393 187.417 486.839 187.417 467.165 cv
187.417 460.755 182.219 455.556 175.808 455.556 cv
cp
f
303.348 455.556 mo
296.937 455.556 291.739 460.755 291.739 467.165 cv
291.739 460.755 286.542 455.556 280.13 455.556 cv
273.719 455.556 268.521 460.755 268.521 467.165 cv
268.521 486.839 291.739 495.393 291.739 495.393 cv
291.739 495.393 314.956 486.839 314.956 467.165 cv
314.956 460.755 309.759 455.556 303.348 455.556 cv
cp
f
430.887 455.556 mo
424.477 455.556 419.277 460.755 419.277 467.165 cv
419.277 460.755 414.08 455.556 407.67 455.556 cv
401.258 455.556 396.061 460.755 396.061 467.165 cv
396.061 486.839 419.277 495.393 419.277 495.393 cv
419.277 495.393 442.496 486.839 442.496 467.165 cv
442.496 460.755 437.299 455.556 430.887 455.556 cv
cp
f
558.428 455.556 mo
552.016 455.556 546.818 460.755 546.818 467.165 cv
546.818 460.755 541.621 455.556 535.209 455.556 cv
528.799 455.556 523.602 460.755 523.602 467.165 cv
523.602 486.839 546.818 495.393 546.818 495.393 cv
546.818 495.393 570.037 486.839 570.037 467.165 cv
570.037 460.755 564.838 455.556 558.428 455.556 cv
cp
f
685.969 455.556 mo
679.557 455.556 674.359 460.755 674.359 467.165 cv
674.359 460.755 669.162 455.556 662.75 455.556 cv
656.34 455.556 651.143 460.755 651.143 467.165 cv
651.143 486.839 674.359 495.393 674.359 495.393 cv
674.359 495.393 697.578 486.839 697.578 467.165 cv
697.578 460.755 692.379 455.556 685.969 455.556 cv
cp
f
2.40088 542.831 mo
2.40088 542.831 25.6187 534.276 25.6187 514.602 cv
25.6187 508.19 20.4209 502.993 14.0098 502.993 cv
7.59863 502.993 2.40088 508.19 2.40088 514.602 cv
2.40088 508.19 -2.79688 502.993 -9.20801 502.993 cv
-15.6191 502.993 -20.8169 508.19 -20.8169 514.602 cv
-20.8169 534.276 2.40088 542.831 2.40088 542.831 cv
cp
f
129.94 542.831 mo
129.94 542.831 153.158 534.276 153.158 514.602 cv
153.158 508.19 147.96 502.993 141.549 502.993 cv
135.138 502.993 129.94 508.19 129.94 514.602 cv
129.94 508.19 124.743 502.993 118.331 502.993 cv
111.92 502.993 106.723 508.19 106.723 514.602 cv
106.723 534.276 129.94 542.831 129.94 542.831 cv
cp
f
257.48 542.831 mo
257.48 542.831 280.698 534.276 280.698 514.602 cv
280.698 508.19 275.5 502.993 269.089 502.993 cv
262.678 502.993 257.48 508.19 257.48 514.602 cv
257.48 508.19 252.283 502.993 245.872 502.993 cv
239.46 502.993 234.262 508.19 234.262 514.602 cv
234.262 534.276 257.48 542.831 257.48 542.831 cv
cp
f
385.019 542.831 mo
385.019 542.831 408.238 534.276 408.238 514.602 cv
408.238 508.19 403.039 502.993 396.628 502.993 cv
390.217 502.993 385.019 508.19 385.019 514.602 cv
385.019 508.19 379.822 502.993 373.411 502.993 cv
367 502.993 361.802 508.19 361.802 514.602 cv
361.802 534.276 385.019 542.831 385.019 542.831 cv
cp
f
512.559 542.831 mo
512.559 542.831 535.777 534.276 535.777 514.602 cv
535.777 508.19 530.578 502.993 524.168 502.993 cv
517.756 502.993 512.559 508.19 512.559 514.602 cv
512.559 508.19 507.361 502.993 500.949 502.993 cv
494.539 502.993 489.342 508.19 489.342 514.602 cv
489.342 534.276 512.559 542.831 512.559 542.831 cv
cp
f
640.1 542.831 mo
640.1 542.831 663.318 534.276 663.318 514.602 cv
663.318 508.19 658.119 502.993 651.709 502.993 cv
645.297 502.993 640.1 508.19 640.1 514.602 cv
640.1 508.19 634.902 502.993 628.49 502.993 cv
622.08 502.993 616.883 508.19 616.883 514.602 cv
616.883 534.276 640.1 542.831 640.1 542.831 cv
cp
f
48.2686 545.552 mo
41.8574 545.552 36.6597 550.751 36.6597 557.161 cv
36.6597 550.751 31.4619 545.552 25.0508 545.552 cv
18.6396 545.552 13.4419 550.751 13.4419 557.161 cv
13.4419 576.835 36.6597 585.39 36.6597 585.39 cv
36.6597 585.39 59.8774 576.835 59.8774 557.161 cv
59.8774 550.751 54.6797 545.552 48.2686 545.552 cv
cp
f
175.808 545.552 mo
169.397 545.552 164.199 550.751 164.199 557.161 cv
164.199 550.751 159.002 545.552 152.59 545.552 cv
146.179 545.552 140.981 550.751 140.981 557.161 cv
140.981 576.835 164.199 585.39 164.199 585.39 cv
164.199 585.39 187.417 576.835 187.417 557.161 cv
187.417 550.751 182.219 545.552 175.808 545.552 cv
cp
f
303.348 545.552 mo
296.937 545.552 291.739 550.751 291.739 557.161 cv
291.739 550.751 286.542 545.552 280.13 545.552 cv
273.719 545.552 268.521 550.751 268.521 557.161 cv
268.521 576.835 291.739 585.39 291.739 585.39 cv
291.739 585.39 314.956 576.835 314.956 557.161 cv
314.956 550.751 309.759 545.552 303.348 545.552 cv
cp
f
430.887 545.552 mo
424.477 545.552 419.277 550.751 419.277 557.161 cv
419.277 550.751 414.08 545.552 407.67 545.552 cv
401.258 545.552 396.061 550.751 396.061 557.161 cv
396.061 576.835 419.277 585.39 419.277 585.39 cv
419.277 585.39 442.496 576.835 442.496 557.161 cv
442.496 550.751 437.299 545.552 430.887 545.552 cv
cp
f
558.428 545.552 mo
552.016 545.552 546.818 550.751 546.818 557.161 cv
546.818 550.751 541.621 545.552 535.209 545.552 cv
528.799 545.552 523.602 550.751 523.602 557.161 cv
523.602 576.835 546.818 585.39 546.818 585.39 cv
546.818 585.39 570.037 576.835 570.037 557.161 cv
570.037 550.751 564.838 545.552 558.428 545.552 cv
cp
f
685.969 545.552 mo
679.557 545.552 674.359 550.751 674.359 557.161 cv
674.359 550.751 669.162 545.552 662.75 545.552 cv
656.34 545.552 651.143 550.751 651.143 557.161 cv
651.143 576.835 674.359 585.39 674.359 585.39 cv
674.359 585.39 697.578 576.835 697.578 557.161 cv
697.578 550.751 692.379 545.552 685.969 545.552 cv
cp
f
2.40088 632.827 mo
2.40088 632.827 25.6187 624.272 25.6187 604.599 cv
25.6187 598.187 20.4209 592.989 14.0098 592.989 cv
7.59863 592.989 2.40088 598.187 2.40088 604.599 cv
2.40088 598.187 -2.79688 592.989 -9.20801 592.989 cv
-15.6191 592.989 -20.8169 598.187 -20.8169 604.599 cv
-20.8169 624.272 2.40088 632.827 2.40088 632.827 cv
cp
f
129.94 632.827 mo
129.94 632.827 153.158 624.272 153.158 604.599 cv
153.158 598.187 147.96 592.989 141.549 592.989 cv
135.138 592.989 129.94 598.187 129.94 604.599 cv
129.94 598.187 124.743 592.989 118.331 592.989 cv
111.92 592.989 106.723 598.187 106.723 604.599 cv
106.723 624.272 129.94 632.827 129.94 632.827 cv
cp
f
257.48 632.827 mo
257.48 632.827 280.698 624.272 280.698 604.599 cv
280.698 598.187 275.5 592.989 269.089 592.989 cv
262.678 592.989 257.48 598.187 257.48 604.599 cv
257.48 598.187 252.283 592.989 245.872 592.989 cv
239.46 592.989 234.262 598.187 234.262 604.599 cv
234.262 624.272 257.48 632.827 257.48 632.827 cv
cp
f
385.019 632.827 mo
385.019 632.827 408.238 624.272 408.238 604.599 cv
408.238 598.187 403.039 592.989 396.628 592.989 cv
390.217 592.989 385.019 598.187 385.019 604.599 cv
385.019 598.187 379.822 592.989 373.411 592.989 cv
367 592.989 361.802 598.187 361.802 604.599 cv
361.802 624.272 385.019 632.827 385.019 632.827 cv
cp
f
512.559 632.827 mo
512.559 632.827 535.777 624.272 535.777 604.599 cv
535.777 598.187 530.578 592.989 524.168 592.989 cv
517.756 592.989 512.559 598.187 512.559 604.599 cv
512.559 598.187 507.361 592.989 500.949 592.989 cv
494.539 592.989 489.342 598.187 489.342 604.599 cv
489.342 624.272 512.559 632.827 512.559 632.827 cv
cp
f
640.1 632.827 mo
640.1 632.827 663.318 624.272 663.318 604.599 cv
663.318 598.187 658.119 592.989 651.709 592.989 cv
645.297 592.989 640.1 598.187 640.1 604.599 cv
640.1 598.187 634.902 592.989 628.49 592.989 cv
622.08 592.989 616.883 598.187 616.883 604.599 cv
616.883 624.272 640.1 632.827 640.1 632.827 cv
cp
f
48.2686 635.548 mo
41.8574 635.548 36.6597 640.747 36.6597 647.157 cv
36.6597 640.747 31.4619 635.548 25.0508 635.548 cv
18.6396 635.548 13.4419 640.747 13.4419 647.157 cv
13.4419 666.831 36.6597 675.386 36.6597 675.386 cv
36.6597 675.386 59.8774 666.831 59.8774 647.157 cv
59.8774 640.747 54.6797 635.548 48.2686 635.548 cv
cp
f
175.808 635.548 mo
169.397 635.548 164.199 640.747 164.199 647.157 cv
164.199 640.747 159.002 635.548 152.59 635.548 cv
146.179 635.548 140.981 640.747 140.981 647.157 cv
140.981 666.831 164.199 675.386 164.199 675.386 cv
164.199 675.386 187.417 666.831 187.417 647.157 cv
187.417 640.747 182.219 635.548 175.808 635.548 cv
cp
f
303.348 635.548 mo
296.937 635.548 291.739 640.747 291.739 647.157 cv
291.739 640.747 286.542 635.548 280.13 635.548 cv
273.719 635.548 268.521 640.747 268.521 647.157 cv
268.521 666.831 291.739 675.386 291.739 675.386 cv
291.739 675.386 314.956 666.831 314.956 647.157 cv
314.956 640.747 309.759 635.548 303.348 635.548 cv
cp
f
430.887 635.548 mo
424.477 635.548 419.277 640.747 419.277 647.157 cv
419.277 640.747 414.08 635.548 407.67 635.548 cv
401.258 635.548 396.061 640.747 396.061 647.157 cv
396.061 666.831 419.277 675.386 419.277 675.386 cv
419.277 675.386 442.496 666.831 442.496 647.157 cv
442.496 640.747 437.299 635.548 430.887 635.548 cv
cp
f
558.428 635.548 mo
552.016 635.548 546.818 640.747 546.818 647.157 cv
546.818 640.747 541.621 635.548 535.209 635.548 cv
528.799 635.548 523.602 640.747 523.602 647.157 cv
523.602 666.831 546.818 675.386 546.818 675.386 cv
546.818 675.386 570.037 666.831 570.037 647.157 cv
570.037 640.747 564.838 635.548 558.428 635.548 cv
cp
f
685.969 635.548 mo
679.557 635.548 674.359 640.747 674.359 647.157 cv
674.359 640.747 669.162 635.548 662.75 635.548 cv
656.34 635.548 651.143 640.747 651.143 647.157 cv
651.143 666.831 674.359 675.386 674.359 675.386 cv
674.359 675.386 697.578 666.831 697.578 647.157 cv
697.578 640.747 692.379 635.548 685.969 635.548 cv
cp
f
2.40088 722.823 mo
2.40088 722.823 25.6187 714.268 25.6187 694.595 cv
25.6187 688.183 20.4209 682.985 14.0098 682.985 cv
7.59863 682.985 2.40088 688.183 2.40088 694.595 cv
2.40088 688.183 -2.79688 682.985 -9.20801 682.985 cv
-15.6191 682.985 -20.8169 688.183 -20.8169 694.595 cv
-20.8169 714.268 2.40088 722.823 2.40088 722.823 cv
cp
f
129.94 722.823 mo
129.94 722.823 153.158 714.268 153.158 694.595 cv
153.158 688.183 147.96 682.985 141.549 682.985 cv
135.138 682.985 129.94 688.183 129.94 694.595 cv
129.94 688.183 124.743 682.985 118.331 682.985 cv
111.92 682.985 106.723 688.183 106.723 694.595 cv
106.723 714.268 129.94 722.823 129.94 722.823 cv
cp
f
257.48 722.823 mo
257.48 722.823 280.698 714.268 280.698 694.595 cv
280.698 688.183 275.5 682.985 269.089 682.985 cv
262.678 682.985 257.48 688.183 257.48 694.595 cv
257.48 688.183 252.283 682.985 245.872 682.985 cv
239.46 682.985 234.262 688.183 234.262 694.595 cv
234.262 714.268 257.48 722.823 257.48 722.823 cv
cp
f
385.019 722.823 mo
385.019 722.823 408.238 714.268 408.238 694.595 cv
408.238 688.183 403.039 682.985 396.628 682.985 cv
390.217 682.985 385.019 688.183 385.019 694.595 cv
385.019 688.183 379.822 682.985 373.411 682.985 cv
367 682.985 361.802 688.183 361.802 694.595 cv
361.802 714.268 385.019 722.823 385.019 722.823 cv
cp
f
512.559 722.823 mo
512.559 722.823 535.777 714.268 535.777 694.595 cv
535.777 688.183 530.578 682.985 524.168 682.985 cv
517.756 682.985 512.559 688.183 512.559 694.595 cv
512.559 688.183 507.361 682.985 500.949 682.985 cv
494.539 682.985 489.342 688.183 489.342 694.595 cv
489.342 714.268 512.559 722.823 512.559 722.823 cv
cp
f
640.1 722.823 mo
640.1 722.823 663.318 714.268 663.318 694.595 cv
663.318 688.183 658.119 682.985 651.709 682.985 cv
645.297 682.985 640.1 688.183 640.1 694.595 cv
640.1 688.183 634.902 682.985 628.49 682.985 cv
622.08 682.985 616.883 688.183 616.883 694.595 cv
616.883 714.268 640.1 722.823 640.1 722.823 cv
cp
f
48.2686 725.544 mo
41.8574 725.544 36.6597 730.743 36.6597 737.153 cv
36.6597 730.743 31.4619 725.544 25.0508 725.544 cv
18.6396 725.544 13.4419 730.743 13.4419 737.153 cv
13.4419 756.827 36.6597 765.382 36.6597 765.382 cv
36.6597 765.382 59.8774 756.827 59.8774 737.153 cv
59.8774 730.743 54.6797 725.544 48.2686 725.544 cv
cp
f
175.808 725.544 mo
169.397 725.544 164.199 730.743 164.199 737.153 cv
164.199 730.743 159.002 725.544 152.59 725.544 cv
146.179 725.544 140.981 730.743 140.981 737.153 cv
140.981 756.827 164.199 765.382 164.199 765.382 cv
164.199 765.382 187.417 756.827 187.417 737.153 cv
187.417 730.743 182.219 725.544 175.808 725.544 cv
cp
f
303.348 725.544 mo
296.937 725.544 291.739 730.743 291.739 737.153 cv
291.739 730.743 286.542 725.544 280.13 725.544 cv
273.719 725.544 268.521 730.743 268.521 737.153 cv
268.521 756.827 291.739 765.382 291.739 765.382 cv
291.739 765.382 314.956 756.827 314.956 737.153 cv
314.956 730.743 309.759 725.544 303.348 725.544 cv
cp
f
430.887 725.544 mo
424.477 725.544 419.277 730.743 419.277 737.153 cv
419.277 730.743 414.08 725.544 407.67 725.544 cv
401.258 725.544 396.061 730.743 396.061 737.153 cv
396.061 756.827 419.277 765.382 419.277 765.382 cv
419.277 765.382 442.496 756.827 442.496 737.153 cv
442.496 730.743 437.299 725.544 430.887 725.544 cv
cp
f
558.428 725.544 mo
552.016 725.544 546.818 730.743 546.818 737.153 cv
546.818 730.743 541.621 725.544 535.209 725.544 cv
528.799 725.544 523.602 730.743 523.602 737.153 cv
523.602 756.827 546.818 765.382 546.818 765.382 cv
546.818 765.382 570.037 756.827 570.037 737.153 cv
570.037 730.743 564.838 725.544 558.428 725.544 cv
cp
f
685.969 725.544 mo
679.557 725.544 674.359 730.743 674.359 737.153 cv
674.359 730.743 669.162 725.544 662.75 725.544 cv
656.34 725.544 651.143 730.743 651.143 737.153 cv
651.143 756.827 674.359 765.382 674.359 765.382 cv
674.359 765.382 697.578 756.827 697.578 737.153 cv
697.578 730.743 692.379 725.544 685.969 725.544 cv
cp
f
767.672 92.8506 mo
767.672 92.8506 790.889 84.2969 790.889 64.623 cv
790.889 58.2114 785.691 53.0141 779.28 53.0141 cv
772.869 53.0141 767.672 58.2114 767.672 64.623 cv
767.672 58.2114 762.474 53.0141 756.063 53.0141 cv
749.651 53.0141 744.453 58.2114 744.453 64.623 cv
744.453 84.2969 767.672 92.8506 767.672 92.8506 cv
cp
f
779.28 143.01 mo
772.869 143.01 767.672 148.207 767.672 154.619 cv
767.672 148.207 762.474 143.01 756.063 143.01 cv
749.651 143.01 744.453 148.207 744.453 154.619 cv
744.453 174.292 767.672 182.846 767.672 182.846 cv
767.672 182.846 790.889 174.292 790.889 154.619 cv
790.889 148.207 785.691 143.01 779.28 143.01 cv
cp
f
779.28 233.005 mo
772.869 233.005 767.672 238.203 767.672 244.614 cv
767.672 238.203 762.474 233.005 756.063 233.005 cv
749.651 233.005 744.453 238.203 744.453 244.614 cv
744.453 264.288 767.672 272.842 767.672 272.842 cv
767.672 272.842 790.889 264.288 790.889 244.614 cv
790.889 238.203 785.691 233.005 779.28 233.005 cv
cp
f
779.28 323.002 mo
772.869 323.002 767.672 328.199 767.672 334.61 cv
767.672 328.199 762.474 323.002 756.063 323.002 cv
749.651 323.002 744.453 328.199 744.453 334.61 cv
744.453 354.284 767.672 362.839 767.672 362.839 cv
767.672 362.839 790.889 354.284 790.889 334.61 cv
790.889 328.199 785.691 323.002 779.28 323.002 cv
cp
f
779.28 412.997 mo
772.869 412.997 767.672 418.194 767.672 424.606 cv
767.672 418.194 762.474 412.997 756.063 412.997 cv
749.651 412.997 744.453 418.194 744.453 424.606 cv
744.453 444.28 767.672 452.835 767.672 452.835 cv
767.672 452.835 790.889 444.28 790.889 424.606 cv
790.889 418.194 785.691 412.997 779.28 412.997 cv
cp
f
779.28 502.993 mo
772.869 502.993 767.672 508.19 767.672 514.602 cv
767.672 508.19 762.474 502.993 756.063 502.993 cv
749.651 502.993 744.453 508.19 744.453 514.602 cv
744.453 534.276 767.672 542.831 767.672 542.831 cv
767.672 542.831 790.889 534.276 790.889 514.602 cv
790.889 508.19 785.691 502.993 779.28 502.993 cv
cp
f
779.28 592.989 mo
772.869 592.989 767.672 598.187 767.672 604.599 cv
767.672 598.187 762.474 592.989 756.063 592.989 cv
749.651 592.989 744.453 598.187 744.453 604.599 cv
744.453 624.272 767.672 632.827 767.672 632.827 cv
767.672 632.827 790.889 624.272 790.889 604.599 cv
790.889 598.187 785.691 592.989 779.28 592.989 cv
cp
f
779.28 682.985 mo
772.869 682.985 767.672 688.183 767.672 694.595 cv
767.672 688.183 762.474 682.985 756.063 682.985 cv
749.651 682.985 744.453 688.183 744.453 694.595 cv
744.453 714.268 767.672 722.823 767.672 722.823 cv
767.672 722.823 790.889 714.268 790.889 694.595 cv
790.889 688.183 785.691 682.985 779.28 682.985 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (Tomi) ()
%%Title: (heart2.eps)
%%CreationDate: 10/3/2014 1:11 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6HZL/cZ6stu<eS1S7r6BY:Y_^gU#+m6DaZfQ4tG@pbO[\J45jk8/W%MY2n.JIa61q/bQRKfH??VgoW7cQZ:pZ[U/Ca(,EYOp
%!;u8/oDR_;qI]J>^Al4iP@X6YWj52r<>5-)g$aCaa.)P,&)@ra[&W[:P*OLn9U\O.:#LpnZ.r\LhJIJW=,6b)p>KGb^YKtQ^6gI#
%h<ZKGCu3!82NrXFhVR[MJ^h$0M]^P0\(gTTE47i&b%X2Zlppp)T,o+<Hk_&WH1g4LG9D4F4WZm0a;'p=DXkudrHJ,s&5T>N8KI`D
%XI?H?k_CEX;u!%X>a\AOqqLl"G;g&Q_rc3Mhu3NJR*Y-bd_GPLp3u'%!,q^Cio'V@r]"%uhejKRO'\N:VLfnN^RnmLs52nLH^$Y>
%Vb/?g7o'a=s-p&X^s<CDs(Se,:\\ulaX4QJc`:,?Hq3H8PfY1(i6Q-4JEsiJ-(g<_=M-k7n*Y*Qa">hT<nGf0nfk,-pn.M='12q#
%_ADl%0Cu98]I97kRakD!WTn;'A-IeSKI#M4g'Y8Qhe[f<@e.S,k'D@[<B`Ja?f1bd<,GVMe"h$:i-^^q$,1o%h&cR&]/`2DQ6^6n
%eU4^<hVN]ID)5_0^>2UY0Y$B)OQ)&?iSF25NHfsMLc+eCUe^]'h`fo1h#+b&k39`U^:W:jIb=[g<.9sq:fdtR=:UVL^iru1)k)V)
%KrIqp&O29tk%lQLXB3bZ^H:5`]@hT5'jW-jC%^LfLRW'rcVU@Ds+`:%C\-BOG>K$)+-5.slgE1C(Z1UOO\EN8NGi1kXr$ssXG[>]
%FUlZF#JK5Bs"=4LJ"aVC(6A1j%LIU^Fq5\)fjVnHT7-&*<r_s[p(@<!eRAK&s7PgIrqWnHB%Qo=gW?(s=3(7?CA3&Fh4&nL?[b68
%N-amPLVr6]npoUDc#e#Js8+Si!m\],ir9@XV-i3]Dt3joHldSc=;T5t938`t\$u6]PHdY:]BdRG2M_0&14OGYfkh34qLdl-o&aT[
%b6EhtF'%$`fg>#8LI.^G;4?&d:*_NC]'*.`j86srG.YA8OPKf</`j\8Ot9u?HM;$$Hh22()-VmpI%b`(m:#bFcDu58I!@mO@DBS-
%K(')`T<sal8,nuQjs?2#mfi4$:H.mak4\N2h-kC)roU46s.7!KMZu@l;(K5P;X\sBr$QbmpCj1IHajZiY&D,N%<Up"BjUhF3F9B(
%oCD%J3S\GsoL5k<[l6AcFXO@7DiS&(YPm9?H?>A&ml0th`ft8&;Y)JhKE8q"!&%ZK*ZFUkHtQB*FkBsV^tA5^(iF9mTWeFN4#A:R
%X.S;jI8UpXZH<%@q6Rh!Ig1p;;jD&c5?1,jI`grM.e'>cCPnk&T3PEn"j($7MUK\r,&^;Whu,N!4E4t&\Hun-iS5cMfnAscE)r0a
%'DQ;G\.;/_q;FmCitGu_Is;UNMC2E*GVZt(<%Y<(I&W*r)sfg7rcS\;rqGVc:&]P3D?oU\(0bdN(`gLdgMrKX=dJn.8/h.#i2=5d
%Eb^8M<k=fi=]4@8UEB%VnZ=MHI?RX"hL>]oo6E&DkOlKUcfWFHC6:(&,$X,d@Sn`B`G@89//RV`Z:pV<11(g?$D)Q(>=.?2Ek,AV
%=32ptAZL2YXND:AYc:asC'G2Z"qMt^q60I+]h[L*oVCHfi5'naqC)qN&cRLa5CY$.gn`*0PL?pg0R%n;K("?$o%0$Gcj=e^c/th^
%N1L5q`i#Q/KVtIj#A!V*n2PZU<O,lYZWc?)'FpGIo4LlD%?sL[j\s#p5\]=VAf6h<\o^c#n1</c@f4RS^ZJA,ZUFuX>es?*R28]j
%3L#$er7N9JRW+0q^4lk,L"F*Fk&[K!):V\MYM^k'p'Rb9CnAKGec"BQXX<NsHMIN>:B;nm>5t"\rh!%/3TZRUD[$)?LAul,j.GDi
%>Z1CDjPeuI]ER.S>DI^e)[^iss"4=+rWFN*S&*FW=[V*>XJ5/mQIC%Ihenb<GI)&8n@`Z#blYVKAd7-H+,B<Zad]ZZi#?9'NGB0*
%`$Kdal<-9*n%,[[.I4W!lE!bHUit9,Wb;kG5-#fYWiA\T3^o<6Y"Gaj>[ul\MfMkDSj+`pZ766,nhMe\dQrM=MM5f6'p'U:!Pboa
%/Wq="='4EX%'pp[QUC5bnLMjmc3Ff$"dKEH%goqjAm([)=cntPSu#SU\L`:9[YBOB87taZ9j5GYQ'Q-U(2;(%$7/V9WV@ipP&X;N
%=>DBTQUN<lVPt.CPYOfHKB;-c"A3<d9b^2)b6ROq^U=(k_h6*A8YrhiZ<C1P;$.7RL1Q+9L*e:'E_E+e*0f3h>X=4KT^3H.r(mPF
%^T&ia"9EE)i(;&o\s>!>CdbugX&,6FQ)?,PFE6So@&t-rZqRI-bB3uZ$le^fPUi&9Sn4U#f2/cr:pMl.e`Y8WA?fsW'Yb8985&/_
%fMNQ?m778EJZ4DX0NuurYu;r)/B.gOE'fg"&+nBtL$&QQ\5p^LADTe;I9;YDn5c5*CQO\o_#?QnIU?L_U>@`)^/I@:8YIG<%fo$n
%r?;=d=PNGYJKB?DhgoM5F]eJ5:2PChF]:^;;%&/*_)c;'2F>$13e16=jki>fQVd)fP^EPo^4c4HbIaRu:.&/;T`*/&l\2bTjm/ju
%=.t;@d5n3.BF)&*'.MsqPVSO\Q8CId:tG.$n>,V7I%UsSoR-9Ij>cF'^/b9$53]j=oTaM?a>'Adl@2h:ca*:Jhui`iSS(.UbQaZY
%5*2Q=<Y%=C^f0qiOCL$7j9&19n:]@*qJ+`%5<Ve<X[3>&q5qHG^a+qT0nWMcD7Ke]JOZtcBU\,2g7_/,]16K]JV<f`6'":#%c/Np
%2;"XXm*ZmMblXurMHlm/RLP8cd+rB*.&!9`0QQ+(0uoCZqB&nT2*coJ6`-5-cXEW(?<VrO6u1J+eO80&J8km3.6(:/F:S.)A."&*
%^Im_UBR^s@>bLO=a>0rV2-#/WTu=`%A<87#K-f4B)JfW3pGlCQ-.mULr_SG2Ju2pYEZ.eJ)CK8<0kN9%/moq*pZhR\C5jGm4=SpZ
%S47-2HR]kf@/-J$HOaQ8P+8g82(1uTHj8V66"=,Q$-<t`B*`>1!j(8l4U#Sf%L\Q7#_Z3@G>XR-0a!oU!6_pCXe]!GI6+?#?^$K!
%i_!r>PM3(:k2ooa<+iqbTFRd3Hu1I3VG^boTn[snptAkDc/_bQ%G/\mB;%ebe3thZ0]tJ&23:Dof2D0Am_6nnM1^gdhD6VH[?S!N
%j[r-i+_Bu8>^`S0>b^/KXO,QD?S`)]MCQh$jtLtplsd]+q*c36(a[E])Ob4g@,+u69Z-C*"3/?DAfD3(2\n1+E-B5%9r&*%%@h.6
%WE/Bpa*YX;b1>MXY!9;ts,]=&me+eR2)Mn=?]%YD+7d<iHINa(]g#!C.f3a,C6;0[bN>0,q.@&0B&5TOh\B=5$K^]-LUJBK(4EPM
%q69XfRQOa>,=U[eTg;sOh0KTK:89lrKHA,S=r'6-KRDMhq6oM@Hge$ohH>`M)0i[VS'=2in!O2kj-q@O2hQ:c+O@,4c`D_!>m(\S
%OcQ^nhe^.-N,0ScU$6^V2S)n5BYrf-.ujr>$FHPA8<0Ig_rIjON;<)ZRqj#4ehY6R<A/$ERYMJh#)/lu',ClQ^C7grGo8Bon5uFb
%qN3'/[<4URU(JZ9EC9b+^Eepr7K<Blq'E3,?daI>,,,&9/*5ds78EV..\@TDgN&6IKGm$_(!"rpBQY](iY\-j4l_2q*+KYu*h9Hl
%Ver0Pm*H4G]+jUrS[G@P8,%(@5OU3QVil)$-qF<!WL:ZJNhQ[S[@h.MSeXC*<EP1>kIVcq+c@m63B[O/d/X'Oc;+QZA=aQFg?HlE
%,.qOH^F1p*d11QTpk5g7qubN@->!r:aXC>U;hPH!RY4Tj`Q+H_)?p'!NO9!)?:1t7(kI'j-U_Y!_$ThT,n5orkE,KH0ch<'9!/JZ
%;V>^(iKhNTI\&c>7Anj8G36p$:FdLKUL_8<H00\:"*1J<4S?gol$FOCrG?`?RE&*Mr+90\@kHF.U?b7U/I'i9YUTNO_qPW93S8LW
%O/d)CZX?#5Qh!&1lcmHKCtk_-'UQq_%k+Md$Q_T$*lC+m)=Q=_-kb[U0Gf,l<4ie2P8*A]"L#fA]a_s8]_=JuIZF7flj:WH8F2H5
%amge1rqElAaeDW`R\O"g.\giq`b-?rGm*Srlo_3<OTn#h%6ajSkkt\R3Ui!Zc\VOIR6;%KKo9\pIdcJ!m'i&m"("Vp?Hk%r38W/3
%'?nIR@T"%'8JCW]ndl+lnN0-kI4Vmm33\Tkl[h6%+'gHc>VusSl7.%UZOehoNtbb<q4eWo>mE%4H_B6m/;!'LN7Z08VtunDD0fP&
%k)PAXCCYWYZ(K_C0k1a#V"q.c0Zh)*fO#;$;+6:1C$^m*;ROH=1)lL1qV\jtek=\Q9)4hga8JX$%Q!\L,VEJ*%#QaIkdgeu*OlZD
%=j%/h.]agFAK:<:g5OSrAhrArZEh9H$Y:/&H.:&KV'4sj<E:+/!NR#+ih`_?/7c\jKlm\$pp%L>CD-UqA8NN's+",ud]c@&,_37f
%ono#Z*/h%AiP/u5"f%cWlQ>\,TLG2UeY*8L$bSZcM'qA+5%eMK>SHMPjQu*Z4+9UCg$/%qeB!JBB>fKDA'+!*]/0Gq*p<`gj!bMu
%[/VlA[HMOA4J9.'e2.,"`VV6=a6GhG=n#.Pm#_KJ1_p%s#Z1Y`'7cDUm>h.g<JVJ;+_m*r-Wu9*=A/R"/tV(FpkR3LU&S<B:jg-a
%)X(6,RkRCYAS%',2j^he\Fs]u<.7EGb/qA()YnM]s,Lm-Yk<qSOrnCR;sK*0>us"2ATJVf1X!"[R?HYtHUAQ\#sJQY&$J0iV-&m4
%cufRuIDfIY`u#_'bZl2@.7V2PC),H)SFqHXV-+noi10-gcMGmOqm[rtqL$4:-U5mH.VH-.J5s(QTbopP+.^@&j=L(DCK`kn6S,MM
%;9/nY7.f)MjN2'LnhWENH,MFP$%<d^9@-&D;66R9_)eY10)V^mq.*'!:IL8fY;,nH7e"<'I%:'o+#J]tXA3A9[F26`<ad;\#qMJQ
%o!m&a>(lRpQ!Y%jcYBncQ!1q+RYK?k?:Vu+P)C(9hb*-%H'eX/hrPM[7A"4N5$+=A\s<d?>:L]NLOQ'CIc,XQb/=k<03X(^W\\XJ
%,/b)U+cbKUiuB!k6Y+tB`>:A(E?#"o!$ATshkk!B1iO_q[OPum+o^ll#0tF%,k;E9JJenU@=AdIhN$/;F,>0$db=1nKp]?5k^l::
%)q4BU/AY,W>Vnt/oiD)M$]go)/AhmI=)N*Mb]nTp,7r?Kl/>cr$W.30!3";QHKOPQ*;`c:FPVXPAt\f^Nk'DmQ2'+?&B.lMfNo8Q
%ne%k8GSETABU+oo;8*503)gdL%aHPD7d9*"--[^7V24fD^amB)Z19dXI+a\FM0#s\hU5AsSl\atBNZhSQ02+r%]i2eecTd/)JUUS
%k(As#m/\se11F8A=?*'1&4aLbE,V2=W-D+?%]s0If=K[ID]Ztsk==?@BH=7"h9N4g6&scD^7f\cB&JNs)^.`MD.p&W];k+fhR-1c
%;#S^:^h9UM_\^NEg0[55^LiJX6ir]1F.:;J6V6TGH!"j$[.Lp>.h'))&?d_IZs&cA<_Tm'?rn)sCC3i!G4D#QTAe0;&$-`A5'WsF
%lO&*Da0Ronhr>S])OMW:q?"q>^]MRSO"^ZPXY]H/d*Di?Xhi<eGrFmLK:Z^3U\.ML/+iF"Sf.C8+jUYsr/bQI4@`q*Ln?'3850Ks
%jtQS`,0q'N`gHV1q_2ej-4:Je>`iq_%pUpVQT=T[(?Cl@1tO5_GTk!A"!?1e`B66#Zc"snCh,p6g.?3V@!k?b>(\RbJaj<Qn.C"W
%!okL,JIBta$(R"]6o1@jJ<5UfL=9?Nb(XEJMF]okFoR+CESU@+'I^p!bfbmrmN'])eho9MW3R`]]R2ZaHoHg1>7nE(.r?WoXs/t>
%Hl(tb__ntf(t@Ni4r9Yh/R=r0I893on+`jn^XcB+C]YA/^s:")CT,C\dV6NP(k]7WBH%(j##/3I1aW6\e5:nF2[J.`:,e%kd-e2)
%$sSF_!)809Jo:q/Mu0_T*#)"%-mZu"m$uZaeAm2i+d:\Z(02=lqWHAeEUZK1PL4D1<`W^d[tuYjB4O^,0QF3("aB41[p_#/:J/M]
%1'A*Rj>/=nKR^$6io`RV2e\9"-3#X#n3E",s&8)p`sMYWVs4"&j_4[scVU:409B[1272/d%_gT[G/b3^?K*9Y/ogYD9DuRP/cuF/
%0D>8HIiaiBP_mo&1:Zq)q;2_4R1NM"=r)'FfF1,kpg0'hf'd/m]>?N"ng,kCn@,%DqX9/4p5C=:[Eo6XG:?:;s7TDpY[TFd8]b-I
%EAimffK!'^eA`/9kMuj!A3F[r"r0J*%E-s-q?7W0Osm%tZ5u!%Wel1,P/TtGB'Y;^F!;jSa<mQ38;1fj_Yt(Z*"0"s@U^AaTkir^
%Sd\fOd%=s]+^=NAl3!k;-$q7qd#*DtnGnK0PIUf`E9`ukGfpW#$R'!q1oR.6?4nQ*7Q$g%<V?Q,VC!*Y_N)c\5p_=qMh3L`,C@$6
%Jn@<dA3qTK+FArg'($nKb83LooL)Cn&Ae4j'&$TF_dN5WlETB%L"dXOZ*Do3IZ`q=#Xd3)$B6iIPDO[@&176EFrrN:ZinQ"TP>o)
%JR$2BTP>o)!S[F7:plOP!.FE0W*2ecJG/jc<%TD25p*_#Wb"_dI1ruOe$8nOQ^N@5::-tU`(pt.Ab;)]6XtT\W(?I-7*dE1k,i9i
%%kTgoUM&,'U5424rZ8tP05tLq.uTu]HA^9P7Sfik3QH:.BqcuV5T:p/8ns,/^0KZ&[[#3M)_%V;OC_LF(-WWjAO;k<6q>hIP@p:I
%];3t8:SD>4D<_4YeD!,DZO?k&-IhlGU*nKG?m=8(VUdN5ecus`TcTk,^l<^t#r=2]#TIW6ODQ!QZR=OKi3B'ic-pQuGWR:&GT"So
%.rrWh'U]S:+epd?dr:_2>>&@E/p,mFKI8p:!Qm,.F#d'R2M^P-9[H5odii('(t?/Cj@%2]JUX/X`V9AidQg@FKTWjAF%]-7!M\&:
%U5lpl+ecX>:0;1OIZ%?rg@N2)>W.f92R5Fr"M:o1b8\L]WBPY&K@BeUaZ`MngCo!"c(>U06bO'Z>Guf<<1cBQL?X(P*o>\!,im)+
%']+1UX"]+.BkpZhVX>sN\%ZCiVC(0J[%\"(33t*VbJ5`%`!3M`/*cpM;Xm^^gjYHL[t,<J]FCTZY0#Sj50"ksl\t+t]oUnB+2/Kc
%T.GOLUMt9dkTOYR[Ee]gZk@6KB=sD65)\T?XL_c^1XG(1,C:<S4gQq?_[kh\$p=49Vs8VB:M=>5<^r.O-pAem'Fc^_d3n"7U6u-?
%qLlLYFO6\=SoE)eAF/.ZRZm'o$30]cehauLZ^>SFFHIRX0`<O`]-q9"4_`SYRAGI=<Wm#;HRB!ea?92]30cDc;$;noh-'8T%^,S*
%.-131&.4g/Q]kMKM+?8@VReje:@<it^!d;eL#0taT%X:)IG2<$\q?:WBP&WUh5cd`'Ic*uE:sdKd>k]PBi8'\FCE]>gUV7aX0?')
%q:0M!4u6@i?\MMN4LF>jX_7I;ESkqa9g#M2LGi%`eZG6X]cGBS:G"U@$]8MfRT^Dr>p+^7&I#q:YlP<*/D,o_T'ek1nCJ>TMT3Pc
%EY%1R`""Jhe@'B-o.WH":LtBYGjVi2eZO1*jNk`j7m'-I5SD,aKn6P&i+*j/7+%u?&t;^gBcM;S&FZc9dQaW0JEL\Z>JgqL*AcMi
%g<F\Z@"94[M<<T7DO?Rf%<<F,l:qhVL:5QW+@lC4o-LZW;:NbIAJCN\O.oYb0;BZ+Gmq*$GSp[4\e?f>M62'/@GgSZFeBAinHQ,5
%%@3R&%;MR=nc8tu+Kcu@o#D]Xg'aag<#R[:CRc0!(WU4d[ps!CQ@(j7>HqdKfo(n*^gYhb8aXB/Zuk"`Ru0/[ps-P[h)Q^C0RCQ!
%T!\pdQn2(9lI\[[H>0u_ekomXM4Gr9Qi-ch+d]195no[<>+7p8kH#&^ZhDUFrN%je;6Wph<gpGeN0U>!3)_\P(fG-M`#iqd^eebT
%3^QqeCSG8tW`aLkYh$)Y(VFGrg;Sq=ploG13Oq.EE5qf`QMA9IRf2LENV6B]Zah8`8*N3GblVp%DhNqu3kFW+_eUSU.>8a;YI3$/
%lACI)=,C!XC8/T!Q'>/PY3cr<V*!rnGo\JgcbcWRF(@(&%Q%lq<bqh30r*9CZnDe2.aEaL>`!TS!KN\-prJ++fon1s,DhhjjqJK/
%"/QG'brX4nEhWc'e5rlHXG!14;U<.53?t!>g_1A0kWscqQr9t<M)81qV4J?CBL14=>IgX_124!9>@1<%YK?XeWP*WcUMoZ`#tP,o
%d?+UTWV&'\O]QW%lAi%@e7$SkCI*DTBPuCY(1n"iai)9i*NqZ/FCg=??SQ=t9VUUU/`,QOPHCs?aMnmT7b5f]QBt%EeOqtI$/^bV
%QVU7ql\T!e6<#*?W7jY+_D]MlR-$>Qe7?C.m1fqH^TctlM?M[R(K&X"T&u3lc9_mQH<OF!5g'QO)92M"cst\Wl8#ZNSu1Y@Hq-*%
%#VQ+.VQPs596%hbp[7u8=@IB$kB)7#3m^q++[NbYYRKjOlJ*VH%B"6+RE/Oj[M.A<mUKZ)NIrKP8<tD.Ss1dYRm*I1/48`P:J-qH
%Z2@281:/6E+^)efF_620AY8[r65;ZRMF=gT5s6W&c\U16g0aAB8Na%[#@\LQZF!\@iq8^.oX*4nbdn>G3,>W([9&?fk_WB2imfFq
%L*/ulXbt`9:*1kt0>!\G1KqUXI9=^FO,8uAP]DFlT`^Ut(!;1Bf]!;3Z\;eWm.,jt-of-[@`i(3;[@35k6fW,;(]N/P#c3HB;h+`
%$VEEYb0pY!TeK":H7cKj+r8<e;iPaQQsRi:_i,KXOUQqUa@B&mC!p`2pP<!$LVB=#HfgWp;=^!Z_7;tWWEk4c8T$QD6F\ml]rum3
%g0-*j[WpC*n)gXej7drk/hl.2`m[/D^Q\*m3VoEpOZd<Ufq5GEe5N\X4oW4r/,u79X#WBIn3CCTXRS^.%h&iP;lpN>A3&8jmc_$k
%YR?F<UHB,?A_AB+aeu$A"d5INL[fY;7Gr`,ktjB:cV$k,S6Xg;L<g#8_NqKohU-d"*;W:$LXgE+UYkIGTYY[1QfI&ZKcT\tps-hR
%f'f,`gOe5Pn8n5=IoFsi*V_2HllC@Amp5bfNh@WcG3"'B1YL`c],Tdo'.jZO:Kq67j?h$I%)5Pl?[p5SM8;+f[AF[LZ0.r7AI.]E
%KPBC\'o^TM43*1cbDa`NZ\'s(UGeI&e-\2Fd%@,bd$Ydu/Xt^LlUa*2=<^BecFoIuW>J>T&n:=_En2]1$]=!Ta^S`.3E`MZ'$$h9
%?ckoEdrXVc=tWLdH&DT#3BTTI7Ap1=1Ze6s3BYi1)/)WE$>;g?3ZE'.A1bY?cB7-cjS0.o<EL[AkOVh#jt`J!64>_*:`NKC-\&PD
%_Y.&!.q2s";i@C!]L"`GG:XIq11H[a#A>q^j+N(>I$WAF3m0&BS8l?F>>'#&1e?*KcP4s@GbrTRjCNKk7;![g0(&ERYO8Qj>"A^'
%)B."IGQHW`5PjUdr<*[!!?n>R;I5lXF_9hfI5I$O+pc[a0,[/m,:8'8dQq>/#h/lR6@)3H;.rZp+oh;LYn'''-Ouf4Q)E);aTd%f
%DJ9Jo6X0'2g]]cWM3L>1T_1#c;\hbUoeq./c5^DBSMH`kRP=8R.1)o]cKR_]4_`i+4U#;q3OknuJ)Z\maeplP,D<sgH9)G'":DK1
%@jU)O5=LhLdS*FU'@>$]m+\,%<p\nbGaX7AEr2c3m)$s<e>t'H<-5##lVkl%k!i-7#@K:e\2m!9c&lg:E./&eRR:mc`cf1l3aG[(
%_H>1Y1$5+!A%eHe`C^W`).pSm&h=%.JVak1Fg,B]3C$(_%mkU#,BMqU/nEGbUUl]h:s%[$Hn<mdcle\]OiT@La:M0dKfOC9GDG[-
%>L>_BIT"N[NAs/HfKmLf0tLf%Lkc`_CfXtXd=K7I/)3mE5iKe[,p6l;EZ*R6[g8fQX<S'=6W%R4,s%l&SC3Q>9\\TMVZ,/e"-jt.
%]'[f3H*H[2>Ff+enj`c2ZLrM]NWJ)5BI0cs72pWB?QBe&1e,V";Vp\3H[Yl(0ps+&dVT52TqI0-\g,Ng,*p^`"a!O:"O=dN6i\*n
%AUBX_-467R,/[Ll*rkIiEb>TWMu9m)D\r7mj,@9*Mf(A53)3rO1r)a?bkXMO1(^&aU]^[E%T#-m6;DN#.KG\mSTNFNB=B?>+I<@c
%P?l[d?D_'Rp<-7tYV;T$6%R^-4:(EVOID@pb-9^*N_X(h"9Te52`CSC&s<funq-oQ"K@5k;/*nOTTQD$`54>lAtrsp:bD<UVNhQS
%<;L^*(nVZ0j)c9K@luZT(LhgX]=-#BdF0'1j@2>>EG82,Tr=&@V)0fid>9tg'NrQ`,>e;DG%+A3)fjGqQ]nr/3h4$o$F-l?T8jTE
%;$BC`$Gto#mGi`/TQ>p$FC#HcoUP1qV:tR<gB9T;K_&<ML"MSiO9eb28TXm,M^?cqe%k*\r:4:SDAC+DC;O[#I)8W%Vch6]3Ji'V
%KauA6$YFbo3q=](DB,3k&YJa@kNqi3MqHBcogs<X/NYV!;4/<$m)X0rUXMniMEqW_-^JuR2BM@U,)&j0l>Te]18<G9'KE8u=)K=E
%:`7Of=bNVS?crAdO;4$5QE=MS?.,,rE`NIkR`"qh,q\pGaqZoXrgXPgg8*f\eE3!W114J<Z?ANO6oZD:\.9<Cbrp:!Kl+`k&/keg
%mt;8*VTB3)Ee]4[\YJ<jLW5>h3idlK_'_53Lr!Rjqu.(PI`#&!+knA5k7gG6o,Dp?Em]5[6Pc6LY`css?CmrqG?A<5V`2]p4$L9M
%P$,:tXrL[tl<c1///X)Y]k"r-CqZ?o\5M4Y;=CefGN"@ENG(nkDs=3EnRu>+BP7FGIgIQ-7,k%/1PP\?VagS;4uL2^$T?u1-CihD
%1Rj'1-CiV>F./ngWgK*/.je7S"]M"]X3mLs?[m:Sa5pGLPId37"jW]59p6m\/dGm"M0HVo8Q*YfbL<alTk30D\c+KHs3Z/XMEHmd
%P8j%3s(4euAonQ,RcHp4>fCp522Q*@`6d!oN+.qNoX`2Xs!'9:K>3hO<K`E_+$T['D52YXV"Kq[NKE68C"P\f#)_RM2<6;[6S.+7
%9I!R<ej$NVP0k\1PldOcJq)!mFncs3'\kQEM'&"@0<#(*2;OjqPm-.<3H4Ql>Fs7`MmY(nkE&%l9jM<<k@8Q.M"4*7("i;B/WZ":
%;mi-3lG+]odZtQPHn#TsBi`a6PA1r?oGSK&\/"XEQsZ(ggSQqF8F[EK\iY[kSAWRNY3DcZ(MP*3JbNTBee;Tf&M5$C7dq*U[\\aa
%5/)-].JdRN<&u2/VeB'Zj96SDk#o=Wl-*a$hl#`?bnOF?-g^mt`t,gkp=7FUVoe]&lfJt$QF4J&*+[80b3J'!HPoN834J\-&tG%t
%1[e*OAi$s<b\_NF&?qcpo4\S[%'Vs#JO:0rEF+B=KaU"iS6l([!qdIe[Ho]k_Tie-_SI>@\sB:E-L4BR("q@U(]kL7hF_RmdDhYh
%4g.$CCChY&dEofZlm.].-+fJm?:XR[_fu?AYBoH7*RPoVVU!G\'r8A`ce6KHg)%<\]be4Y4VtZ906GSl?2.;6^"C;/mik9F\$rI2
%S[[j<T2)%L_`E*;BqFr;'Pf`)HsEb7;<0hV(W\"rMGaSKIR@$lcdlG+)TmpaFM'Z36k$cmLoDc7,AS>k-a[n@oF0XNZZ$Ja&(^8j
%fJAt8/njO\+rZ^6eOkNri^kG]&5$Q_5F+:2V3#"M'AZ=lc,L&Dp6UZ6_gK%Oh5/YGVFZ&@(@P=-"r8l[Cfq!d0CR*,A7nq7SD[Q&
%ZSIlbO&obVeiFedSab18(]pAdF%,;8PrT?-*f/$a"GBtj_QLNdm9%^_&?TXgM@8UGl'(j*`ULdGE6dqG>1;o="mq.]B`D"&4.c?[
%VaP\dS_g[q93ff8aWaf5R4DV-Z:eK/fOab0aDr*L$!m,EUV2g@=cAenp.=uFOpjk'dUD<dJfQL?[J!.[@qG=@fq)K4rmXN<D0ouf
%4\'C00tTR-Q\Y0'P[gjIF$5f:T1eF$RE@D]6-W*3)>Nu.+sG7>Yg5K4S2ofW6YA%J9Gm#RnC%+Ujf'=W;r'Wc?hr'T(='d)>O8f<
%pahlD29LMdFEMjHSW9&(h7W.KW/IjjT-c,(dW1\fTY0))H$ON,OQ0B2UqL0&m+b=3<HbQCN7oT*d7i:/X)r(1N*Bpi/;@1521$J"
%/_%5V^/dkn'\[$O<njb,R<'_7(2I-VBt;S+D>W_/j&p;iDE[<1_=VY&_ktK%P>3kl"Wo1_j:+/bV4BuG9ZOJ^(mOu`!pZ[TF8?#5
%1r,,5P\02!]-N5FkTBN?&+lh#Z8le5kY(dp+S12uB[=*;4%C3qk.(a#.m:5UR<'m7B-6=g.<"O96c#-PPBBXh=OPo$f\@jD=^r5P
%FWp%SKlpfDCd+F!HkUM6i`.g!RZ"X>Fr`0F$/#kk3hcP2#n'(n3(;7T\^8^6I\m^s<VOk.p-gcK`3G2[SRMOU>[,8c(.uu0`C.>.
%keb!R;j>Zs>S4#/(DV5)kDHo:hX*nHoBBMj"aPAq;5q4Ko!gf-g7FeS6ttIi)O??D9Y;p<T*&XA)U6LSL7eClLq_naBQpR8Q^4,X
%p[3(pgBO=O9m44l2?\f)O_*&ln7MeqiPTn/B=E`+R6L#8(TiZIh+Unje(UDN<#`,Qn(lT;Cp:VQ]'25cBk:%W8l*eOl&3&,QI=E_
%2(!?Vbg?<`V=6ldS0^[imidC_AQSY;SDjL[hZ)=FIMX"MQph\,4??tBO+-+fG3n1>Kq-hl[oLAU;:KXO';#`Q8!TP'!GS"U^?Iqm
%D=U.k3^trJi?W6aZs,F%(EZiG_K7Xm)a4/BXDS+LX0pnL9_-EPf$UetpY>[I[/N\46&qesZ!oYhl:Q%B)r9m>enQU]PU!k-])TgB
%GLKju-BJ$+cFZ*Or!W,p$SE(iOD>!:-Df!VK'(4i[2`8dd2)_=YO-+4gfI-bVj(j*4+J:Yap_]PYOHV\'n/ahMluRXf1t&#r+=C5
%U[.gZIBS!k+&i!PV1-@Ok)ImQ19//X"ktD''s/j%4oSnLUk!$YCDl0u)>/iq7CS=PO[Gl(_Vt4?U@l`7c`Hg/7?7mH#5$'Y](Z=N
%B-ObWipIC[GDD+3cCL,8%q4hZ@UoaWF=)?YS'_f7bVQahP1sSe'Boqf61K*1`o2>$0-u!o,!#@%h(HSf?ZKomRS,:Xak7ig*]Ic-
%X0%;"_o5lW**!fIaBP)6ZjqlCq;JZ.WKRaei<gqrC69%9Mm$udb6\<#A"fLAX/?`SrKB(2->"['R'-oO(C0C]4DoiG=aqPUrPSQS
%hr[`q'0o`j"/5'])L?Zu*?F`N7[IXR=(Hur0"^jSo!u/Sp8gDE<mA.CCba2QrY7fU\LfbO.6#sHDYK6Zk'gPhF*9dYBC\ORYoYkQ
%CZr?lrl[d0eA@3MrHH$eh<`jF>H>Gs[K"7src<b[;2;ht!4U8K%7`7`JiZhDApK8lOa5?i%$UfB0_li#;3`t,:+O1AZpBJ[#J4GJ
%:[>$fN1c6Xb:h2m=]$HOm#2a,@tn\-^(r;g-=p>,;FZd1A:GlR&k9;ln;OA^>!QH!8pu)!@F5pH,ml^[F^8J/$%Brf-=2tEJre;.
%^Ud&U'Ig\rMO8SI1\"X6dH8_)%lke1+Ft+^WI3)OFcnUS*^F$4L][ISE)SG,[_eUYZOkE?6@K+;1)(7p5Fr2(J`OjipUaL^S)*UH
%p[6!.)m$AqH2d0bHhpt/s7U2K4Dk\A0.*;CD`2h:h=Y=Kph'DRn[qsX.Am=XFqa&#LQP?s@[\UGSlEtATZq,Jprrd,YJ9#q+8miF
%_"m<"rqCnrTDoq-^J%lfq.B3,^F,62kObbB0gY+_G=E?S20k%af)&r#J,3_PN[3A)?,#p<lDgT#.UjpE$jV9t\P1OMXk%2o+]Qer
%$iD5/>i=++rjopAkEBgLqn/:S)>)=NSDqWLe]o(XA)ep*7qa-,Iree&j(o%.FBV&`P)kg2SL4a$g:q1o'T>Ep^F`0X<<d]C[m`W4
%)h7cs?_7,&ZC%@2.XBCqMIr:k:hES(EZU>SH6\BiBrjW_cgKPtI%n*4E`JaO/EF9/`S8[:hpsD%HCJ]CVrm+:<ogQc9=#!ur,#fc
%8+2=#KQfkjn?2A".;C$U42;P!/YoJG%[R3j4<brX&H;IJ^-'#M7X8Ni>\E6S1tPm+69@tk)gCkOY>t8&b*,K`]h5!5="V,>H$8'\
%oeh3Qq)6K9Mn2nMcgKP^HK2IDQOaK"D,D%UoB`nVc6I(d;,Mu^)9G4'4PuUaL9\)1E1hkB#a8C2aMFA^7$^JRhOUWu6gI]B_1qKN
%Cp1=TQYUrYN?-UEHuJ,(]A1C9pXdUU&>r4]p[k?Ig7ZVZNlu;8nAoVFW-Gj)+!)0!eRW>bX,C:t`*6Aeh@Tc\>"7[Aj5&=`U:/F!
%s-RD@g_QVZI(AW^k;d.M\D2773)ZQM7Z,B+GHW=*d$N\5^"dcAq\#7m8XqPmhp\'lgP7F(Oa>jB`_GbSch^QMO%AG(gF*SMq>@\X
%PWaFSTT7_iQXSC6/g(,IH&`bZHSoDO]d\<^^6ur>-/4H):qpt:D.TR4ps\hIX64qX#?/Jn\U-M`N`c1nbn#jGmj50`rj:Esm^C^\
%&l1dlqr]g-oCK[dr5$\Sm#3Ta$(mjX]r3Eb1:YCe:"+^:j@*'8F"O*PN;R6[?=_D,TMSs0(-Nl5koD3B\p[(1',$\3UGJ("Bnd;7
%BiEVXOnu0`<E]t6]S&[@lZ[e!O+'VTq;-#nX3.dn&#Dhq%iKEBE-dm/"[u'(D_6%gl'*HeN;kr69aR"jScbpu_7D6^Jh5"n?O.B'
%AXIaHq9-4ZR+>:"6K+;ZL?+fLRoWSBk**@^jf]b7Grr&6%=D<#<#V!:5&]0&%kQ4:>jZQf1*9D+W#YZW%?uDbdnDt&rT(/3q7(SK
%Y:^f:d>HX0DO\j#DU7P]5+!:7B[?K2:R`'[@%r&+"u2.0%;?`;]=DuORMV4A[!&TNO$VPR+g?n7=B8EL9@:tljmCiYCU#7JN[do_
%6VVEj$jK<Tc)8'BL:NOI>aRU,kfq0!Es2Y;T"(Y'cP=r+?8P*_SguMX-#V7j[B@S5eO<]tc2CnNM9>LOo?OYSBU:[U@@B0B[S(@+
%QN>A(X\l4nB_*M2D6c%DgD#lhhS[_;Pj?LulsmLgmtTf9[_p9YN=Kf8&fYIn#/I'-RP_DEXI'c;flVO<2kR"HP9)SBl:&.!W2#td
%gVA1m;#Ft;T?;#-<Fl=[hW-%fEP'.Q^05kig/1%3;WY0H]umg=Ze!I`d")iI]5s=NH':@/H[9Qb]>)SIF6rAG?rBV&eWJ>4n^p6o
%UYueHV4Sfl\"15YkfE42TPZ'UD^@j:\,tTt&m*phrj"+/VJ0=oRF-D:jI4CiMs<n#K9iBL=2N=Of6q>R0+LH8.8$A((Y2_i(uZ4i
%aC,'c-+;_W>87>_Y.>oY2,uhsZOOkhlO\_N1+EH]9k%<MP&7*:+G[G@5o6K2PFW6Q!ml%Q1*>6So[?1uDAV4if@)'Bno!L>mLqO.
%Q,ekho,3_k1E+#C(H6f$7TsM[bC!Hn4i9OIA8/OCf@)j'Br@jW37Fd-(cQnJ6IJI`gSd9A%WUN1KhZ#\+d-]?*.F[&?]T.'-g(;+
%SP<DH2VsS/6LV`ZPPZCu:V2+>"p]$SR8n.qc#`>r\tVrZ#'XnNb1a,U,q`<3[*GXgiF@!R6?nn7Q=]4.?D_sr#0=XV6.[YuRh_2)
%(ALhT_.@a#iqY]<lk(%.&ouoBMd`g#$Ah'(P(cUDF9)&d1N68RaFM3Ck!ILh!<UGBcEpRY^<)'n"c`%k#%,R>\2?HBaq3`-Vb*JL
%P,p'M'PC6i>`p`2_V?F]/BLfm+nWq"QD>T3Z70Z?Ocmq?&8/CKP.mE;YQ>iP,jU?LFlfDEo>V/@#:dj<Go`>IC(lL\Bis=\MS753
%7U.9XdT6is;.^u4#%)V\.+?BN$IlX\=V`PART^V;*J@7u+tQCM/IS+t@`gHA]Y(24>fr53>>pkGj%+QcQ*qP$@%![!<DneB!q>NT
%(pbpFUo%^\Z)iS\[F?*g.%5[dcD4CW71b_o87,cbXA>-lmSfFmkAdpM;`=5$\WCh_K!6k5-KUUqI[%pZ]!:?6jsK(]+a#7O/dF18
%0#ZQ!6;s&-j]S-oTiEu5)AJj-jKT):;q[=-"10DSZm8#09oGg5MMqod0$,T%JQ_6>?Z/Naq-DiH+jV`_`\X`EhZPqR65TgRMG52G
%h&n8ldL3*,c#mFT(7Bc(=S#&n/M[UJ%gp4V9BnX\d_rY\7:!,[o*(0WG+Ai2VuT.H5g$-XI7>]M>G[g$8Q(>^gaS?\Q1C$o.L%=p
%r)6,sRH#5^Q"?m*4I<"FCg!Vda(E5#=U*??f80c+mpotXVPn?/\hK\t1N0'Cf20Mu(jmgV,,D$V[40:`jb<IiGcsHTQ;t`+FHmY?
%9/L4J"V=++EXo/Q/q6i*)m*S*b#6YH[9n>$0$>_h:g's]2kVeV7V#Z]Ub't;XHHJ78GT%K6%c`aAmP^P<u,6B`kj:F(R=e+(ipHn
%8S/;c\2"fI*2P370.:g)YdDrlp+hN[RA+fi*>YW=ABoESin%B?ECmIX:(d&)8V0O;da2^EG0?6Tirk+!]H"NJ`!]l2,DiC,L'YZM
%4+8W%056^pYC*7iTRdkQ85-Zq&sbtX"kP\)X"^K=V6iiOAjpACAJM5>UdLo/=-,DeTQ,5o^7c^JRKMEQ'_KWhp:d5iL2Pl_NjER;
%K9dh]WCXo$?&,hY_6PV]0[.)5E4.;rQ5<+;A]]Qc7F/IpZS6hUM0LdTQ98.0FXgsj=$[*E>U*gJLW0f+]sEE\nmJ((>]+]5"JP%0
%L$?I%4Xn=OUr(>Xi@9(o=I<Y:`*MJQLi,4@Kdf&1pr:.e"T+@eZ(mKuAY+J9^]\k]$/RY/P+i8>ZRQVsR#upj?T9Kl9H5fm>4?#M
%B'YU&"=JbAJ1eu2aHprJK330M<I(eR3KDqs[HIV-.VBbqFb%+W;t`Q$+s_o_&NWFF-7ituK,,g3.Hm;DC>8UU.H<q"-GR-?KR^a`
%oC(G7,>9n+fD@M]0Zj6)ZeN.I*[]bbY5OIa-iZ0rIpHl.Df=JQ2YZZYY!UPYpA<Uj-gB^k31YHko*0[3-N3o("m05X:n7GK:K!h*
%qK?pBqgj\inGW?+G9*USH1ZKY)Yui\D8>.gmRLlEj*+&bINRZ7hs>O@"/hiM%=7Ae;U5i.r@^IB\2dgMDBIf%;f*RqQ2V!4@fSKs
%!XkHGa'uja&q?@(s",dnS^r+_#27B#qu%si'/3GaDYKX64)9Jpi*kj3q+Y2`9-0S;Is3X;"l7OT^\sY0aRRN8hYI<?@9/%mdbj3K
%<P-I`7/?=-J*JZ7f?mGYhpoE7T2.L6^!A)(T['0*W3,Xb593-/@X<Ut=J8#[P<?TRlE/p":Xm)+l>nEu.^"`408T2VWmD[a2lPfh
%a'SlCo4O]qpYGh8*W7nl!oEsdjnA*(nb2bPhbQH9(A+0q$`&&rF*E,GPsdeWg>NVH8lGn"*Z_1_271I5I__.GBH*-cEt7`c:'H$i
%Q6%.<V0?0s.^(`1C%@&BcR,9:VYC80JtarlcBlhWc0Z;#LkkNcc/j8$p:'MLo+/mZk'45irVcIi!e:.Z/@kNdc_%n^l78^Wrpp$m
%L<8rJ91oXW35=9SrM96uTF6-7e&s/ipKu/mhf#^["YfUalED*9Nc8=2;:FV+[_9B1s!"'`ESfSDY#3WN%bpAG;Spq;2E^dhGLeU&
%<BdY^Fee3;9>gu<5[?:NjN:87qYBNR((PTPT#b8+;'_R.A(#i/cJ7itOcR#X.;<F#"4Pn[:.#9d3qlkFWgnO:E*F?R.UCuc<VQ[a
%`8Y%:FA4[hlH?8sbeM@0/P)6;'snp`_0u.OMCbV&#"at7F<Z(LB41t0"%L(>Iq-P;=[ZVFM+@;hR?aX!X+o2CY_p5!pDX4P;8>n$
%*dKNc7+jOmOF?dJ$s>J],%],0g'-oP,\:aR(b`7Kg+QtN*]=5+ALe[1M-@d?*qN'ASgj'(aRI+ug+?GfV#F8`ZIOQ9;W@3f:][)!
%JSNW4iEm@[k*[$mAHR"p*6_VRApDJm`1I"r$W]#UYo#8Ha%Yg5Xo[7p:f<tJB7?Ie*D3T>:sj0@N[b7529N1SfhFh(#:BWY.mM-j
%hrK'L8]@NnqTYejMXgl^2lL8d=]W$=ep3WW7;W/<&nitse0"7?9.?S1UqSZQQ3GeHDN+P"b-b=01));t<<]%j6eO`H2"MXs$`;jX
%'cn^HH'*,lW;W'Z<X/W!cBDgb7Jhl[g)Z,80e!K;ds6O632(aZ\8#LE_i"`5/@<`&ckd(n"uPWqm.kd/WrgbZnW6\8$VKSU??Mjg
%#2U]+8[f\C]rlbYdF$b`fgQ<6FHnA]6bB'j6e>;e=7OKQDi)8W+?FFqZ*4k0,X^];UYN=fe1FD&]@BoD;)r(CYn4f2c#`4S'=f1$
%WoGj6VlmGs)a"YOgZb5m8@#nMrDaNXO(h`/[g&&E]SeUG0C)\+ei<cU=Zs(a\=-7@mVae6.:qf>D"32U7-6;e5!`HU%1@EVVYq8Z
%W<*:CL#1DU<h-$ED*h<V$L2n@_gN`FNXHSTqJ"LB9i7!!%A#:DJ>(U.NuWIR'A4kDK8$KZl#%4TD3o$^"'^I>'"Z6Cf7D=s8!Y,u
%B:7*M)Ulo;0Yj(k2.VHg)e31oZp7ucH'?[4P13K(N?eno6&X0,.HVr<Z>:.8KNDjM-ZnMPG8)&b]MXEmamM#(68GR,eEKetf!OiR
%bs*Ml&#4.4L]*+b9Z\6s'dj\I[ca**L++u6kB*);%bYI.@2CA(P*C)U`kV/ogn-Z)j._<n*fcj&DlS>"?5[OIq5T+r+u]K/hfhAj
%HOUj?)=2SNaJ-K\li@T>=NRtm[ji;G8:H^`au9^?l>tbPl-CJ[)]7ifp!u4c>GK'bX38?oBj#^s=D(@rfDGNW"\=*ESMg?lC.W>;
%D.TF6LQX&Xl9oB"1KQDT<D22Yg0=I``]n3::#401$"YNBS1c514JdS70!VH=)R8R,F"YqcpC>u,6Dk+M8`BD8VPU'QkCG/D0ft=U
%dD/32Q8+[CG\g?+AI`=D#1j9p"7=#X$7_%^$?4K%%F):q&">2^!6/$\EFFdJY\AJ>,Me8=.[3\*ON/M3D!8._9`L2oK14`,=j&e.
%.W7F"(sGV09.NO2[Y4WU7@LO%N]UP+/U#4&auCV5c!>/rPD+,Lfm7_QKfS7*Fo?2>nXd:2p"<2r?MY.YqL";(^@"KJ96Q$Pmj\-P
%\,5"BH^M6(9`BG2DRZI`g6qm94qm03-``i_L(@`6cn)cni(R2A/I@eQq_STUEW>s]jRr8hIHMh"-;K$*7>kl7Z*a!@[Ob(W^b@]^
%*;+$5CcFXCL9!Vo5HlHR`fX`21S-kbjPCS^ZmE7VnN9#%F*JW-R6(.UV[d!i!c:`,k.E7NM?]<>68l4n81UuVTJ3@3Yu^666G=1W
%2Y>rY@k,=OP&!oSm.:!>;H8rg$=b[tB"<:ZUGi+0<_R@)J[b33-O+1Y.I7R:<J9n7Q#$E8H)G0rBhAO.C@B+Tb6W$H>B@m.J:[?f
%0";s&(kKhC3:d5JOgTs#R/2ps`P_`S*CF3I_Qc'8/(X]N1TgQl8Y/AIp'$2:Ou.:ES'eJ_7?N;gE%Tu&=H]1:!&W<sY>0W5]V+L%
%bgS@_J)G##6>\K_GDW_V&76QRGn;n$eBZRZH1J;_[.&]*s+"5TlQ?.6VLIU)i.Yn?YI6sYSAG-c.3G"BnoZGAF>o=P<bC?6VoIBl
%M]NA>!C+&4@8ar%ElA-1l8+];iZ0EcU+>7i!N_67L^"B1%T//#M/?,^9PhBh^'Yg\au&2=Ls8H-R%9lE>k$%+0/KX9oLiG+`o9cE
%4O_B`ML6pY)0p4.PE]6cV<+46^FuN_V3UZM6!%)uE9-eq,i`ocq:(B^0?<n%RVOHJ,$l?,,(+\-E/_Ych11tj1,:'<'*$#(^YZZW
%hdTXd&'H-&[WL^B60[M1lLAc(4"`H^3pP[F(1>W)J%`D0i8!JaCCpF:S!W%#YI=U`rkmg'J)&lJ+Miu\nT_Qho6A2.lX)(1lu:VT
%;mUbD\!V8=mr**I&)1A\PtjOC)N%/dN;jlI^#+Q/J+ip1*e+$4F*RJtmjFaBL,\JU`G'hY@-fKk`]lQo,fDZe8/JXYLk#B\^8Q5P
%h=d"0]%p`l[(X2PQoO?FHkHG:h!D10@<W#KBJZj$a);:/"[HqqVed%h?RY>aTj1V42k)b9jE*[Z>Z0&Nb8\<R)hfqo^>(8Ig/"K[
%,L3@1LZAC%'/4pNBbUI)@=tV/3/0aa]Y(*?1\qP/oVq*HT;sJ,]`$q*B]&h/=Rq7%S#cQOB"W:)bW?uqpY3s[$.Q`F>T_j1<:(jj
%-XjZ'LWiS^<h4m;IXC\SrC%JkP("#D?_k%shOFcEO3>-$VZNoB%aSb.cf4fo,$_m3,.PGbbkM!5Gi%eJi+]jZ^--ph\:KM(7I[l1
%qIH*'ZBh]gO,'e'*!pOZAiTgs9Gmg&e`s4.rc#=aZ9D-*^:h)5SkL.`%%I0YkQ"3#T-Jm,c/ILP#i6<9GTOS*?3IV3U&Re@L#f>_
%f^6F>hW&'p]0BP"@.=IcM3d\bJ+4<Z>ga#J4q-i7VhXmB0X/;VhV?rba+Y*LPPWbDQ^mI+s7:5OHZQi9oTlkV"M"'ZEI7FlHi<VH
%n`m>K"+1^#c=]<UXCqI72n+j'fc?%<QOQJDq58i69PrW.p?rLGLPM@k0<<2Cr?pW\STQaf\RC_I`;V#]$:^7Ngn0g?%rZsn,kSV$
%*]M]?j5pZ4Bg,^gs)K+qpb(iq-8gY&!r"Er*G/Y;PKi(]B"p?2:Ti&;R(16WI2-'Z=:_<(-O1N5cR+'1,l.mkd!X.d[J?Co_I.G0
%>HXd`2:KNVp[dP+2)l:eIqA>]F-B[5h6r*2\!%oBs#<bSf/LapRi=.KbFjE)s6fE%s*1&]^NheV&#"2A^>D-@D]eMi^5mZJI<^80
%"'XrbP-"@Da*kUu*G*:YDL:la*[bPo.1s)Gcb8-#hE>c5D'uO\pQ,'NNmfT'ed-m7NebmIiI1k\rT[I_Q(.*]K,.sk`RmlP2ts!&
%_p.#tm3XFl;q0T=-T?R*F50+<D/&h5FR#KAql?@_;!dW\Hbn)I>:WbPqYk(F''2C^p_[=<Eol(pY-6S5^=tdJe8?QCp\SG^*I)NM
%(-MJ?14).OV3ZI#a<d%Z;N64gp1Ce)4<+n/T4I<dbZ3,&RMZG%e*QDnj6\F"l^tYA#INX66Vm]Xaa^WYhFp2Rc,56m*22V<J#fF=
%^4Q+8DkWDFhL5WNs!(!D<rY.Zh)UVkH]0FDM;<[lpY>fB5Aq),8;DHR[Vbnm"-rG8TAaWp!8_O02nQ,3-%9u`Et>Amf7X&'QKT>'
%j$QnOfB^1F(7=ZJ4mjDf^+n-m3eAX&kDqiTo5_\Mn)R7TgVrL16[?(>f\c]iR;]6W_Y1^Umai+mS:#a?^&.K_S%&9!g]S\Pd1)!#
%@.->-9&6cs2Xdhn=1=7K`;]G!<u7l147!_Z^740D:V3*Go]L!gIC$KL#A+YJj^r_Ms!?rEXX#iB>9-lU-<i[jhqhV3SQWiM`.)O9
%ID>UR7]4OK>\P6jnJ^G9k2Z6br=4h8%kt^nr^W+cCc4NMKDF.1B)KLA"$`/nJN"\G6.]>RB0O@grFMUHR$[pN&*K,eemB?1%k8NE
%^n?k`5UDrr=>fMVjg^?drC)"o;u&[qTD=k]Xq1@C2m"q4TT;)j!?^g1Uucclqp[mc)G]0b8ngV<SP/Vi;f)*Ji-r#CJ%<=/q*\j[
%nj=*s)bg7Knh7L8q+&&OG:NLApR<ZMW)n3;a'TY;gY3eLT_kFdp+KiRB6/FSj$i_#n083dk\f-6T_GBS>FqVRIXW?[+8=]2m<;(]
%n6c#0E2/FI/DR[L3D)CnmZi#>[O\qmd/eT'K<srB\=M33b.,39\A$^#6Xahl"(O9<5b3P\6e@Os_bfJIn<2)B.r9ggX&o>2h]ImB
%4K5OU#BUN\p4qu$F\dih56#eUN;q0Dl6U\#m"<CmaLMh&"8c=*;kO*erlt)[c1,\(Non,>c)/7*GPBQ#RecZ's7Yj0Y=5Gl*_:di
%3W/Nr8aguTM6h\ZfL"QBn^hq3YogQgS$JNr5J@q0Y:kBho]kkrT3>j,PnKVSm>ZAST0;+%oWM=(geLtc8>hagfm/>^ljbFa\%h@N
%5\un,p#0?EfkBQtD0EP)R7q^<Jl8l"s6st_a+r^BPU7@(K8H^0:"igjpP11XeT(8RaSGfRZ/;"OqhbZC?@+jsI,\tF^7[;o?V<[b
%UB3RZ.AD:LVOi?\Q3,OiU`iH_EO'(G.Ghp0o!4M#rV_$?I+!WJo@\0](?W$VP;g6OQ3S8?%Ke:#5JE'<6/>UIFinGYR4YEPWM&QA
%CsV;<^7DF]aY4T$Bhibl["-ZWhZV*=8R$JRICOR3lZ60So<`,fAAZTD\&,&ig`Fbq%*W\B%=kkX\_?MFg5d)`3GDV>W<=:!q!F-V
%+KOA[L[-D!*-bA:.A1,mjo,2;k"IdEZF@;%p[@j3s#A[Qkf*"fV]/].`+3@]\Em#b!"R@VE]]c[k;*YjY3p53IQ_*aI%m[t_o^I<
%M2j9^[fO;GPYbr#S,3SN,:#ATJ;3.P%XG9+9e.Q;5WA@HqkRcL8<5^M92^(GD*&?$M`g'5J=4B,?-CIaX*Sp@TB^7XLn%+[&*EOs
%pND$=h8,U#FB1EoA)D)4')]-"2>-ecqqKjW3Ifpm5,e;Yrc2rGm(a=352,QjQe2dD(\j+^P7(9X@IeeTX%?Y!^>0g-f=/a0pJmq`
%FFSPImnW?*koLo'8@QqA)T2`nrHWa:Wm*Y"GM@>2UTQrX3[,*ml/Uj_FA=MH*,/d/ksTai[-i@R/VE?VMPeB%Yht[3_M@lTlg8,-
%WjFJ1p4t?&EF=-Ah0\VTRUfFU..iStBcJ8AP.pZWZ9r8JjGJMan%)*f'Clu6b8_m;CJqJM0pF$oQD_(+eIPj]LrPRkPl(?Y;auaE
%4If8rIt.EA_Y8Wr&!-J7P((7=d\NXep:"tKf/Jb7Ahe8GoKaO2*$1RES0,TF"R0pHOnV)]&h)DSac$m.E0f=Nik%MZ!O$D?Z+YRn
%4hTTC8nouklj:u6m-DbpLWq^Q8s@Nf3imtB>E7r#r2H$m+pCnpq@kO(T)"V?XBrTSjC>HPraQc.GV8:.f2C/d]tNN=f$cEQquio#
%L]6*iV]#fY-jnInl2ZS3n?C^jY"qLr0^6JN2tu52ms[<]Na\JIK78GA&i[:Lh7rb(S-n$'2"VM4kI^GN?raRtpbg[Ls6NehkC]gd
%+iCPBq*S\*"qnV0Q=mhoBW5q_()=TF()>kp=\Lrq2;),KQHn+_H-n&BJ13;>4XZ/H;I!C75.f8I(8Vm$01pD-ET(s7W7%ElS1-"c
%/F<)Aj?1!+dIJtdfK+lDCYQ%:FquS?d*9nkDntVM!IV4SO8hS.eM&A"[^Q)5%M&t5#01e+kePBdYM4[o"3hlc;`,4NF+isrRM7/u
%q<%LZcR:Y'YIrYQ"TsJTGi4)JH3kA3Vu@9+q];4(#g*)l6!)YWjn3PJ@_JZPrqY[Wf+)!#@Jkmuc/LglU5RE^Uuq8>ng^Kb5Dh!"
%#Al;F1.KNDG1:Ob`<VpR>#cl?p-HalVuF]248ap6qU-ICOjF,A0?km@AC8HS5(E8jJ(lopJ,\dfjtcE#9(+f8l(#EAKi>b7`&3rI
%-*HCJ/PA2UYFNZoJTSXC?AaYbHanB*jSnQmOeql\.C*t<K"M5/-;_u?a5]CjabpS2mjYT"#WSHK9d5q`D(j7^Rq[L&_7V2dON[cp
%Eeu/"VCK*-\#7^/e[`h%`K3eaB7I;g81:=(VHMIu'G201.LS9OjYY(1PT4Tu.O$-`"rZEU4qpTS=pLD(BiVX(WK<gQ7'KZK*l4'k
%2A$dB.LTG-*FT^&hL&;1Wi7GF7;]*IBZ\f\dG)PXO2n)N^G&14SOdS7;^&1C9s;R]U8kB>VHFR6QqQA(g=Fp<T\=Nh(B211#bqY/
%UI\)18uEQ`8Sn5=9;9]X6Im]kn<U`8BO><!-HFk0/BAHbV5c(;eWmK+BHLu,4K>uIT/+k0<FSh)OB'+I7OlVTe?,aM/+YMc<T31W
%=[!$iX6S-?_4qfVO=Fe&.M7akZlbXeW`+`TBnSdYeDXD2(1c^1C#rMuQbpB5Ki!q+Flf\cg3\o'JZ;9""*f*STG!)MV*\2d)J#.(
%W,aqM0s8)E_jc$ieQn38?$/k":%8.Y#c%_0Udu21#mR-(9`%eG"fXi>X=E_t3"*$8GlD9TlL:+N-E9,WQ*]ah+0'38Wm$aWbaDmC
%"9t(4GZ9:G86:c7^m2]3T![gcJP>S:e.IdGo`eG)I(L.\(!>Gd&k/1!dh8kU;MZO%(feX"+aomtAjh0HlEAKl]TL(ih-(#Yd?V''
%BHJ4WnYk`khgm,I=C<k?N:j.=HDJCXaN>D3icQuO'(=`%`ZT"r>FqQfM-#WSJ1>)[.T(^j"hn_ND'H4r<>[R9PB:!>gh<<-%:4mV
%7i6;K9QN>"=-KVdS5i(+%rse44NADI;M.Rf#*fe+.Zb]q8f2]e%8PlS(_ug'FdA!feZLpFMi4_oZPZ+Z(e(/99>!j*[MVGB0rg<m
%/&BHZeuIdj]>5/V,E,WT(L*>-W[d2];*It7BM_-L<tuY60*25IANU3J[RaIpRn3Tdp"H^83F6ltfX\i[OBU18j>D2AH/(5Va9Ye?
%#jH986-'+c:h5M=o*9rKlB"0Q(5fW2_<56eDN1GhPdBYRmLamNU^EWh#6(Ke6t/H];!)ZRIl5f3'LdXEouF`TE9$KSD@EOG]p1:G
%2L-@Q9GK<RPpf1FLf8(;<FS7oO>VZQ[tu#9RG](lnVj@K=1#isMPa9O6V^qK4i[#bb,bRR*j>F(3O_QGUg&PS$FkX]Bd[S*MAI4D
%<K%9TB:$5N%'"KqJU:J/,&Wu%'TaM9OPgZ0NNJ)#"W!iR=KMX`9OgTUZ37'iBoR%BKdRbi(835#=`m[Soemj(G^S@r(JH$XTN'"4
%5\$lNCGe_s6THaX*`q@__(Ke=:poSjar569M`_'?63aD%NL>;Y9K0"fcpT-;C8/S<)41cDhpV-Vk`IQ'LdqQ7geQ>02AhFRS5Vq'
%O7=G[J^4Q2]]jDcZ(P(;W^(n^n6BR*(Hg[[K8^DB*,d6$b;#r!pMS\g`2Nc2lRVOY$@f>OSWSI*OYmHTcn&k'E"bS9_SP!L"Q"kl
%XV^1YM1i53fd;=pTI=MPT)2a9?PI`..:&j2pRku'KdCs_.9(J^T`&8l.)@od<"IH0Obcm`g'TKNAO%FnGXTPDUj.0/A^gk/3%H]r
%B#$Z]V>Gs2(e_nQ_Fu"XAtY!>Tnu%.60j(;;CXL8(hb+'SalsqJiD$`8F4^d1shmaB5(l@:0u9"FHgAn3=\\Lf?K[t&qRkC100!F
%,o/AS%<bmTRa>D:ku/[[V&c)M*6d4.hI;+3Ka^^&MU!O@1r4OM"eJ<p4r(A8(iN,!bY/p!FM4u_,D6Q\DpgHHU+.<HFgM[qacA[j
%D_&nI(K;T`W'i&F5T@pPKF3.dUhIRGY;pOlEX]$mh),A[hV0GI-n%Mn:kC'"k>C&l`1ds>W)cpI,`bd]rQB&>0[H`AW:!%[af2%`
%W4VSu;A`,+]F7I#U.D@o'VS^MCmrih'aA9nWWanIn6H!lmOj7E%SmitbhpT+6E*:@W=jgrI,WN((8XPQ8eDEQ4<1]+..[da?A_%c
%>R-T#9e'",Ep@<[_NQ'mW_TH`Jb(K[,nc,.KVD+>_O)=:Wpo/VG28F.%<u3=J^k6-VCBaK>:<K"j0hJeb,3"eTkrPA`1ds>%(Zbt
%S%:GO6K[J9^=X1B@(MOL[6^cq86-c(K/58((<0#5e5i/5$nN-N/ihcC;jq\e6`1d)5`&mBpRL=/(g-1JX%UO--t8Db'U0dr.*HE6
%dg]6$.^:Bj.&rR*1p]q%L1dQmE\YYh9jLb'OJ7EheBsj(]LSa6TP;eUUT"mlEf!V?/ngDN;qSZs._J<YM.&8Z$N=Kl#$*fb=jUG$
%0hN098sL6XkRFGumSmXmMGR,]0P<sOh-ki"DZ$d_F7;`bjs3YJ8k;\tm6duG,>_AXhY`]X<$JTG6n#W3Mfbep'+E;i7B>_3D::&F
%2Y1rgm;OA1Y`4PqMMr^9^`[IWhEPLQ<+6Gs:hKo=CSKC:0j;>tC*:AmB3O6tJsqX`i1)j.LM5d?6q(/8%AL6S;Md]86I>nJ66Ai4
%<E#87Uj4"+!aj[?brd),W*NumlBQMF67>0O-k_.E?4BZ(l"qoT(e#jA_%3AZQPcC7)nod;nF!r,/4<?%Ep@<[WbjjJN1)X=R:fJK
%0rS&"\j0I&/IdL;*9<@84"MrPD<a0_a1uH9^2jNSH0HN;.[2ro8.8,_NjHa"'T#7-6CDei=]f@$3GAiLJ@phf>R;&d]XQ65'.kK1
%Nr!0.rXlBMs!oN\0<diR@>Rg&JKOI*No'8>]]C^4FtbKRZ)%tdeIG\."aK,t)51"QUK!(9M=,@]>Eg>:-q,PaeM%YmROAAT9@jY8
%,^:,0D,@5JS5iYh&@*8dX%I0skj:@-&d(d\U'n?M1q.H;%+a!4*#P[q?J(T&@o/^&=UM2_$!r6q,!(Kc"&-+%!hH+'Hd44Jd\ReZ
%FcBg1Ec)Js1*KGi:i9isc4"5:ge&>aDC*JbWZe";nniR3LP%AKaT+pZ#*]](AV=X:qD-7B?kSdeLLV7b=W35garl\bTJSdRJ5RZt
%V%Eq)KQ"s<KPtR4$K%"X<a0GD>lYnbjVVNo:W]_:7CH>;.I/8'92V4IQNj!90?:jIk$D5u.M]<?MRoH9/#<c6.-cI8AJKoO.6*!5
%C#KC(;j&#h3Nk&o%L[=l5/XX9Hn)GsN0JGt2PqlTCeTa_fU-1<%J):`>U*gi7V(F\[Uju)6jBfZ"r3Di.99GnR0Khb1*r@9RIf^\
%kV+e_iA8,>`ht#=cU_1d@;(PX_U,[bKV:C1h_7RL_H!SN<KVuN(mk_572E%gZAQNL'HG!?ZuC`".EROoS6$LrLTNQ@T4)46GUbH3
%N0"9)@;X.P.'-,N:0<uq^^]lnX]M/nE=5`VYo6XiK2n%&CSVA?pmV=dpm]jp&cSXQ1HKS`>o4Rdk9t`#ct%AFZ050.$42npZkb!d
%"ij<^1"_5kS-H!U1/oL(:^p?eZ)Yls2:A.lE]V1a'2GHJoRt[Bac+N8<u4>]eN!i+j_P-K7V)!k.I/8G:/P9KSJE<R43,,Uk'("9
%.M]<?Z=j\oPL6DOU,>hL;0\[a6[51</b;(NPu3sUlD!Jr4ib>o9[8/`,mKkOnpEhBT/n-(`i$d&N6a6:L,kk1X-#/<,I1F:e&b]\
%@^2qpYmU5h5q)KV?rcWm,VodK?<ms[p?*iCL>0i6<+Or*WQZr^"Y,B;$e4/L(?cT__`U`tf16d^&QuVujiMIAADnFUX!i?l`Z]_+
%K3%f@P00^CZKaa'@>'YlBDJ,=-W#p7'Gr:b,g9(^>aV3#T.iXQi#Cg5>.?$s\14e'Q2A[:7:O*5OS'9IW.5G>W5U5+;+Y@6k.J8B
%3\8ZUi!]jTdAb4(1K)dqfV5+MYXL--@>g/^2p<'qE/g+@)Ng$X(cEcIIoKsR5=QPj<8K%`&Dj?OX1V;$AQ7fn\gTV`d8BBA09kFp
%aMK`2ek$^SU:;mJ/O!U)Nkoo_LX[J7&F#=CEp8Z0=I6"-**nOikd6:oUu8Vs,c&GO-mHqi@Zhoa%-A^HI@3^mOM",c9Au%k-mFk4
%<0cFt\gUa0dLk\r/h5dY@^)hnPn@3!-nN#/$VZAQ,B+*39.`gP1/*rMQpMf.QmsgE<QM`X`DlIGNi@^],Z>;T)Osf/rt`q&">6C1
%$8.S\>Uj8qKPi7H$fBIn'#Nl=>_APFMpk37W"BoC8gkFQ7V&_A.;Pm3;f/V[4gesgI&cF1)9JugUs2+ELJZ'gMGQ_WTh7a$TqSLK
%_F';*$5%Cp`'H"jKNP(&=@F"1&5<nEMC`5%MMa_l<?TLWN;s>8<R[p&P$8_nS!Q/CTor1$^8f6m=I#n?AU:@iY5D6,;$j7t+:`Ek
%/Rfr9`("8L$NX6>X2lJcW?;tVWZl&XC'7Y[WgZ\JOkdN5g3hFj#_e5;#ZYCIW`4'Qg8\m?][[:^&6D@f*9=7l/qQ^77o5=:/AtLV
%X<NR)V)#OgKiL89iNQM(8n->(Wf:Q@7FL>'Ne42T<IngO#,76;:-rSnc%XI^5nlZO.#<MGed/NQ"gNq9@Nhg&@MN%a.MW\dg8[,c
%gDU).EiUNdAL+`;O>ajr'LF+LWn4-mlh7;Wr'$gbWoh0>N?ASUFVMb[Y,b!-Ul<r^/7Kd..Uj,q`$uM?9R.?mb'CCFQ1V'_<>io\
%$`)$o*J[H^XboqD(84>h-`4YYikg2)&./G]'Z)"'XMq5,L8trF<X>jc<^de+8p0:5<*5^&#T)(/<ALX&'P085/rCDdFp'iP]*^SD
%1?aZroFY9..P8<c#b;N:8"^g^`^XWA.WABunI"ednZ'[i<N0ZQ'NmjJ*8(V#OCU5B.O2KHJ[B^.UC\m]<Y-136"m'gPL*l@F5b;3
%&;;f"$K<1@2O])q<9E'fZA=2GX,'bd&Z\kXc9e)PfsPd3UZd;kB/QAt,M@4%[/%&g+::,0+f`UM<2o(,1g8F7GdJ&N+juC&367r(
%LlIW2)j*Q?6s2s[,)]R"U7tJ!'o6gDUX4m[C,H-hg2M3u8D:`1;%T!L.hI]]5VuBd8a*R^3V.#2KL2m`L%&!#D1c.%3+1-JT*[P-
%\N+Xc9ei+(dYMC+ZgOV=%*+ZTM`A-S\jiYtNif?T^R->n>EN$RXU'op+fhdFD49jIitD?mi)3%H_.A9c)55`@_T]?oY_6[O!nK'S
%f"a+4J20kE1-gO[.mTA!COd=3:f!Ie!^Wcn(9)7i7;*Fu`mD]O+kr"XV]8lWSk?&kmF+U/-R%6Ek019A!0qF`$K3\recOE45m=KM
%U@-)Z>14RI=W;KSQ*Q:a[oFP;\;_%-j&Qg3[5kiOOq-Ss'LZBX.RYT7>)5Yj3XOnK2&FPT"Aq_!UEC&QD@L&r?mm6X,(j">["?s"
%CCO`'%4Wjn<pd!8DCo>Zh.f9O2J:W1dNRJ-Jgc"MKr>\i$dhLJ-R%?Hk/+cj+:@db'Z=GJX[T<]M$d],=i<Y+<Q*%c[>9g,<>=l'
%!YP!?KNQm9RaA"Xfl`F!kdP%E$EmJA.aurK1dW8ZKRTu>U[W1HHpYUhKl<?0CE3UBA5kYq'j8%5XAupU[C(OEPS"9*<tPfD2tD`W
%K<#<<g72Fb8V_s\$6lfl'qt,6/O1&V6:/Oh[=s;RiF<eo.!WWl>_CTI5K[Z!aJ'DqXhn)XXi5(O5t0noWZNWWgrL-C-E\[PC3+Q(
%,TSB&(l6>='o7TdCEQe0lQfG7eQfVo&O[u+N^>_L`jL?iA5WH0+q%LD[L-,^[hc31ZAQN=<?OWKN;taV=48%h3O^W&%O$$)6=JRT
%5ipi@Hq)15(Eqk.W=(M&,BuPs*JJF!PAB*F;bJ"2&QuV;[T0h(^U8#\aDcis.k$XHCZ-`n<tcLC3P-o&%P;l=5%31q5UG>lKLRG4
%;5WHTk/,<$+:9iI'Z=ElY!Hl!1M+KoA.]4.<Y6hef-3+N<`,6p!^rut(9hh#24`,UjOOF/6d?^):cZ!'>u2HB%5/PIlQkOreQgb;
%&O`>UNe077caAT%Uf0R\,)_hF[gH69\/)7T=[1m..LI?_7W='TWsOd2S6Zq#LS?j;T.k0uTTX:H66g'4KVGN9$V*.--m[VG&;OE"
%#-g/hPn=stN>i3"<Wbk7a0h$S,7Q+P936WL:"KGIT!"qH>'"Re+<@3E."oIP<J3ud[0VbVFV:FOC+`39#bk.<7mXeLX./5g%Sj$[
%c&,HaXEM"77T8g)*A2b0>hud*W-1pJQ:7<N`77RJ9,M"aQlW]J39AFXG_^<^720`a7B4LLDI!r.Y3lR;6GaIV.P]RTaN=ci<tlFQ
%Xp$.Wh%@/O\@NHQ$5o^5$qqi'$;?^%QmuY&KW?X"$Wkrs'X"SE<=R6RX+-&.3s(b1E!;S#$n`:#1;_QVKnZRCE=#]j"Kk%nY/P+N
%%+L(A;Pi:Y<$O/#NKc;"Y-'Z`k3?-Wb15$aWf6#i"k)PuN^G3/>XbS8Mbp7EPAkYEF5cCR&;@/H$K<102aXTD6*)8g==C\:=@F"1
%8ju2-l7*A-l:-;XX/kJa)9JugUs7F1Khs5.C0stO%BN1P_D51o1fpi_KrA84;%NuC\e_Q511DK6LkUG]LfIstX&KW<='#ti=#U13
%>[:(%b"-DU+Dn:L3.sW7<J2j-#ZW?8$!11c(TqWY;7O34+:`F7,8WYBiZkDC+r1Ng,$'gpXATqkKr_6qJ8fW_@ccli6IeQ2lQU%a
%F[n_s$EcWN+p64`747'ZWoh1KN?AR0G8.t]Y&8npV1Mf<(9p\T'sWWI@[2h.bgf]5_UXVG$WgCCW\T`A(J($r3sqZZE7O8QO`gP#
%.Xn"/F]EMAl:)>=X#g[J+BR/=2H!"\6l*%(E##X8/7OkO@clq_%cutZ^rk3XKW:!lecjLalAe4['O4)*,)]9oU(_Tj<H7!_7L4^K
%3sspX=4cG3+i@<:74T'W7B7Vj<i%iu@BQb.?%f7oi@7o1'8eQ8>8K_dX#gBR;K)f1&K,[[.f'EP=-XQ(DM1cp\g,Q2EciV6.M]HC
%Z?V(TX*@WTnZ#PFA?N)0&?]mR=1Gi1:mI0u\j4tSh,+HCJh%+da<3<;d7LjZWk!(k,Da4e*<gGEWuFdJ<@[TY'j8IA_,\E'ZA;L1
%'5-:hlKh]a\l!Q8\@S,*[?9ge8D7>)E=dhUWt89A+f\L`'!ABP/mR3<U2Y6F5oetN>/WnQLlKJ"((.2g<fohP;Gg<$\dCj8\l!-0
%\@NT1;/J;)*[GU*mO3l`_%hbqA0;eikTjD=eXX1]&OPIAN^@t6=#[7t91bge7@_p5SWkC$mO466WWGXMbLOiMN+_<K\[mrnjm(hn
%cFGu9XtJ#[)Yg+KF[]cM\frubL9.u_\%'!oE!ZhPE%-.ci%i0BN,Wo.@HQiY=MiT/!GddtCLJ,1j&D-E.O87"WpF!ne-L\Q_UTA,
%_UZ%bKrZ^jX"ZJe/qu8cG8*$5i+hj_qQ=\-7`mau='%7lY-%r,>hr6_#J%DX@$M(,&]NRg.Cc6>$@OkuO=FfVKr_7>KW?%8(9Xee
%1hq)T>pO9imPp"h_,Z:`hmF#TP][VAY%fRoh$B`oF[n_;jQ]pe7`pNeA.^<q<tH>IY!Hm#5t0o#Wgsm-Y!oEs>to"^k3TZMg0EHR
%&;>_:&='tF+W;fq,[=X*>e%?W7,dEkJiLj%N=`-i&;qr'//2>XXRoeVfLT.6iT_m(iT`mgKr_6\NS9n.(J1*s3sq^DE!;r@G7?e^
%jH36J\iMq\=#[uD>hr9P#._=-_k9ot(do(S'ah,'<Vij%Co!"l\@RQ"\@Ree,[=VLB[l22\k(O[h/O!oKW>B4]k[YKO;/D2Y,X'Y
%h$>*DF[s7ejQ]pU7`oCE'VQ6KY/438Y/P1P5t0o#WZNWoh8g6DY-'*.C3+Q(,]0^P.#:L3'o7UYCEQe0lQf_@eQfVq&ObdHN^>_H
%eVsR0;uhh)!\>$j"g%?%$eS!Q7H*M]&E2nDJ=3I=l&=2`>8Ki"X#gZ^ODkArZ?HaA,NP8NE-9FTKt4c,4Q5Rc_DfQd[;_+iiMn;X
%b9U>H/*pOL=+q&a\@R8Y\[iQZEcj75d@%?,_J""5a5I[=Xo_T!Y!m$"1)FN)Y%fRoh$B`oF[n_;jQ]pe7`pNe'Hn5!Xs-pCY!m0&
%XJ0ZV"c.,?/R[]*C-&,4aK5\<S#\UXTi,he\tJ\$)dY3rek*B_Wk!(k,Da4e*<gGEWuE3_W?;sRKU>?@$<Yrm(9\'J5N1lW$K:8>
%E.t?n$'!6#>o,u"X#gf`:iI/BdW[90,A!F!X/hZs=#Y^Z>hr6g#J%D]Z&peN'h**eU#9\D8Em`EEb(t37HNeA&E2nX^rk3XF@L&k
%XUCrLeK'EA.(G.2l+7_)Og7a!eQ'kJWuF>=Y3m]o(NOZ7rdiIIfqDu`Af(TLn6@]1@*`Rq8;t'i=b0H;Ubl=^aY2Z=Anf.eQ^OnD
%_6BCD)#b2OY)":)Y"2P1cE3#!`RPu[:.Vkr:*g+6$<\8*lAEHqe[<2GX#gC7&6IK#<$B.YM1I*$>_/je"&joTRrEL=J)TZrR)7Ag
%TrPq3FnKZmF[t@&'!C.jM8?#T<^sU1U9JTZ/M?#INkdNne[7ArP^sa86)kW(JSIRWX-']Bb15%^b$851<k5f1:6gss\j4tSh/N^S
%Ju]/WA.bh@F:taZC+`cI#bl9\7mS-Ul:-S0.Yq)8&ISbD&Z`ts<iN#G>[7NM>ho[iE-4%/.O2KHJ[Du!UC\mY=7*&GXFXBN>$0qP
%MWW(3[1JV(3sssi=4\WS;FYIj(9p\T'sWWI@[.:0iT_n%k3>EdKr_9=<#Nf[$`)%t*J[H>\;F*O(84>h-fO?jk/,Z.+:;1o'Z<;?
%DWE"?<."f`=i<YC<Q$AmLfGpW]5VoC!t_W<7BBa"9rQc:G$QA1Y3m]o9#26u7V!V[WTYU4?.E2i\e.?hlAgHUaOQ7]X&KY2a<DB,
%Xs-o/7BBBaOh&&\6b']>@,^Bc6<-KqlN1dAF[mTS$Ee]'.^Era9#^64Y-)Ll>ho[[E-4Z:*9?Bg`(%n*NQ<:Z$EbRRO[Z?L6-NS>
%_4b+>$WssNRS]93gq#c)>hsB*Kn??2<Fc]A<-2TPXsu&/h$B]nF[mSpip'^[.V-%=Z"SiCX(YLDdAg/Y0$MkrWJb_</R7E&C-kdP
%F6fQ6EHOdE;[T\#1EqIs84=WZlDi:LeW%o^=*FeY6*>*Y<i#k!72E('E##R6/7+U!L<S1J'Z/C[i!NOe'<3gN>8Ki"X#gZ^;K)f5
%&K-6k.QRl;=#CesD?NhH\t^AXEcn/A[n:62XWi[*.(G.:72E.#A`>7G?(G7/=#Z!h#Zk(@W]$#G(J1*s3t@u]E##+)/4>b\:;YO]
%c%W2;5npKi.#<L\?&R?+)6jcV`'V:?`%&'K<@TI*=''qY=#UJg#Zk(p0WGRpf7TmDeK"fj.C]H,L^ZZr'qL#YX-thG2aSoth,+G2
%jQ^?ua@r9j=\`a5K9MJG&SaUpj$Hh02)/1A!KWni>Mhld\QQ(Q<akd60O3EBN,R`+V<YA%13H`3<"8YFQ#@7W7t=L3/q[&Y!G-pM
%)'S:N^<G%`R"V@6iKsgP\e_''1.W-_PfhEcPU\C9NA.:Y/6t^f,[CLN34^ZIg2\.r!bbMS7j0Z&?"oQRZH^fg=XTp,MW2k,2<^9t
%3sOOa5;tp0;F)h-\-iX.=8SYHU/%Xb<`/Y&Jj\b4(9Xl_-(3/KoBO2+PB4e';f]&!;j#%3Uo]cAF%(*-k$!.!boMFTOI9nC)C`R(
%ObIS<\I@)G$sY:l.Om5UXJuhQ%:&#V8i!.tkLG:6VWEiUVmK^FV]q&F86I=6jbi'7b-h"tPWK*,+=B+"X&=L!U'RoBEWrV'/6jE2
%'nqi%3/!H1i<gf2Or9fNY:bbl+a4Va-0-gDPo+U4aFfuoEb-@-5->&:FPJV/#2-MK=.iH2$Ub\;<Aq"1<KT^cU^U>W\,oaQ\CT[P
%0!6HU3ceV5(i:bj3.+'3'mLq-kZ#V1#o-OK(+-0fa$e];fEQW2(93KP<#%huQ%pkl<FioaBi%ZP\DlWW%G*Xe_SVRK7VC#I$_pG5
%*JMh$E#G8[)15K-3XH*o'Gh7^`Q&\J1%5Ab\.Mo0$<e$1BU+-!BN8Tj)C_^8$s^Ul"C-kNq6uO0W6ACe;7,SsUYmU"QI2\MJ29N`
%NsP\b-R?pM[Fg.[3sOI_pXWe2;T>`2#cho_"fk0F<Y[AjiSH<qV;<,lb.O!M7UaTCMkNkX*=#>r[t7@D(7pZ2gldN'U:B]1/O#la
%NkmZq]!ZL:Pi8VjJubtWJZBt&f19%5@GN[K+l+'Db.3d:7cf_3%uN:,Fqd&+\Wo.*MJSs$86I=6gkt+.\@)*bE'"9]+Q#)/X&=L!
%U'RpkD$@%4/6EXmI_rQ/&43k6=G:TBac+*,<u45nCc`,sP&1AnMC^k7AY"Kj.uF_df&@@Cm215'9NqnV8/\RfU=bM^D'etP+rgJ8
%d\*<iD&J*?D%0\1fh*`h12#-+dAGTWK;UP1JYs\"cU_1dU"P=__QpTEKOd.Khh<%SFKl`<'bLfgSMB]o78RAGg>t'.2M^NcRF/^"
%,3%r5MJ_c8Hq`,l0Z>qo(h?*?.hl2"72/sgW\U)K(IX0jqr-Id3\/i^@\B]^FV0A1kUR'GMb=nq,@Cs8Cb86o#*^Sk."sZ3-rj_Q
%WfU3oJutt)"C$d^#dtpV2)qY>qCR<dLVjbaXM@_jJYb]a7JO9bYOH<Z/E,3@J2PEO[4mRsi%u&K<*?PZe;+N4,@q%D?E5ZCl*V;.
%dVC_2.O2KHEO=u<UAtX8<WT5A!`Z.t,j\]7>hHFr6=JK+69*&hN<$#D!NX-?(=&u_<fmQe;UJ=^[>KUY[1Q^gf4m?H7WRhSBTm5P
%!*%+B>#lA@e#H<RXj!m^`KaYC&Lt85'Z*.RXT`O:!O.\g^quI=^acX?<@WNQ>-!1A=rZE8C9=@3AL+`;N]+:g'L3hc.R4_OJ1;;!
%KNY@5$aV`X.*UCB#R?d*O_:=bFq%D[!=N78!NX9C<iM&B6EJ^g?\l**YS(_/TkYh*Fb-oV[:9at>uhLTO[3ZVU6>"\<H7!J7L4]L
%3ssphY;QH`;?j38$Wu&e$<T_4YY%>OVU[.)U")VWKiY5\<>io\Mka"I*<T-[ZKg_SaSL34'k^<E[Apa@C*SDKWZ?e4OB$&s)ef:g
%,SmV'AJMG,/7=_M?maD2$mjG-]Lo3SKW:!lf#?#`eW'\Z<*9C'+q%5DU(VN^<H$jG7KA-@3ssmWVq/^b@6gjp$W`Y#$<BS2X@dW<
%_N\5pX9bZRU/agf-5:#N[k<IPV=qgC.8a-])3Fr4UnWl'C/nnTe4/AL;*+j7+JUgrX&;Ef&dqccZ3jZ%(9U7u5pk)2#U.\eBSB9`
%#uqkbXc&rKW#Yt:BsIfeL^ZNn'pXGJX,7:W2F8g>g//+\q6\Oc>GXI<<f$u2/6N.X+q%ML1/AZHX\PaI:)h.bKMJQS<?'&_$`$Lp
%*JI<\ZAMII(84>h-"59&ikhRP&.4nM'Z*-oXT`O:!O.\g^qu46^acX?<@SmoR9";5R5Tqt#an`R/ZK7mf)qgCVB(:c.C+QPL^ZTp
%'pXGFX,8^"2?G:3g/.i'jO3%$?@[MGd8'9?_q%t)BVu;/XWo00?ItcQX:ih%126=mK?PrH-7q&>(b"ktBr9=9`,]Q\BQO\dFgZ.M
%Bg3H"E+B-;8dm0o%&sSu<n(\5XT^"]g(Bt^fsDNjOYTNR&su"K'ppI*0T@b7-X9gU+CnZ6oD^K2I9PddP2si86%+O#Boj,'P5cbJ
%f`Mim"J^M[l<9%=<:gTX\j^bB`I*$OaUGZA3TiefHUF:"Y-l%4DB9B-@K*TlN12_ugT;,tAh_qQ%oC.gbD?Pd1K.t0'Jh=hQ^cRu
%YgXZQpXN'od00tb+C0_5P1=[lW4NU,X22;[Tb0A'a#AHN!nDChRsBsIg*6a\P(b$?#n!ep@]-'kph;gA1"76gpsi5W^-[a]T^]oI
%)nppBfBCd.ITep>A#M7l*45pLkt3o+(bN-c#f\5"5p-gT=rkRY9Aaa=Fp)<S4[ee?VmbUn)SSK+NDUJ*5isT()N:F,)R7e8I,h1P
%:eb$&RE'!@4[:]-g$f(U4b7aRMku`o@6Cq<]9m=DZ2<gdm2cd'o6^N@fiVfo$Y6h8Mf1_cn;XEUHhN;sQ9[<5l"2!3XnE%:Em)<Q
%M!4q@4#,:6FBl3o]<]s.,59VhCT^!^X!"pl/.5T'ZPC&/LoZgh^=[24B>4.U#uoB=DWWYlCC^up/K9:n7*oUi'O*/;a&h"-/7\&j
%IUAYR*F7%="bLXYZHrb1?(oeVI'q=WZ*pE3c<B5WF(LhTN7Q\br8O(Q4V4k3=R%0O>02tKeop+`XZaVjX1-YjKbdfWO=eX,A:p7#
%@$-GT2B8sPROm<!!nD:eRn8S$g*>tDR"ZTCq$E&3/8Hhca'7:1N4JWn_6<91o+bGV"i3-`=ni&dYL%#<hV->4\^kkBf+P!Q[qn,_
%7XOM'IX#JX)ut8,+LF1e\X'tiY3cM7?@.Ld=+>)-(GpMji*3WmkQWbG_!3Q?=uaH,gQ@K1Q9]Rtl"1R'_=e/H\7VE>A:?kGUY'AH
%49!ro?jsK!#_$pKR]k)t.u8UMCpP[GJ@lI,\i#;Y2DemI2-h31`2VqB2U`Kp[R^,32[_hmo+P:J`F)?rES,F;A$J0bn5jpPn*B"E
%HR?!*omUUJlLPn&kC)aZr;;Ys3dYf5TPH@_!,^s]Ms\4Vqu,7P(5qRnrVQPqfe?p@%FeNsK@3D(RlCfdgYYaXf%D_ZJJ_L3&qb&4
%NPX2I@^,guUqZY?`=]12Jr!oqZf)/k8$H_Zp=_>FH`]<J?5ntY.b3&Ii3*%GUgff&.1f%$<@9NQVV@JR9e,;ZhbNI;[oOaX(/$rf
%M.JS-"[Q*q[>2/UF0r$VVM_dI3-n0)M8nb\4[^rX=m,mC*afnDZ'Mh.XR5f%=F5_Y='r)o!er=hl,G=`>p.Mu9Rj=t_P1kS*S]4]
%M5-DJRqRb`g*?5DbOT?SUlSG>5#9@$S$k'%RNJE\,Q,9%C.233d1p3'Z-#BL89=l"2jRY2QDM$")bVc&oTF#(NR:UMLgH%GciXnD
%^bc`m/T&O)g[U2qp'AF:ITer@!9QQIaE1pUKeAJN!p0t64"[r;fP+%r4"Z"?PB7J!d7nt@+"#\1'*LONBddRsg5_T0itjN=&Un*#
%[&+3J\j3,3M_&t$6l.QUQ'E*tZ-mf3A#1K5?BT0"0fj$0d).!L6QM8[l2^EX(F(MKa%4tTMim]=^TTh)d1oc*"ds8pZ-WXe?,4f=
%)f8,RUGZ7lZinfMZ;!/F([WAl0ulTk8Fuo2:ml"]3[WR@?;.^rk^E'LMC_kL"YnP0A"a5TWds;qZHsdd@\GY\/@5PWQc_4+(`]ot
%SJoN#:_NshJS?G8=uq[p[\FT?m;JoreN[iLJDgiGZE_A8(._s:dpC^?Tb.*;a#3Qn!pM#a-5rY+p'<fTZ(WNNH32Plbd4Yso5)H#
%k1M!W^3XFoV#_g<JP8"g=QfgC/mqXtXKtIZ=D,6/6*.BqdS/(`4@\N#+au/a_@K38!7Oc'Za:b5Cr\3Kfd$F/qIW/t@*o^"]!9.>
%(J&WKdpHptY_[/)gQ9?3b9hpT.c&<YFNklcLD`#J"MmlA)N&6p[`^M^d>M`4#eaU0RD#f@k'gW:K&*9toc/?b?@#E4W\&[cosW_f
%B(*q7j!"],Cj+([n!@YW]&B)`)dbh8g.sbrCGpuSZN8VDQ>5i;E6TH^'gle^JV]Z.XdSrrdr>+p9e3s2"15f=Akc3;nJ!7CZ,DAF
%LklDng5C#1']PW?dl:tB]&>[fAe(SWp(058Z(.CN5!Oa%:[u`YH$O$s&F\s/L0qX#*F[;+#3mh]1<&O)%+JRET[dN,ZOht?[UU<O
%/:hQJd`kHTpZsVlZ,K$Aa:s>/:[ucZH2Ouh`V='V;>f^O2.N?!=HFA0N"'8_@Vg.%&I0n[ZZ4?\0b.@geTRdYR>_X0@h`F4Kd)U-
%$E]oZTr%@*BKM+AclSqVeO/(G"q>&b1QFI2`^",eZs&EH(*[bGG)YIU,uAG[\s^\(U-1n!#2([5&OCtjkDPCegLGW<*P_A_&+TP^
%U[9*>5kDnoA@aM:_AC:HKbi].Bjhu/D>-.,-S9ma]@+qt7ORRXMIhs)@1X(TXG5`2V<rMA4+?:f4[eb>Qe#u,(0a(:)j;gpJ]q3Z
%efo!8Sce#Mm@FI@VBo&U=1XgAkb^L2&Y!Sb$5,e&ePlCQF<3Y`8$W!!LDYL5drpC16Q!mtA!D[$O9l;s(?;?I80##XiH!E\VlhQ)
%9Or7p*b#tmC^>WKT>4>Wn^L1BPc(sb(JjEAIU>7GVCT%;$8UGCb<e.DklMXV\8&n_=0:`HW[1J)=1Xg>kc-ec06UJ(!h#b/B[QD$
%dWp5J*Q@eg%oN8iX#4C\`E83>a"Rm2+>Xd:/]Lp4,&u2&0[<k]eFf,ELWJ\\4i@oT/DC=NY8;jm:\!#aH+^O*`HZ//;>f^]m21J1
%0p!9>D&0uSbSRM[Mn9`?ES#AUj/s\)4]f4_`osQg`\4c'#QgEfd-<(Z=uq_Z[\F[hm3.?orO$5gZks2AhC-BH(.UXH*!tG)`*jT/
%ES-^6%U7rBF_.&!N"4TP$tGi^+cmQKXe+OWV=SqJ4,WR\*hrE[4gpDMgBQQ]SJ1[9^AM4Xb6>rLj4\\1lRengffn!-\&[V+P0#WX
%HC+$"XeDpVftM?n1rj-2:iEWk'_gjXD!!F=C_(KCIl>eA`!i.&edF+bC)<5=B]68qc)eXiCeYPH8:lY.%(%/a,*M_;\(7e:<qk6_
%71u),JbW$M9QTr\c1V.<3,$2:7'&)rDS=u7X`j6fMA8>0hotAdcdjY$(/7*SM1IQQ"c94K[TeA>g?(5Od8jL`ZqVOCdn2OI(lbuE
%pr,N,59TR8C0N:KZq]F;D+tS>m/_fGS[KPGd-q2ohcORN$Y6trD6$%*[\4;6Xm'<&9cUmr8iG-8XgX#[iM#?h(!%JsQu2Go)R"#N
%/[)8^b%l?Si)d+aq$J^fK$6/#>5//e05fP(MqL"9A%"7#bdNAGH!8=%)Pc!Z(r*Roi<NnBfPRZ8gpZGd\#ftr[QQnFX4t(0+99Y"
%!Kd,s7LNQGo>PWPpN#W/\_go+'joX2'8ZCiZHYL$]Bpbnph3#kO9j!J>:ngC:#G__9b>),!J4\W[N/`%n-(T)(hqq:AA1$@X2>cl
%_ZI`Xl!h.s+R[]N2U`KP[tjb;UuhC^a:EMtDX.T>a)1[mEGL.cD@[<VlF8]YTuC)pq8Q#7?QesZF'F$%\LeT&gkr6c[gC!'>01@p
%UZM1d^NaJO#@r:NDQBUYDUUM8>P#aRH[t!4c`Pk%(0M2iNL:Qb5j!si2X2QbgW1%%[j!?OD$&`bh3-#&#1Mr?DRaDu9oum,G$F@l
%\kUAXDTrXBm;M.\eTKVd"V"TWZ]1Lk[QnG_n$X-nm5>rgh3on'gB?M%X^j5Id<9km++Dr5'-r#^hH!;EDUUPY>8+r!H[t$UheaaD
%6)1T6bVt8[p]?j:cJ-dd(iQ1?1#@4tJFPOK\54^1b[WKd*[;Ll/HgVu&F42@K_%*Mj1I68S@8_/IWaM9YL)8ZaF%KsKeJP`ik;H(
%Z/13>else%Yhj!&Je<.K[_lU^hB!ksV`"Y]M4i)%eIp`noH!D&q;K"M_!b?ND]cHsfNk,Wlqq%aXn>iZrko3@=PAB'Ep:6GO7iS#
%]Z;4\c/.3qXf[fE5Pqa3Dqh,`C(&[=DhH\h)c5@.WTO0bn*L-^1"D!pLj06]RYgbs%@?h?[,Sb^5jPKFehi'r:I-0C;f.>BLoA+k
%]m+H_+l6EZNV>?()m5B5jtM+"&!=b-bNT>oo2B>q'^mWEQhT&6n_P<rpsj`G&I&\QT^HhO9<GA;5huSM=tRa@$^#[P43$gI&u`5h
%h99F%hB&F/9.^j/9MoKr'^mWEa*ZQ<N;*#W`NS-&1DX/Q"c4t"g+X9f`^[EQn_Wgs)t0mHj1Qa8D-+<:alpE$7PU34-j#g2d-<(:
%><7i>[\F].m3.?o]sf"lcnGYZj&g&)$tR@EX2T=%+VO6\a#Mp[!nDIjS!f5lgHuZbWXV<,&JS>k^3FS,4iVj'nVd/8&APF*g[9Un
%1f"NFVAi/[I"=snBJGPA(<5n$G0`PGh@ccq/)AE[o\LXa=Jf7="u/EZC+.qCg5bp9j&b*l6hJ*=Dp;<rYn^fXZ.))VaF&\Z/`OJ*
%3AB=EmR]+h>6<>uV43m3hV1C3Z.+N&+Ajt!4iMb@kOIDP'[(iMLuDG(D+>F"KRlfVQ<FOrRBY%Q1#?,j`-^5N0(1B3lFO:G6q6Y4
%+bh`%L*2<I#qY0Nn#`BYH#Gcjn_P>HpXOV+\jD=X+O_o@/TcW4/n!(dpGOSlhO6(R>6<>rV421XhV2Q<@]>&(O;SCb(+nu,S]?*3
%;2k8C&B1j0>;I$uN!5Vh/@@/911R$.@_B/n'(;q/j1Qa6?#SD>LlC3F6O^6LZ<[J$H9l6;'^mWEa*ZQ<N;*#W`NS.QN\P2a".=.s
%C*=S8Hi^:_G]."&mqkQRhHL'3F/>@?N8E<!r*lXZ+HRHJXe+OcV=SqM4,WRb*hrG[HY^VfMm4DnNFJkuE<P@IOjL4!]XK$sn#ZoV
%]d6EZ=14O<ke0.!0U>lZ!h#b/l7(Ro3fj$DUDWIe+c=%cHi%RDi:Ef:V_7Ao/D!BEN1`hu!A(FNpYN&#dq=5gosW:kf%\7A=E)%O
%rO.c">?.;fZJGfNXLCL[GY9qn(p19^SQ\.``=1q3L]MCq`-Ihij1I7M3,a:.WNXTOE=<\E+Q=52D/mL=.uo-aB//8?q&"%p0uhsu
%oX\V&RidX!^R\=D[7(G[X[iJ1Xi,FQDWA>dWVC@\4/q\_>EK$t90o;/S[NdcFt9:R\,NVfEfQIQel8p1&kC95Ch>ETD@b-QRl9nX
%h3oBuFVNFZD9$eRnVc`,#f#i2>LO#g>p.UUR5T.Ah3os02&Odo/BW(hZ&S"63-q`<1Q0@sH\<GHg3f@K\b3ulBKf58F.9W.gmT=V
%gEZX1HYu7g1irnhDQL4=MriN36&TV3\'Q_MD9"Q#>N4kWP0GO)bO$I!ERKR_Na's7XcDDNV<p6[4+;2)*oZkLEU2e<TKEJ[R;Rtj
%To7m\F@#4.*lBS=q&"!D(W.hU1gSdH)O'.R#X<^D`D:qenIo(H`G\E(n_86bijV(fn%7K.FFumraE1pe%:/>/V@-Q:QJE;hZ.jG<
%A%*bGSh&L<@^=`0TneOa%s>C!rDX#*O*,HsdWXES*P]+$O7<&7[M<)pckU*&1!t_.Am<^f/\5N%%117eArG?.5^KSD1Q0@kH\buj
%[%W9,f(;5.U[m-eFhG.']m+CTd/3+9("n,r$=^$?d"X#N>>k]b*\"-AJg=B$F2_le?om/-bnNXJm;JnWK=7`#Be*pbX.)(ckr;Gm
%N`qs]^Ra)&Vlcp&Ke&8,`]tKK(i;t_[/);J/JM[$mC:/L9-?B!ZC/[BZop_ds(p)HcW9[k<_)]5dWU#H*P_AcO7<&7ZaH)/MO4T'
%h:Q@-(RqPkJsHh*bnd8uRr,V^Ls;5NR]^H_NQGdZLgSrDiJ5V-r'7<X\85k@0&)Cn>dd/tI<XA%/njGU1>S=16Pkrgl%2rg1"jDf
%-JNE*&sFo:'UmmamEh4o[R^,OSLo<]fSZ<Jl6m]Xg+JG'7kYq<,P6G]a*)/m,,a&!o:iZFnEY+DiV?a0O2j-Mg3IL9Ac2'<K2aaU
%CmXhbkOa*#$I%Y;?.pOOl#agQ)oNfPJEh;N2>9=[C_-#mGrE<#`(T%>9K]at\3.3s'p%__>$jG$VCAls$51aRB1!A$6j7Jq`FBho
%n^s:E4LP:HE1ICnLXBUYL`FuK:/<")T0fTVG\lWW4LQSma7^(^Y9)GY0PC^oFdHT@B6??Al7PWSC,$c6Lr<fX0oj;?5dan^AgX:n
%p)(bNB;#TAMF+AAG\lV,*nu]a4LU"nIeD?^Z-Zr28;sh!L9VjU2S-;Pa-P')G\kVAO"Got]@+qt7ZZpkMQtGn&]bZ?<_r8<dWms`
%*Q<8>%oN8iZ0`B\L,"c-a#XT<+>Xd:/]M9.Oa(\(`pq[oW4"54b[g@u*hjMCC`%b[TYS/1`FI*Y0co)0?TbcPpjMhfFq5"SH"$b/
%h,n=K$Y7+@MfCkf0TO2^HQJ'bQ9_i`l"29;a7^@h1=*fkL^=,`6h/gWG!*2R^[g"uUA*2JCUQQfXWXs0FV_PRjstOh&W\NiJaqB9
%:P/,h&u`5hh99F%fH-cCFZ'p;M5&D_.3;\SO2n](=<?3a%)7+)42RX6$tR5[c9`AhKS<Hbn^p/R*nu]oH#/=9f9L2"14!aI0oUB9
%"@9t%?n%FeCaEB0A)#Cha7^(ZY9$os'j>\_R;SF*Tc:pl!K1hX[UFa-eo^H7&u_BPh+V>NfH0&hlRW0ibYVu[BR+FY4<E7;@Q_)S
%.":jAR^(4K/BEc[SV8e[)%3P^j09&UG\g(kO"GA:HHW`aAG"Lq@Yf/mm/iC$$UUnlG\lV,*nu]a4LU"nIeD?:N'Y>uaGe;)$fN5j
%$X!AH@ge3>Ccf5ufFk-S/)<m/o[k5F([EUTJ]pr(ob<H=S]>6p;2iQh&B1go>;I$uN!4KF'^I<.,9UobKPiC$Ymlh?CeYb-/TL'e
%ZHYd,O6nZVZ-L2ta:*c':\!)cGs&MU`HZ20;>c\#gZ<]fYO^f/)c9t/TBlGu_t*Uc\!?Z5>WRr5o@-gpkHdjjak)qsQ_ggXgFbQ?
%gJt`6R]0Q#JNB-7:thsd1Q0(]H[oB1Zlt4p<nm\UR2BeiE/_4P(8L6t?Jh9]V?p?]K:$75[%W?N<\siX[s2c=J%W4e)6[mB)QQhY
%s+B"u!3b$g_[H@DGQCi$Z.l/7fPSk`G2!,3^A;]k;eQaH1/iS-TdgGQ\-f>JESPT?QK-P4ESM0sJ&sS^)(i><(rf/U6X7-5#b%>o
%\u#"cDEE_1h&`<ceTKV$"qBTX*TOYD@>kfMN'Yp%I('Y9hebkC^0BU\0A0q]U[e$h6O^AM^>d-)#:q9qY[tLBk?)Xs&aSg-MI4'+
%Ah:;+"*KR_WJ*'M>VcQnj1'#9>jg@,E87q@d9j3(6q7(@0nus`_@T5?)1n``(i\_%#2G5J%(M'@IWaRlNsMD(7L7KuNjBM@Qu^Fg
%1cP/RE-VM@#M4q)i"AS58N/FC9t5s,@]g//q/So$BR5OFQd0*Ym3ou/H\gZ_+)]+91lMNZN8q*q1"KSc##1$;`.^^O\/jNfE=&GU
%A=JF7<np%NZ.SWsLHF+KI@tlRM]%l,A&dma`f,8#i`A(A)%/%95TSmpCgi8gf8N#5\GWkqJKNKsn`(6QJ&sS^)%F-s(rg4s6Thql
%#b%@-P"Xi?jE:rAaZ[T3RjZg8!K1iWNbuG;Yf3JT[\,%8EoeKNilX,a>e(!7]ui7>(i6_ffO;5u4#qH&:2'K\0pebIbjF'%R!XA>
%=(cEk(,U+8FaW5ZKeI%Do*%jDjirKJ]X]'=G]O1e^LWgjN98n_$o-RmU&;K2-o=*+SkJ7OkB7PLcTO\dX$=(Whk8BSJNCg@h81#P
%Xr2j]36._N\rK.egFgF<9-=Zjh99E:kT6K9lR`fjm@#54HAY:\c=>;i.)r'0LuML&Xr.U!`]tR)\8Pf7ES$.8dpd^9&;a2l>HPiA
%b6it./):]!dAVDJ+pQh!P]p1CKr1bMFm6Q?\fJ[jFUp5)?a"R<a/a%%lX)6IqjW&MojdLf3jhD!+g:Qqr:D]m[n$5>2Xp]+ks-`O
%^Gp$mM=6MVIG8#!hQMfDq(/GiHM_l'5C$:#j1RW15Hguk_U:kN:$lkSom_VFl`qOscjF5c!Ro5uX\ops=J!cin9uIgBWVMZH^4,>
%VY+_cjgf50QgN&CTP_C=>V@3ccc5kQk`=nQG5j[BmENpAQ*EEFD-qI9]\``fL\0Af^MSJF0b)VQ<!);2l"2:&EBQcG#7ZPUV?iW^
%Ed6h2a1%h2"+5paY<Bm@Hg@;pQ@8hYca[_LVt+3GIa7>S[QDL0cs?rr]B^:]@s<m`]C!r@fQ>\!DT9`_UD:m*%b)M/!pM&rAgZOm
%5"78^%Z3NK#b%?*N9NIF\>,F$I#-dc4iZ+>qIbl0ZQHujH**F25:3Q#hlpJ^CO_;HpGRQq#m4-E]466%]KX>FNq)eJo"%&(3lZ`^
%@n\$$,i-[T4N>Dik0QC+a:pqh;iWT'k88CWF,UW,r3aST\_1<T")C,O[RRbZrg:4ODkA+?m1/Z4H@K*7<!g0(Honfl:JW"jgUY_c
%hVe#d`.>Ke9H`.:h+V?A`.o2l^qgT'$pi??N\HIU#^6\uKF]g8[7C"@DI8tRkhe%Qrn/A+pY5*,lE0I[hqNb_H?nc]=2Ot$WbpYI
%^Z=VKWbpX2YO;4dT`+sBJM`R4'9D\Y*ob6#;tpBM+(-#H3@et<TOiR7BcZ.+X.Pm[.iP)V'b);cM?Zl!q%X>]s,)Q&SmS*3^>SMC
%f.f7trYZ.TDZ]U-\Rh7U9Ma#j#kH1ZJj:Z]kNK#oNc4dVpmN>GpAi$:I=1ts:)$+1^aW-S06$'XjU7Ru?@RM>[(^UL_oiiPF*P<8
%E9?X&8CNi@VD0+J6i:uS_N1I-I\>4gN\523k]ZlEFH>qg[7@])rLd$dJND>Bnr;qtJ6V]!7]5GEU?6NE45$7d9-=Zjh99Cl^rIjt
%JjYZ1DMk+O.>O;9F,2o83Q-\$IQPR@nNQpB\,U=D^H\Xfj`PnJd_8Fr^3oq#qNSO^1oL"r^6V91n2='Qqd98^^\cLKIs53`mS;Br
%3kYLJQf\/80>'gHrfudY4J1?1VQHB7Vk97(c,fJ)r1rebG`GYeaa:Ri?R0q]J"CT%If[dsG58\>hEU85@E\5J*gdaX!)b>o[Jc<b
%l`#WiPOis(5Hb%=/3EM>U4`^'ErCok_X?41>4-)GeE.N[U1eiP"=+)^>d)m8.;mf"ZE-i(c&tm<KS7f\e7JS#n)*0+9^Q%lD]>DH
%=HE9(!kj*C\&-kn_!Yi4&jjEB2',rJ'JK4S*KNWd"Y`<:Wn4'*kP+\MVeK,b^Z.N//E^U/7_!JTqgL8<P3Do%VH+!HTsPVYqRN1t
%p"I-To6S*]51Ze,kOs;gbe1A;kqm$L&d=q35rBP&COYTWpp43H%tt0qK#4PGErEOU\t5crD?"F`4t&P]cV$46Q-T4<p(6iMo=BC&
%GrS,WC+!bAgJW1bYFd4-\+b*Ze]@,t?U)qcaD^h)qI-Q@)Lui3eSqIj);\06*kc6A+O![7<q(QAmn<+fjJSni<nkBAXOl2%[9U<]
%51[c)p#B2kO#?P-\`hL684`,9XWOS3j_Q^.S&]r&p+s@bpRQZ_n%G.EQa9FT+Xm[to:Z>IEIIInhq$Br5o?B$lMgAPH(97TR)`3E
%o&n?pnl4<:rV=)il7Dc;!MQU!qV]+QIa0lJA%B9:c?#=XegpTCH0?[(78e\U'A85Rr4K0re!o7mINHf,j`:2XT3gr$IE6Z(002]l
%-l=LVR)\g>ce5f@?e/HW+4g&B\XqAhMU2(!DBJmiJG)cSQhPPoT_l(O+E,"Wg[_$aCB(M]^7F$'FF=@=!keD6D^t4jg9?gF1]b$_
%Io_JaBb)071Kg.[omKf<e@llEG<=')H@PtBQ6cNr!Yt6>3e,rOR+Itlghr.@>.\:Y/oR)pp=CG2%BTD>Y67t1V`V"eg*M,qJ%e54
%gofYc;_71-;LuVt-gKCA$\$K#3'Z0@_r#+%$FU]LlhuSRei\PfM[he($3mOkbiAQ[AsPOY[')&rLt>l&*43c`qI:(k#Zcpif6b4L
%[2\9"rd8jIY3hK4[md3*Fc\H7J&>lU=HDA(IaMT6Xq*s^g\KWk3aI4f3e6UenYb]lLHPp^^qtO;d:[F-p$?"Vm<LslCYsR=.&6WK
%&4QnjlX2ltT4adG\+W.NfCRR#;!m'`c_ibM78a<:274+*5&S$Y3XiL[XEb<=hsJ"(^cc#lX''5(pK2JG(ZL@_YfpMof,lr@angtn
%QA?I>BCYNA(dSu`=LI_QTtJ=;h'uc5'6rD!ceJ1.&sb/5.L<-LU=L^N[eM)r)SWS.L@#>Nn^m3u[VqM(cW?)<6j83S%b%re\9S(W
%S$u[5CgS;H]q5YscTrBm=LHSkMtVPp(=>#c\'O)mDC"Vmqi?M-;7];u+L%<0g,B!Rb?:GOO!`!;_k$+uC?K5RGh^jM*d=69+M)h%
%b8dC!D)[_.^Xr>c?@%H5TZ(hr!pG1%1)`"?4"M#T&k*u\@#8-U,k=$TrgR)AQhIe+^UpE0]qrC6.[`Oni[s+3PWp._P;@r->,+jD
%'Vgj"ZN>Rl0EAAKYgUY8'V2<hd)cTX:B"c:TRrgo+n_L*,(gPa0P6CJ5?/qoe(?L\;(QLCLue[iKARCP^hY<6'?`r]Z)g,#b6^Ne
%J+E*dWYVgnU\Yn'P]-[MNZ"V>:Y@/Y1cETo<6UdUMRbufiHGG-0UotSR$/tV=cK)A'8Buq,iZR=/mupo%;:id_\Hj=bTMnZb9EG)
%fJKg02J\DqjoR,jh\?R8C^uA>Y"ZoK21fX>Qt5fDOoPgrXV%N;bu0uiJWe.!dccHQZu^sVc"tkS&\"2Ti\hnXP-(?PIf]E@T>O:V
%-<%jb)F<.*9]Gc08Uq/"eqhh.AgsFG5\Y^[C%P=`$\@q.c0WciJ8QRrH$`dW"at8=qUbQH&$h)Ca0pd(>b=jIK3Lb9Gs*"Bp:^$q
%kTH2=!U4(:"AncmU_?a#3f-I$]3M^b^^0$o"JBdc22-<XUS.;pdE5$'895KVon02<c_tT"6WOFl1Kua\U:1dPAPKI$l`P!021^n7
%aTgb)TJ_t)l1G,46Ua*"mfdF(6FV\AA>a'>[`K]!$*6TG;uO1]9efN!Ul!Uhl>9^o,97YmdfDiOKk;%Z`(%T1;50oYpOY4oTln%:
%FE:/FFa)GDA2f&r;qXE`q<c+cng7M8G?6ZU>F0`ZC9I@Th*iDB6^ai2$?2%@D4M)e1fg;S98IONd%\BO&/e4cbu?S4&_r9p,u1a:
%nZHW63.[4FaTgb)TGbm7]hsl<XD%!3&>ZQ<h-*.0F'jeSmqtg]jTO"*AHNO\3=]WGD(a8l<RKq37Wp-uM!p.m)9P(T;4sQ9HRg/`
%i?,=W9)Z2"?9IY:%U)'"AaW!5"\,@:>BG0&$h]%+n4G![Ooa<#F&`]_[<B*f8#P+JfBNL5at$o(eO)60SWV.&)tgdt)SmIk1:YID
%K&CNSWHQ]Y[_!W'4+SgNU_BQ85r12unRSE:M2P!X>Qn0aLj-G"V`2bBNtqU7<6D`9(kUX_i$RI*()?:eORWHCU*gh7MADR^d=u:k
%5UR,fY,N>A_U7pr2c"?ko,]E&5,`RDeM.3E]te<-dRDZt+]LUU;=)C/U8eB/>kI!cU=U&,$*UlXh$PCol#%R"..06"e9t/-k,Mns
%L3nK6pdp7\G=.16!g2s1-]#@,R2E&N[)dFm;=kd/d:*`bcX>lAN`t>87I5't5sj`E,"T2)]tdPDUl4;X6YLoM;=d@,89KPs@^P.B
%U?2bMi+o\hX)s"Z%F,V,V#P"?%gqK4-iMf3;r2H9")0ET45VZ]oY4Y'TC5iMqmW'Pl#a\6rI\5L#Gd>O"]?'erWt+JT2_Zd>qkP.
%@!$fPJZ']!9k#0r./uG%<.,AbdO^)Q6g4PlNW(juoRB\[;s=FAi*KeL!2RdBTW=Ok!.e#@U]YXCcl1-R"T&pa#E,n6h[@k?KiU^O
%"%_&1!)/Fo!.iZl;AC<hF&9:F,g$mqX13!I38RO,S/";h.5^'%V`([Y4AOCSra(]+.5Vi9p&J?'f`Q=t@J0[(dS8-jq*NjEXA&]Z
%Z3fa[AeUi\^D+Dbs$5BF5gTpOT&@*cn7Y\oaWO-L'j<c*$fL%s])Yc?(I0,!,TVspmKV6#J99HKFEOo!+>>:;F?lu:R_d2]*7k34
%/Lit&"DP50X!dTAgoI^kk\aGS#7sEb8I$Mu4+V2N\G9\\i4<_-#`R1Z*K]`RTGbs9_/UdJIKO+Dbl(#(5Y:<T]:@/>#IOf"bHkO]
%,VTUW8sXlj!F?!FL<Qh`6E#[OI=6QohA.aoY3h%:cF:XISj4%oQ*B!I^bjerN+8=1\-pY?ZO/*SWk(e>K%t6OD$#kPMZEFe*["mi
%qrABcU0-5e;Y8q1@WkOP('>JR^oEk]5an2)2D,"e:Nc^A8lA_"6ZCchgf=DHQ48@j@0)Io#lA-6;8r=eCIn*U@ESD;5ZRq)VpQt6
%rL`5L\W,l]o0iKm-n/FZ%)Hg70\SbE,5p%#b!0<3oLT4\Otjf)S7obAPmtG/[0t>HNGaF^rb66ggaN%W:fMpq'$sXr&FB)l,Pio0
%RU=;^q%JLE%l$?aPp="473A,#4Ri_g$)!\)/K.La)9OeJ;=A:taSjm::sQU=#gt;60<irTZ:4,\)74k0;"2RQ84E'Pf;RoN1R6o`
%JZ+(Ce7b,-e5(SClis0@ILbUfID.b9J%`>3K_=:)jOtY&:;'MRI3`&.fQnKmd(`o@ZUoN&I0oip(A\&GUJcYB714O\9'@X&$%3VK
%cjprsT1g@W#[!:X#;up;:D3Vt"G/I'U"']@5@#N+bmpEh<8CM75pEfT(nja:#lUoDKKat7n"^&+?-jM6c3/Kfn%kaUoCmhn=J=8B
%$2nt*co4+@5(V6U;AC<hF&7NRM'DT(MOVuUGXoMi<WK+rd#;J)g*lSV:@ro4?BE/U1`&o?5$(g=IWlMrkS$KG8I+;aEA+PL53X9`
%]=JUN])549lhV.AI/jDp@-.cU6JnP,^F+XVNE0`cK[AoB/OJ>/&c)XY:!s'!ibi-1IF:RJGBG/&$&j<\*K]T=Ah`fZ8"oD!U>M/#
%O@Cb-H:$h:YDU]qDH7AG"O^#m!K#f2+@;]i?\H/Z,4l2#IO?.tmusC^bWN^=k[3)*bcXa,^![E@rVZZ>g?5epg5juP?bOrb@&/7W
%7I(2`fFNdsY>dh:$2A8]8sethm-j,uAQ8O5"KI-Gg4sLo4sQJ.2sPf%21e&c"E]n`"Mrp0;Z*>KjEEh%IKIpf8LI&O6#0m)K"E@f
%kYGFpbuJ0%NTd:PH$Z7PpK5iA6)CEYNZn2b#&_;MCf13"#O,#l7"(5LW+`u8Q+lmnR7d?(&4f_W>(raMl#**LW;\q\jF9uTlDe>"
%L3nL!s.mg>^^[OL+>DM5fg&Lo@#[fdK\'J:!iS@MR]Fi<0Im.7S&[H?!BaGl!(!H]X,\>?mKI23OEBgig^oAD!YP4d-]#?#CL[-\
%]LJqr5QZKn>,0%^RfEXK:N5(mGdK"(\:Gd*EsE;Q>KC,YD$*=qFatE?+$^r05Nr<M/ndsQhe:VT[1GkOO@F#m8nT;4KC]5$Q,)eD
%*Y`Mj8tc,D_<&3kAq4-(T:aU%9&OlAIXVhb.tQH$YC+#!I="/6<rrD:UJcYB7BZh"X-GqJeOmU\ZP!N\Xe/90.L9.?Qj5OP"?]8?
%IM)q7/;7+lX9?s/.fltd,nO&3<'!;h\/1Nt!9pd%kiub+5[]g?l%!"TZj*im_1!]g_4pSnpOY5(U"*#B"O].X!RkO)5[\_t<!A*3
%*0c]gM6[cX.W-a;Nd$^OB*FB3$I(QMWJrD/Nt\@^^DE\c$I+9gPlOle<W_)WR$@Z&FH^f3^(C#?CF)6WX9?,G=UF<_0;Yl<5>_(T
%&2]$--TJ734Bdtu1'l<AKiV!N"Sd5b9#)-D#nTWd8I$Mu]7I@&+C/"L?/;Rb#`R1Z*K]T=Ah`fZa-D0FMpbB*5oQlPlA:c+pSt:t
%\sl]#!X-qGdK,3a:*;%fDLP^p\1T94!i,BZ#NYb-BEg7gE*N^V?g;pObd^j`"I7&G)Q`naO.l8<EpkpgM9A@2ag)Kaif-4=8H#=s
%P)<Yna(O/#*a\6-l?_n8!X&RAq7:tS9X>7;*qS=0I=N]6I6^&3lRHBmoQK80*C.'7"5FCP!!8qd8LK>"J2Jp$U9R2M',Q=q$EL10
%#12*e\oAVGRBd5,.WJa:%#*MTgpRS5=`sg`LKsn2-1XV36Hrmq.!;57U@8Hl@\a4/Cc2=d2NMb2"F-e[!eO$H<ujZe[hkB"!84X`
%E'GlT#V:[*2@t`MX')D2%2F/\5X>h/i)Z.$!56X`)qP'2.VjR-P13LP;#'FsAIFT9C]W<%>6"^Lm\)!VAHgYpe;<=F[O2WB\Jd"?
%f`<dlH$nW^^iO&l^b#XOSU6)6DAmkA[/qIT<WMQC'``e^p7r?i=hkrB3mh1Ep&kFO=+aL4$NSnMa#>OLm^MmlE:3Au^&@H_d`d#'
%cL!(@EpqnVGA9nu-bhe4e/hcDX-0sT'k7+`O=i!t86*%r-S4`5X&OA$SdP$(]`NJ=?=a186,8r-1p9dUCQ<^4?N%DW9i>Z4UY"a1
%c[)4T\ES]nKrUP5-V3n'!dUhQdd^L(fB'\l$09'O8I+=fTJ`*^JA(a0=S:C\qJ/A8X3g,Z0A*=sonGVldjt,)=H+S+!?sE,nXdE>
%i^J3s=Dup:dH4GU3@B>V;eX0*$uM7.)Q$i:=+;em_\AP4L0*g)]&K9-^A`BA?34gfl%"-fmKMatHV)8YpKX&/mr@<QT\#GNW4V\S
%Ah_[68)^YflIC4RpOY5(U",93_O$<@hSLXlH4=3_BdW(p6uY(=n)?u$?H20>]T"Rq]T+Z0J6WmIK:)p'b'je#0AEPB(SnkSXcE$W
%^>,E,0;!/[]U1@'1m<#H,.J;b\+A^Ia6WP#=7><F+>;qO3[!<#5r4mBJ>;>ChqI,+GnBp?&^pE#Hb)1\8:(V&T6nsmEP0K/Eq(p^
%6EKtb7a5!]!>GZQ56??%Q4`k6M!OZ\n4J$/JLY(UqSSQ,g1MDsgd]QWJb!:I!`@<E`<c,0ipq!a,ie"[l:,^$:LKuGZ3aB.cl/2g
%d8V@QM$p&G$J`epQM^;4:MuEp*iWIf?RR,0ar#]c?<k205.Ppk]t2VGmLr]+5.LYm118?u9k^+HGliOR;57?$hKkgNk/iU?h]p[0
%mgDQN<uE7PgPOtHpIWBJn(!HTI\4E=njs%YRK72'l9[9qa<sfGAnps:=)YoNDtE0^_=*fW7JMQ\T<!n_q!H#i0)S>=Qf4tc]a[2W
%dIAA-KW7@S>&$H87E6&IUp1ioGjnc3$tZ$eW:rGU]t$>9Ml>go08/PDYnNIjf-_GSY?*f3I=2/Aj-*2nWe/g/e;2,%N$f0-@l:ht
%k,nYtDk>f.pE*-(>aA^b5;)?6i?GtMhHe]&mGTpPmGp@<?NWgeY:&3'\Sf)f8>l1i6q(0,)QSadhG78GI\hqY=$cJ-JI)(o`-_)U
%&?mK9%r;sXSto\X?O6jLQ;[Y2O;*1e/]BAd;Z)5@4]a[%."Zes./p#0n[gE25Cj+9UuPbWXp\EcfpQ5$q)qin5/7)'O9R5[?QDT,
%=4bmuU*n3X^s^V%<NV,3*/*HM+uI%bQKHN`7`snqi;NMP.5^'%V`'E]O&N73YJ1mLED#oe_EmkXl9b1@.R`qW&-\VH2!><e0/0Cj
%ktq>]MsBKrO-o,,0<"mN#b&TR'-(Su8#t8.<sCr/X`T'c,i,)R2fue_9(s\E%@qSt.#PWfdJZXlmWVrYIfbc(8]Q2Q>o,>MR3ss$
%IudX6hQI?>1g2@.l:K,_pF;EBDcS:d"JVWSNWqpl-W%rM2a<PAl:Uk"&4)q1]URgQ8^IlXT&;$q+4p0jD]a4poFHhNIb`K^Wr4?;
%U%QR?O0ARV@)RQ#7JmCqp^\3ET2\-*$.qG#Y$G[5H`4M/^%bAC8>YXZ5?&m,)9=qN;>bd:&cVmZdOAZ3HFn_Ss%+%&ms^Au"@gt+
%:6=amDY$aRRVR"n_?+DN!ip(s5J>=J)s+hiMYn!BU.u^rYhKWB('%mg!l4c=!$JMA4iorg1uL8AFeOYdlOsMtR2W35=THh'4M,S6
%i1[FV#`>EQ*CK>N$d8s.FBJXS+]\RGQFJ:]LoL[7VPQ1-<KqpN$.2_3DIlrOd+^[qE<Y:"Z2t;hU.u^rnCn>p&g6F@!k9D>!!GdH
%_bUhdKl-uk-Q4Pi5&h\`XO6$i,lhGCk;P!o4BRmLgbtn+\Shc%NFOWGec;Mh)Scfe"s>VjSofQ`(N^U`3mh>4pPB""@#\4GX9!!Q
%T&6aV=>'""i7bs5^GU@@T1?6mGdW<dgX<2)*maOVi`H+BT'aY]IUrs"`+smRM!IY:;AHkL+KX,o8QBO+(X*d?+Srf-JZ)tl9O]'q
%\-DFJ;>3YT21T9fZl3B_OKM^gQlTsmTT[fi:65bL"_J3/\uYqD\lf+HLq6AC+P.'k_<ak"?NYPWW;HM+ec6Vid-@R\!9oq0JEa<C
%+L%Ya;AC<hF&:Ef,g%$uX158438UV2S/";h$-G6IWJtZnNtZZ.^XjAhitRpi-Yi^bY,hZ8X"\;h!g1u(#NQ840<j"-Urs[LX.(ts
%0)qksY5^cC#=+skAtIqj#4Q;'pW9'cJ4;&rH=@?!a'7*pVT9[+5U:L#!K#fR@''H#QSh$02erBp;>3WejLRVpbWN^]%H,X.mZTqP
%!0(#mou%c!HWAVsh9@Eb!!8;48I$Mu4+XI6\G9\Fi4>uj#XmJr*K]`R5oIm/_/TpgZu^YD3:GH!5uH3+]:a&dk9[&iP$G3h)BaT6
%"!h+%!("7%#T.u^<'hu>\3Bf&G8tAWd@RA`_lj%O#ZM,B70$l)#[eqLm)DJELRLXs5ZDmK(kU[`?nDFNQUQH%@1bb4oKDFAW@hin
%9W`!6dJ1W`d9HiUh5g\ADP#^p$Lh/#"U%7uViDqqm07I/!4$/Ni-nc3&6KjCA0<??Y\'^i1fH4pJO#[(d41Yt!8YoK)j^RH/'EI9
%M!NPF"N.pg/-AG0AUk_/)*hT/I'S=%C;:aSqTrJEq$@b2\Jj92ZOWY?H$nX5^iO'-&/8uP3eh%P(RT>1d]j:$6`^@qN66pJ+R0<9
%M5_5L(7e5DO@F#mQt.AU@-.cU$NZ<SK`F&nW,(fDJohCR$`o$^l*:k>6S&?GN6WfA+OpXtM5_5L(8XeLO@F#m8nTG8KC]5Td?\<M
%QM0*Rrk*3T,^Ve0nG;*b?Cq"M^?+#h78D0(Z4g9%4fM&Z#I%_LL_d0f+=bHNhOiMscV:HnkBaah2Ym8@/M@aVet]Nra-!+LEMTjb
%@,"%6e@I#a=q<+E>?(f_gKn:;3pEBih%4=l5X]kF!P**p9T)q6<Rqune-\Tb'j@HeGGN'G$#U7T;=#>UMEPWPE)d2eH?2ms4,K]a
%h+B,>3_"p\(Q`B`Al@06#Klmp0NK86W6hd$p)J%=Vm\_g7'Cs-k]O$oZu7Q`+CBhLJYgsi(VS[2qU+W?p*7Jcp]GY?J"`8HXa%'$
%1'hCsU;712l"iIqE1Z!#[-2Xn(;8"K+PO<i#SP,4^s_PEMdCTpk]HrhiCO:8\j8,,>4H9/A.Zfp7&(Kcdb/lli&njC7MWVnh5R.#
%q1(s3<ZOK#\.a[)kKXmWmY9*S"<taI%`gTNTU?Y!GdK"W#\479d0^?ECciQY4Mf?Ws5WQtp\NuYrTdhimQ^[LGQ7X9^H8Q!^u`+=
%5-9_#\iu4Ws5SKU>Z\A3?eXoFdJhs1]kUo@o6oSIr8""%2tG/PD3SB\biScuJ[)VHqqM+\@FrQBs8<%Hlea>(Rt12=nZc.i0roVF
%]F>T[QM&rrh;@*?fRS/2=qBN`V=Ng8HB3=NMVsd)+Jf-FgWqIZ+)7q3X'!'+Y9.!=.Q3U=H`K=r!ObDrU6mF]I]@C5J!48UB,]+Z
%!49B23q.2L[e&P0h?tV^O5&iOOH9KoboF.bFZR5'rKZVrC$3dLTA?V43P@$E'm;Ze:(pNV:bZ"2L))V]o6Oj&cASD(@":LBDgf.+
%S@bAi;/OVblP4NT%3rNuf&r'o7_%aQp)*_'Jrh\?M0c<ki8tW[pMcb.Vd%cnqAI%3-Fqt*BWiNVB4VE8\UnQOeCXW$9f^unDa<)Q
%di_=\=C!lO-ff;tkuc9,g7A]'47Vq<=SdsMZ9DtR&"U#lV6W9u]RQu!.j616p7cHjLX\n,Dl;^[nT_aY7W,-t>dW_+DQcAg4Z#M+
%4t[2BiD<l;]WH3_rQo^i&8!>l>$mn,ejh^m1s]o`!*F0M\'*4Gn@i4Hlh..nhJ_eLin8`Z":;'@W:S?qEn1ZffDEnUe;s+59'`<h
%pYH[UTAT1A9H_gmQ4LNJi/b`T+.TKlV?in,6a/&NIOmUbMgCql[B3?X]Beck!c=.,XNqE$T8AV?I=/Q>1`mlL[1frsZCW-S:%@b`
%r%.TFNQ8^qmC^rdUMVf*(Ca4Ijau$)BL"q4]U$51F:/Jn&;=-+ol9'(4>k'&=IUH3\XhSM``LUiVoSZ:n_S^V\1,&`F2<q2rN-N2
%O3Q^j/T!F[4ZMc,eo]SkOPZnfFZk_&k?lqsI!SS#"5:ZBgQd!e9DPA4?n:n_[9,/5=:`<hAP;WMoePAf2(80RF6i?Bn.0;uX0d+3
%<?]io$ib3;gHUm,g(M)I\ncQRp.5,<r7,/,0Ku`+jEt_no_5I3"'c#Gm<.eeS_#CfI/U]9?jfUD8JMA+HVpg^\:))(^L^RjN3:e,
%rC[;q$3%MXI@VF[N4A*(K;`1^b[DFAB8l0>ps3e:"5C`^l`J+j&-UB@(bB;qqal^p8IR6;<IB,,DB5XuH6KK'=@9/2P%a`2SV:"\
%qU"d)ptEJd4I<P9>btK;IHqC/V1&C;ERCHb;7U(>K`.8r,K+n6[l8ncHFM@lpq=\J^BJ%l@+E;7^#blh^0oY(o5T'Le%<?F8,i+S
%o.j$>V>q0rA(FH@kN/eG\Gc<Cm<n1(G[6$rlh/[L]foJrE:Nup<%h>_@2d\i:\:]R>&Q-VDM7D3\\'!mlE<Jj+]rl-?gmdE(KS"_
%n*=P.Ie4_7p[tk>\_m'g8JB2["AV$Ulbh,m<6&H2rTbE:'Q!dhEUSqSX_fe2B:[Bl'ElSrVJ1IUfUQQOf;kP'j0:d8^)mdKcU!pB
%=LI^%s2V\IjDO_8`HRYl%pcBJG>b0`6o"pse5"M>Z+WmK9sOZ/_ek,(JsXYVJ!YGfhqicf1dqrj%$iVAe(U<OV>OZgQ.=:hj2*'f
%g[3kt]rfS+Ac)ia@9cqZN!ljD/kj.WSONQQ.DST'8@dX.dC&q3dHf4pj+Ku1DqTG^r%8k0>Wke;)V)*)(Ng]ad_-_l!^p`0M`OV1
%W+->ll8W3Ma.H$,<"QF6UE26\`,FXs_b<qcVeRJt)OokH8n?1$&ijTc`:(<g!GK_dOiYWYM6&n&a9b3XIhM;/.Mo=DUBWPCl//#:
%P/N=,kiX^Y:<qBLc"khN^6YOXF#HYl^FL.OfhPZ6jCF-C<[6hhoSZKD0]Kk?kn1/^UBWPGM;SM/(GeUWTDg($e,M8/;(QLELue[i
%K=;@$!1</,PupeY'$KPBZ(*5!j\I'$WX"uR4^.?q,>'qH'$'j!'`'6u`LPe^Oc>6$UI6gQBJ'.b?iXq_=;5g3D2MJ5TU6B<`Vdh&
%5ik7H5jCUuPT3Gk'Jbk/qC*E;SDL-"%C3NmYWcud9;e9*9=rMWmKhus]8^ZJ*O+AB:(,MGI(OhaF0p!"Ms#V4;4.Jb4mV9g69ch2
%!nnAdcicfXP:_TJ$I(9%R>iuU_aGXqJKTqNkgg>D=p$?.D17:T!bnO;JV`2i>j5sc78S2.USnKX=ACac<s?iFk3;QE\iW9SQoQW]
%5"@p)e;CWqoS^.94iB4/eOnr's7TSV`K\(`9a#W@0++2aM!&:NED994fO8NIbk<kjd.q`KR\nH6+/F(K7VeJ6@[k1*Z6]Sa[lGpa
%RnOFL?-+L4![FS+%E(\$CEiB27bR0kU8X8@O@C^AlNlaG[\LN1&+N@6]i6`udG'M9r[(bN\>u@>K-II><e.-Kd*-#AhC-9)<>9U3
%#gu\+DCm$Nds&1/q'!b7UR+RW,(;UndGlL1+Rc="OV8S:SSTFO$C[C,_]*.^Gs.SaO(\J'ecCoHYNAkgT2(*ANucF;Xku.?`-G6L
%SHlD^%uBk\<'mN#YZ\'!p[afm/sl:iFF/0<4^j0:b18$6.N4;<`o`,;.c$kY9SXJE2p;D]g.l%_3p@j>]6QlJ'8R,o3^Kbb1rH%&
%%lHtL\7fpm<FF@:A>d%bHD>0J=JOS1XcUG#`Xqe9![HMm([^X>&FT`kQmWi/WYUt)d>)@l/E_[UWGAM'lWT3ukIR4^2er-U_N0N9
%F@R?Q*CDO9%4if$\k%**KU/P-kk*4(d3h\?)&I^GY,HFD&al*gd@q4=%ukj^USRWhdI]^NQ2.K^K&LTT$%(*cZ?JN(Hf>V(aX0Pi
%KCY.m::cM;LirjInc!JB>,A"_BlG-OW:2rQ,^rQ]kGi"tML0p%q4ubu^=ts<'8D6;1-qoY2"RFR%i,UM+L5=+2-Qh$pM"T<h]V\I
%97&KT5<H]2H*gr,H(GWGQWngd\6V/3^M8;lr+k3B/]HV]rj@W`)i?k9'n8L&8?*e4d?6_&B`@'Zo=H?<T>5,cV$j*)68O^;DPQFi
%5gf-o+@m^l=tQHE2:PP&Ar,_"OD^3k8.9\E9D=W&]"b9bh+qGN4R%B$(Gpc4-eJh,mS&V3kK!Z!>Qr@i(?NkV)!,[f.";<!QR")s
%BBpO:g7Ld\ra!KVIfcD08I+=VTNo1Jj9G/CM5'8+kCPNfU"'_>5Ad1pbn'JC@%+'2+C_en(B%%3kl7f!oKRoSoqV\1=jWV[4M>_8
%i3B$BP<b5L.^WAg"-CO/!AHet!6!8YZ2og??=7pVUrs7`FkHcu7GDm(!3*-Jb[hjR\-2;3dIt[)8<Xcl4g>/]kLfp(+^4s+BI;D_
%`,I@`HN;K*&(&kO*e;&iHdVr*/njB&%rbVR]K[&O[r)^Q(u"i>*]20#OnM%\H$3s'_J0NVRBcuE^e93p&GMG[#j(QZTA"2f03V+U
%S)sZl^@`!0$=bS_ft7DXdHgk5YA%%t#!aug![+;cdU=FmZuuMGs-#&*hh-ma:DfNa\HJl[B(hZ+I<_45fb9]pJ>Od"l:1]L\S5rV
%o[c4#r,X3YUT9%kW9jaXpa99f^Nr3>-S0:%WBaE<cLr.h9mE&r[c\?:&YO+^X\11E5?I)+[o)bo)NWt*fo:Nb)MVY/)d%t^fcp4A
%%!k-$8&pB$Ld"sNF0@UOKEj!%HNMk#BV7hQ6f`\U9S4;'^'9JG02T6JNt`_hm08m+:UX0tl33lR.-,_Q#uXJ[n+g'Z)r8O^Y4i&C
%rVZaHZq<jOVnZqfUWV1Z&buT&0infOd+\qe`_X$;ii<e.IY,r6aWsD'0u2D6ke\!u"[7KNISJ=*Q&`XUJ(*H_H%16I5/4".H%3N:
%#D;\h!T_rU+ATTbrd&j=mK&IEf1UH/=mrqapH^A!"4BY:"f[BFpBa4D-Pu@123IV97^XaP+I*\1JP:,(jh1nVC/4ms)QD(u$$i_J
%QFo.Dj?8'9PB9'!\/SQ@Sog+h?/<SK!i+I@#NWIh)9b4Z?J]m=C/d8b#0>sWB[3j'HVVK"HP8g('3Mpn=TL]jkFe"4,`98'.Rr8.
%(tDAB+BJa.l5_31aEp\seXeuAUkoG\L62.D)gQ@NaEn!;9P";<]:H1IHZDR3G=<bF$&iUH*K\Hrel:erNUkq97C=Lo+H9B7[=l1g
%j,s'_LqG*qAs*To"SVsBmn"=@n%-U;TW!$/%Ns::R^pWE*9Fj]MeZ#l6(4n%l3Va.c6Mf&&:%%kbp46i)"%PshNKS_^8i2u:LI-`
%l%!"T1io&i36;!_UHKTuT8D.n!>3WC6el^35)lokj*A@"JPTASr1o4e%q:A;&Fj)+KMW9MeK0u.rf[-TPu,YsnLG$DZ<?4cBJb/V
%RjU+oI#g$<+(E=R0G>^H4+YfTUl3Ugjr(!k+::<s"K="e%81&5f2.V+M$p&O$EUh$qK+YlD\W'iCXbPG'`tth(kUUN@,sN9UA*IS
%JtKhLq.'S)eUTM-I@4@sQ/^*r%A]sAX_TMGTBgZlhPg7^$U:AXdiBH7FUZ**2m?7Gkp$#\&A"LZUZb&U7%ZF>CL$^f]B1U%T0OOD
%eS*?dn;#"G^/=`RY%[j.'%;6Z!5WV5Yf&cj9)Z@Dj?IY*qIC88ZCq$7j@et@BLVqK&BGrr6E>5#57Pm?*&dkh/1Z7D'%L"&&/=j?
%ZND?+[KLP2C]Of/h'\U5<<]LMl&5$LXO[@X"O^\;<p?[dBQ0R#YR%bp0:uV*o-3+9CQB%).uSrO+n7NTDVZLEI?7\%&@X0JJD7X5
%@.0h.`<YoW+<YMH<KO6E76n^l"=+eA!7t`n5[a5tdKNNOTc(p.[rE#<JYMUs5`eGbZs$oNTV9p\^^O?K&4e`O#:,&9J[Gb+>o!HH
%h(/U5N4pY[OR%L10_5GE76l'o7c/8tJ:+MOjp]EWJC?31!#&lT5[a8JA-MaESV(Yh5b]e2\r'Vn&/]gk3ZqK-jm!j52_5"m;=o;9
%>`^9^Zl3BcOLA9pQlh4d!n0hS!ti/9YUfjsPsmr>1lD>8U[LbZjKbF9Q$I]9,/@\Wh^<stNE'Z"`$-=`B+\O'/-:X&R:HC4_7dW8
%!_AYHJEsKH#`?@Zj8`(`Tpa(d^i9tEaeJ6f6'*ED[!H0nONt0<0LHTV`6h8a!K#cA?krd=b9EU[Rmd=.dJ'F=Ea@&9AKKd6#e7:/
%E8U-_(\%U%Y1r9^n*Pn@6/!R*^"WW#<I97,arV[]pAb4=n<6I8$A(D_TCiC?]\4U\p"leO&dGWfo+iGpZNWm(o=2dlJEN:O!45SP
%i?\b=4)nC)O=a+UDO=Q.&/]7[3^Ju6X@]B)9f1k$\0+IE=B3TQJDTG9N@P"T1b/RO-kpfh0beYTES1>R/K4]!_ZkY,P4iDgTkLYK
%PhOJLdIj$P5`F3#?";:^>d!\^7fD4Mn'V0*kfE"g@jq7uj%B<7/b7ft+TH/gF?StUpm_XkZVh_\.\`M"+GOX884<AC@\2C(r]O6!
%Io%S.5%9&ZD`=i+5M8[+],e7CEKTm('1>j9Hq_tE5>J!;#mAZ]Wk^)(j\L6poL@s2Z(h/K8k2r'6QrrU(ZA/u:&)=>KKinmo-=u;
%;8=*9qTr3(o)o+L<J+:2ZCgjQi=3*mI_37B=jO,JhA!p!n`+K-\NO#!merXE:@7l;jB(<2g-\L0SX@%tY7Rc6J96oQ6)pYZJ&:hI
%]ZR'Pii/g3M3gJ6MFY6C.P!=X)94XmIZ7:0]W475Uk&lTL@fLK7[ggHM4\+8QU%!23[!tI%Epp)P)bmi\LqgB9-CF[90+3I"jLGP
%!VV]6B.5LMb>A<2Gm^"HMq@(P']a[fU8Jgi-*UQEZ3#ENc9Z_k?4ue^4BLUWGmWQNGtA8%Wh<V-rSRmrYBfE@GkK+/1f'gqNaAA[
%:$W77@]*;k,r!#32@sl_$0+0pai021>a.23-'23m,or)jK%<nuiJhkb6e.+clH]WJW'[O.]i)&fk+-gmVjHZpNa@kX8G)TWH*^i*
%nS15;e[tJ]e][W+C&k69d*-'ih^J1U=1pYura(]K.^V7b9D5B(hQeMXHHfdUkU"o4`,@;jGO6[s0ACPRhR8b9?FQ8C5ctK`\P2T6
%V#L>DSd<WTe.3B"ID<83MmJ!.&99sY;En$(++5HpL%L($km*0%Y=o"r#Ill[q[5H0[\!kPork2f(eA5Ee?>=RRD.CDV_orPO-,dX
%LK8M<GR4te3KEj_-Q+S9pFLSWI0(YOP>-k5K%?UEL^"b(:L"G?<8^fC2q=h8H#f\,pIKR4I86^hkGhtoE]\9RY<L'Q@D08")s\/>
%$9lQ3<&7q,8R6#$k]]d4+ALALG(oJKqHU)mj@5]t?0o5:5,W[ZF-SH]^V..i^HTbaJ\Bdb)sl$t$2AHAct?%f)O7n\9TecH!bnN$
%2\NdF4s]:<NABBIe][:e75a],!Wp-M\@g-OamqcFFe^nL-SF[Iab6T@BKdX)_]P^PmfW^f_c5i#R5`lu]m4jtb4em.Er/1#buMah
%"F&jM^O;9q$guQ(hJf*kM"fsCU7.`4/%)(E,2NV/dSPp@Q$Li,g7)_6M#9d?dAutNGuja%97'RH8EI&Gj"8Z*Q2bS`Zb(YfU%2RX
%GB."jq1Wo?^Hb2.;PgXufW"cUPKL(6;Yd=AQ(L=[46c>(H^,>7JP:,(A\JDLfA0L05oQ_EI^LGlcVUD.`DAT[JS=2AUHpWi%?/S.
%3cr+%U@T%SHquf[L[VgI)9b4Z?KcTG.^-Y6OTG$`MUKfgL=4C^Lsd)*.K'C8G##>Xc=cG_'W%Ei.",/bkpI#CT6.^jhc2tQHABTO
%;Vr/<C[p`:"_j^ZqUL\7I^Lc007M@G$&iu/CpYR54(2h$j?i1E-sAid8GK"@^%j8g>#Uie2i<$E<NjQK"G/I2WVpR'C;1ZWm>IXe
%Ic=2La[Ub(\/0tT:HI">l:UF[.M8;:K6QR\Y0bC(*oJI@4^#H^^G6)CA>T%$-gCTp*5+"[deekg4!u!GM;_b`H9^Z@qlYk6:EVDV
%l$0tWl[i_$o)K$3s&dU]Hi%MR$iYYgdOije>L#^l&*j]Yo-:=^Io8`+#I3>#(bqX^6Dt1BIWG#E^6\I`F^I2O?VpfgbDJM1,Pfg>
%4KhWQH]XBfd#*F0QQQmp$&n'q>ss0$c%pfM,N_QF89I5-=fE'o1ho3_!Am]*<AgMChWELNU>J=tki\1fN(t6XOP:/%lmH(L^\^=j
%'3KjXC`o_rE#Y(rcpUb&3L<#g;knK#7J:fAcEeI$Is9")p2d6(8>hIkq!A9On0_Lp^DfN7ds4N2k^hs(-K$d6[@sRok7\)pW>[?$
%&cRlZLGoQi:DMh1'HsSS)'J_A#+"m/>tKP?KCgNDP+HKA<#2i).qupDWDW;E"7_/Hcmg%":OD^.7d9BP,5m.gV,PDG"SVsBr^jSU
%J%((*-S2!`A:dbqF;pSCcre]fM$).-NE5"oJ(gBi2i.K6Jut(9fD^d.bIIq9Vr$)+BFfEmgX:rY2=^M[iYVAQT']\BIRX/>Z1nic
%Q;4G&<RKej@>OsE6N"GBih&Im4m<$I/1:Ugju/*H%hqa1";:_QWR,AdnZSXPpbtRY5Cj+)U]V7Ih7s['Ul5$:l:1[bLo*s/+P.(F
%@-.dhikIQRUZjcoLju%tTK0n6r](E4r_3so:LM</,V-ZClPrm`T0s:k?,_VL!n$X3#NVmNFnH6.)oTK=MPe^l9DiS"6E;9JJ(dBi
%RigX^^hDuT"sS4P@1iP#MYQXt7f3pUVGB5qQOTC_bgRNM^W25/:BHB&NE'Z"K_S@'&cX26pa6OpSSUP8\/-"P:V)@3f1#TBQ);mL
%!Mm<"b[hjR./lA41jq,Mr+iT)X!bi83fj%p6c;3/#jGk%'#VDuLk!iAr-*9.rWu!A-QS<7#%]FY!!i&/>h[ZCp!np!J<A@)[689;
%SMELb,K]W4M1<B7r$PL_Ih7P<J5Pu2-%q/+l]^"KWBh&Up.TVshrLC`ONM22T;%JJBl'Bn./uHQaFB"79>aGbW9j^Wrf\u*^RJls
%5Cl])U_BQ8TJ\:.U7k'0',O&('j,Ub!2-rLHK,(BA'G(*djfr1AILkC0/*b6dU`I;ITQR]=N[4O+K??aAu.[J;j9Em1m"SL['$g<
%!4Zq0l&@3Dm_[9WJC?ZE3ctkIE&Y"%!2RdF^^[OMT_$V*ci_ZC:;@d7qTrKpp&kG2Y""==Q2o:!a#>UO4BIgK6'9[nX9!q3DI>$s
%868FapVRVo\7g5p#uXpQHt:Z^5?aiM#mBgSX3`>e2#n*2"!#nmSh+Z-TW%/*0a,J/^oRQ-\#f\d%Vl']U@(T"86%rk?>;l\7Geaa
%UqmtOdTH_"i&ndA``5?R=Y?<Wrr4IA*Y@/>XA9q];a7Fo4PRcol.HC9KH\j/$_\W?'C#^p^I]54Ab@#8VtS>UdiRJY5#sknlf[7L
%[CID2/!!<c"UARR_3*U:\^`f8UO/YIF:t6jX,8$^gC5]n::b+\2hXXJ&F#a-5d&:+f%79B`D^>n5p2'rbuJFLB?R!j:(uE+<`/*&
%/Lm<T[<-<s?NE>jkFb`;,`53</#[Ok&`6.bjJr->4f@59OmYW^g4D"Z*^3Ri;`OX`g7'J!4^UXTH_eaTTW$]s"!W%Q@?Kg8MG/4Q
%aE.J\han(6ZM_:^N@UQEXR%PPVnIl*.^U\3jIj85HJ<L+a`L;nR3#=j\&nsh_7dY*FOEUT],tR0:oWp1"&`G'idD8p<]jO9(Bh&?
%ct%ib8bO,XR0L/a#*_aS?r?/SV0K%u+;*B:N(PI'<4_rmV%\[[:-'NL%@VRiM?h>uJj;49)Q_;McC0@iVZD5N]0+XloB#qBgpQj(
%]f=bV^oKW]^@.Dtc\+U8B=GqCr;Zo-Q<TtSDndjh[J+pZNT9=^Z[SMGZE0Z"mro0CC&]1"ISJbj[U<':\k&hD>JWP9=/+:#rGm<7
%e%I2_bIoQRHi:#JE*p(So%^E]V$`rK_(pd[>b?]W4S&r>s4'MiP+[8j;2B[fEA+K)Ot:.U+%QlG!^e6d5[5&2ILT27kgpq;p&kH]
%V_j*.jd[U'2c&ng_cZM_(>W)FdUdmi6BHZY@Q1Lq9=bP?q]2[FQG<ofF?lu:>!K3a<qPu%%#dForB?(bPg3rVE1YuIg:U+d)f8F*
%bUZ-dknTu*JMgWZA[L8T^b]-q1GR;Y\LqR/g/P3<eYZ$!5Tm`Z<bP*<Znsa<E#`_$cdIe2-uJ+C/V<WCQJK=p/a5%Em]C4A/V0<,
%l%!"TZsFNC<qN[7-:T,>hR4XcV))9nS0p:V2W'8T7N5>$MY`@'+FQat2_]H@UuSoCYHDqR8K]sXU]YXCd/%XO>2d)=]#uE18De7u
%R`aEHe)*:'BsQh^lmH#9\h#e7DUrhQmKR:/8]PB?FTEhY5R*Nrgp:9&Zs8]-:bG:%e0GSr2H#MmV&=+gS0p:V2ZKf+NAd`hXFKOJ
%Ujq^`%BRs?/u.gX(`=oV9J#FY>W6?qNJU^6DbNi`5Xqf(U_B3F)(c<C'-'NsXg'Y8TPCg)Op1(NI5eB"9=g)5cdRi=5UMe=5d&;:
%Aj,V3MM6U&c4e:+,n,I(F@JoUo)q:QrK"_nh<UDWoril@]DqO%J,`mPhuE]Uq#0[\k&::UrBL=OJ+t\sr_NRo?iKnW5HMZXr.dN8
%rEoQm^]*KtrVulffAHVrn,MWJs72L`rq$a$n;mVIVgn]hIp;q[^\n%;s7/tcr/Z@+b:infs8:pWBLr#qr5%:gc+j'=s6]9)pHJZ`)AE\~>
%AI9_PrivateDataEnd
